Search.setIndex({"docnames": ["about", "auto_examples/api/index", "auto_examples/api/plot_sampling_strategy_usage", "auto_examples/api/sg_execution_times", "auto_examples/applications/index", "auto_examples/applications/plot_impact_imbalanced_classes", "auto_examples/applications/plot_multi_class_under_sampling", "auto_examples/applications/plot_outlier_rejections", "auto_examples/applications/plot_over_sampling_benchmark_lfw", "auto_examples/applications/plot_topic_classication", "auto_examples/applications/porto_seguro_keras_under_sampling", "auto_examples/applications/sg_execution_times", "auto_examples/combine/index", "auto_examples/combine/plot_comparison_combine", "auto_examples/combine/sg_execution_times", "auto_examples/datasets/index", "auto_examples/datasets/plot_make_imbalance", "auto_examples/datasets/sg_execution_times", "auto_examples/ensemble/index", "auto_examples/ensemble/plot_bagging_classifier", "auto_examples/ensemble/plot_comparison_ensemble_classifier", "auto_examples/ensemble/sg_execution_times", "auto_examples/evaluation/index", "auto_examples/evaluation/plot_classification_report", "auto_examples/evaluation/plot_metrics", "auto_examples/evaluation/sg_execution_times", "auto_examples/index", "auto_examples/model_selection/index", "auto_examples/model_selection/plot_validation_curve", "auto_examples/model_selection/sg_execution_times", "auto_examples/over-sampling/index", "auto_examples/over-sampling/plot_comparison_over_sampling", "auto_examples/over-sampling/plot_illustration_generation_sample", "auto_examples/over-sampling/plot_shrinkage_effect", "auto_examples/over-sampling/sg_execution_times", "auto_examples/pipeline/index", "auto_examples/pipeline/plot_pipeline_classification", "auto_examples/pipeline/sg_execution_times", "auto_examples/sg_execution_times", "auto_examples/under-sampling/index", "auto_examples/under-sampling/plot_comparison_under_sampling", "auto_examples/under-sampling/plot_illustration_nearmiss", "auto_examples/under-sampling/plot_illustration_tomek_links", "auto_examples/under-sampling/sg_execution_times", "combine", "common_pitfalls", "datasets/index", "developers_utils", "ensemble", "index", "install", "introduction", "metrics", "min_dependency_substitutions", "min_dependency_table", "miscellaneous", "over_sampling", "references/combine", "references/datasets", "references/ensemble", "references/generated/imblearn.FunctionSampler", "references/generated/imblearn.combine.SMOTEENN", "references/generated/imblearn.combine.SMOTETomek", "references/generated/imblearn.datasets.fetch_datasets", "references/generated/imblearn.datasets.make_imbalance", "references/generated/imblearn.ensemble.BalancedBaggingClassifier", "references/generated/imblearn.ensemble.BalancedRandomForestClassifier", "references/generated/imblearn.ensemble.EasyEnsembleClassifier", "references/generated/imblearn.ensemble.RUSBoostClassifier", "references/generated/imblearn.keras.BalancedBatchGenerator", "references/generated/imblearn.keras.balanced_batch_generator", "references/generated/imblearn.metrics.classification_report_imbalanced", "references/generated/imblearn.metrics.geometric_mean_score", "references/generated/imblearn.metrics.macro_averaged_mean_absolute_error", "references/generated/imblearn.metrics.make_index_balanced_accuracy", "references/generated/imblearn.metrics.pairwise.ValueDifferenceMetric", "references/generated/imblearn.metrics.sensitivity_score", "references/generated/imblearn.metrics.sensitivity_specificity_support", "references/generated/imblearn.metrics.specificity_score", "references/generated/imblearn.over_sampling.ADASYN", "references/generated/imblearn.over_sampling.BorderlineSMOTE", "references/generated/imblearn.over_sampling.KMeansSMOTE", "references/generated/imblearn.over_sampling.RandomOverSampler", "references/generated/imblearn.over_sampling.SMOTE", "references/generated/imblearn.over_sampling.SMOTEN", "references/generated/imblearn.over_sampling.SMOTENC", "references/generated/imblearn.over_sampling.SVMSMOTE", "references/generated/imblearn.pipeline.Pipeline", "references/generated/imblearn.pipeline.make_pipeline", "references/generated/imblearn.tensorflow.balanced_batch_generator", "references/generated/imblearn.under_sampling.AllKNN", "references/generated/imblearn.under_sampling.ClusterCentroids", "references/generated/imblearn.under_sampling.CondensedNearestNeighbour", "references/generated/imblearn.under_sampling.EditedNearestNeighbours", "references/generated/imblearn.under_sampling.InstanceHardnessThreshold", "references/generated/imblearn.under_sampling.NearMiss", "references/generated/imblearn.under_sampling.NeighbourhoodCleaningRule", "references/generated/imblearn.under_sampling.OneSidedSelection", "references/generated/imblearn.under_sampling.RandomUnderSampler", "references/generated/imblearn.under_sampling.RepeatedEditedNearestNeighbours", "references/generated/imblearn.under_sampling.TomekLinks", "references/generated/imblearn.utils.check_neighbors_object", "references/generated/imblearn.utils.check_sampling_strategy", "references/generated/imblearn.utils.check_target_type", "references/generated/imblearn.utils.estimator_checks.parametrize_with_checks", "references/index", "references/keras", "references/metrics", "references/miscellaneous", "references/over_sampling", "references/pipeline", "references/tensorflow", "references/under_sampling", "references/utils", "sg_execution_times", "under_sampling", "user_guide", "whats_new", "whats_new/v0.1", "whats_new/v0.10", "whats_new/v0.11", "whats_new/v0.12", "whats_new/v0.2", "whats_new/v0.3", "whats_new/v0.4", "whats_new/v0.5", "whats_new/v0.6", "whats_new/v0.7", "whats_new/v0.8", "whats_new/v0.9", "zzz_references"], "filenames": ["about.rst", "auto_examples/api/index.rst", "auto_examples/api/plot_sampling_strategy_usage.rst", "auto_examples/api/sg_execution_times.rst", "auto_examples/applications/index.rst", "auto_examples/applications/plot_impact_imbalanced_classes.rst", "auto_examples/applications/plot_multi_class_under_sampling.rst", "auto_examples/applications/plot_outlier_rejections.rst", "auto_examples/applications/plot_over_sampling_benchmark_lfw.rst", "auto_examples/applications/plot_topic_classication.rst", "auto_examples/applications/porto_seguro_keras_under_sampling.rst", "auto_examples/applications/sg_execution_times.rst", "auto_examples/combine/index.rst", "auto_examples/combine/plot_comparison_combine.rst", "auto_examples/combine/sg_execution_times.rst", "auto_examples/datasets/index.rst", "auto_examples/datasets/plot_make_imbalance.rst", "auto_examples/datasets/sg_execution_times.rst", "auto_examples/ensemble/index.rst", "auto_examples/ensemble/plot_bagging_classifier.rst", "auto_examples/ensemble/plot_comparison_ensemble_classifier.rst", "auto_examples/ensemble/sg_execution_times.rst", "auto_examples/evaluation/index.rst", "auto_examples/evaluation/plot_classification_report.rst", "auto_examples/evaluation/plot_metrics.rst", "auto_examples/evaluation/sg_execution_times.rst", "auto_examples/index.rst", "auto_examples/model_selection/index.rst", "auto_examples/model_selection/plot_validation_curve.rst", "auto_examples/model_selection/sg_execution_times.rst", "auto_examples/over-sampling/index.rst", "auto_examples/over-sampling/plot_comparison_over_sampling.rst", "auto_examples/over-sampling/plot_illustration_generation_sample.rst", "auto_examples/over-sampling/plot_shrinkage_effect.rst", "auto_examples/over-sampling/sg_execution_times.rst", "auto_examples/pipeline/index.rst", "auto_examples/pipeline/plot_pipeline_classification.rst", "auto_examples/pipeline/sg_execution_times.rst", "auto_examples/sg_execution_times.rst", "auto_examples/under-sampling/index.rst", "auto_examples/under-sampling/plot_comparison_under_sampling.rst", "auto_examples/under-sampling/plot_illustration_nearmiss.rst", "auto_examples/under-sampling/plot_illustration_tomek_links.rst", "auto_examples/under-sampling/sg_execution_times.rst", "combine.rst", "common_pitfalls.rst", "datasets/index.rst", "developers_utils.rst", "ensemble.rst", "index.rst", "install.rst", "introduction.rst", "metrics.rst", "min_dependency_substitutions.rst", "min_dependency_table.rst", "miscellaneous.rst", "over_sampling.rst", "references/combine.rst", "references/datasets.rst", "references/ensemble.rst", "references/generated/imblearn.FunctionSampler.rst", "references/generated/imblearn.combine.SMOTEENN.rst", "references/generated/imblearn.combine.SMOTETomek.rst", "references/generated/imblearn.datasets.fetch_datasets.rst", "references/generated/imblearn.datasets.make_imbalance.rst", "references/generated/imblearn.ensemble.BalancedBaggingClassifier.rst", "references/generated/imblearn.ensemble.BalancedRandomForestClassifier.rst", "references/generated/imblearn.ensemble.EasyEnsembleClassifier.rst", "references/generated/imblearn.ensemble.RUSBoostClassifier.rst", "references/generated/imblearn.keras.BalancedBatchGenerator.rst", "references/generated/imblearn.keras.balanced_batch_generator.rst", "references/generated/imblearn.metrics.classification_report_imbalanced.rst", "references/generated/imblearn.metrics.geometric_mean_score.rst", "references/generated/imblearn.metrics.macro_averaged_mean_absolute_error.rst", "references/generated/imblearn.metrics.make_index_balanced_accuracy.rst", "references/generated/imblearn.metrics.pairwise.ValueDifferenceMetric.rst", "references/generated/imblearn.metrics.sensitivity_score.rst", "references/generated/imblearn.metrics.sensitivity_specificity_support.rst", "references/generated/imblearn.metrics.specificity_score.rst", "references/generated/imblearn.over_sampling.ADASYN.rst", "references/generated/imblearn.over_sampling.BorderlineSMOTE.rst", "references/generated/imblearn.over_sampling.KMeansSMOTE.rst", "references/generated/imblearn.over_sampling.RandomOverSampler.rst", "references/generated/imblearn.over_sampling.SMOTE.rst", "references/generated/imblearn.over_sampling.SMOTEN.rst", "references/generated/imblearn.over_sampling.SMOTENC.rst", "references/generated/imblearn.over_sampling.SVMSMOTE.rst", "references/generated/imblearn.pipeline.Pipeline.rst", "references/generated/imblearn.pipeline.make_pipeline.rst", "references/generated/imblearn.tensorflow.balanced_batch_generator.rst", "references/generated/imblearn.under_sampling.AllKNN.rst", "references/generated/imblearn.under_sampling.ClusterCentroids.rst", "references/generated/imblearn.under_sampling.CondensedNearestNeighbour.rst", "references/generated/imblearn.under_sampling.EditedNearestNeighbours.rst", "references/generated/imblearn.under_sampling.InstanceHardnessThreshold.rst", "references/generated/imblearn.under_sampling.NearMiss.rst", "references/generated/imblearn.under_sampling.NeighbourhoodCleaningRule.rst", "references/generated/imblearn.under_sampling.OneSidedSelection.rst", "references/generated/imblearn.under_sampling.RandomUnderSampler.rst", "references/generated/imblearn.under_sampling.RepeatedEditedNearestNeighbours.rst", "references/generated/imblearn.under_sampling.TomekLinks.rst", "references/generated/imblearn.utils.check_neighbors_object.rst", "references/generated/imblearn.utils.check_sampling_strategy.rst", "references/generated/imblearn.utils.check_target_type.rst", "references/generated/imblearn.utils.estimator_checks.parametrize_with_checks.rst", "references/index.rst", "references/keras.rst", "references/metrics.rst", "references/miscellaneous.rst", "references/over_sampling.rst", "references/pipeline.rst", "references/tensorflow.rst", "references/under_sampling.rst", "references/utils.rst", "sg_execution_times.rst", "under_sampling.rst", "user_guide.rst", "whats_new.rst", "whats_new/v0.1.rst", "whats_new/v0.10.rst", "whats_new/v0.11.rst", "whats_new/v0.12.rst", "whats_new/v0.2.rst", "whats_new/v0.3.rst", "whats_new/v0.4.rst", "whats_new/v0.5.rst", "whats_new/v0.6.rst", "whats_new/v0.7.rst", "whats_new/v0.8.rst", "whats_new/v0.9.rst", "zzz_references.rst"], "titles": ["About us", "Examples showing API imbalanced-learn usage", "How to use <code class=\"docutils literal notranslate\"><span class=\"pre\">sampling_strategy</span></code> in imbalanced-learn", "Computation times", "Examples based on real world datasets", "Fitting model on imbalanced datasets and how to fight bias", "Multiclass classification with under-sampling", "Customized sampler to implement an outlier rejections estimator", "Benchmark over-sampling methods in a face recognition task", "Example of topic classification in text documents", "Porto Seguro: balancing samples in mini-batches with Keras", "Computation times", "Examples using combine class methods", "Compare sampler combining over- and under-sampling", "Computation times", "Dataset examples", "Create an imbalanced dataset", "Computation times", "Example using ensemble class methods", "Bagging classifiers using sampler", "Compare ensemble classifiers using resampling", "Computation times", "Evaluation examples", "Evaluate classification by compiling a report", "Metrics specific to imbalanced learning", "Computation times", "Examples", "Model Selection", "Plotting Validation Curves", "Computation times", "Example using over-sampling class methods", "Compare over-sampling samplers", "Sample generator used in SMOTE-like samplers", "Effect of the shrinkage factor in random over-sampling", "Computation times", "Pipeline examples", "Usage of pipeline embedding samplers", "Computation times", "Computation times", "Example using under-sampling class methods", "Compare under-sampling samplers", "Sample selection in NearMiss", "Illustration of the definition of a Tomek link", "Computation times", "<span class=\"section-number\">4. </span>Combination of over- and under-sampling", "<span class=\"section-number\">8. </span>Common pitfalls and recommended practices", "<span class=\"section-number\">9. </span>Dataset loading utilities", "<span class=\"section-number\">10. </span>Developer guideline", "<span class=\"section-number\">5. </span>Ensemble of samplers", "imbalanced-learn documentation", "Getting Started", "<span class=\"section-number\">1. </span>Introduction", "<span class=\"section-number\">7. </span>Metrics", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">6. </span>Miscellaneous samplers", "<span class=\"section-number\">2. </span>Over-sampling", "Combination of over- and under-sampling methods", "Datasets", "Ensemble methods", "FunctionSampler", "SMOTEENN", "SMOTETomek", "fetch_datasets", "make_imbalance", "BalancedBaggingClassifier", "BalancedRandomForestClassifier", "EasyEnsembleClassifier", "RUSBoostClassifier", "BalancedBatchGenerator", "balanced_batch_generator", "classification_report_imbalanced", "geometric_mean_score", "macro_averaged_mean_absolute_error", "make_index_balanced_accuracy", "ValueDifferenceMetric", "sensitivity_score", "sensitivity_specificity_support", "specificity_score", "ADASYN", "BorderlineSMOTE", "KMeansSMOTE", "RandomOverSampler", "SMOTE", "SMOTEN", "SMOTENC", "SVMSMOTE", "Pipeline", "make_pipeline", "balanced_batch_generator", "AllKNN", "ClusterCentroids", "CondensedNearestNeighbour", "EditedNearestNeighbours", "InstanceHardnessThreshold", "NearMiss", "NeighbourhoodCleaningRule", "OneSidedSelection", "RandomUnderSampler", "RepeatedEditedNearestNeighbours", "TomekLinks", "check_neighbors_object", "check_sampling_strategy", "check_target_type", "parametrize_with_checks", "API reference", "Batch generator for Keras", "Metrics", "Miscellaneous", "Over-sampling methods", "Pipeline", "Batch generator for TensorFlow", "Under-sampling methods", "Utilities", "Computation times", "<span class=\"section-number\">3. </span>Under-sampling", "User guide: contents", "Release history", "Version 0.1", "Version 0.10.1", "Version 0.11.1", "Version 0.12.0 (Under development)", "Version 0.2", "Version 0.3", "Version 0.4.2", "Version 0.5.0", "Version 0.6.2", "Version 0.7.0", "Version 0.8.1", "Version 0.9.1", "<span class=\"section-number\">11. </span>References"], "terms": {"The": [0, 2, 5, 7, 8, 10, 13, 19, 20, 24, 26, 28, 31, 33, 39, 40, 44, 45, 46, 48, 49, 50, 51, 52, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 109, 110, 111, 112, 113, 115, 117, 119, 120, 123, 124, 125, 126, 127, 128, 130], "project": [0, 40], "start": [0, 41, 49, 95, 115], "august": 0, "2014": [0, 82, 94, 130], "fernando": [0, 81, 117, 118, 130], "nogueira": [0, 117, 118], "focus": [0, 56], "smote": [0, 8, 12, 13, 23, 24, 26, 28, 30, 34, 36, 44, 61, 62, 65, 79, 80, 81, 82, 84, 85, 86, 87, 105, 114, 116, 117, 118, 119, 122, 124, 125, 126, 130], "implement": [0, 4, 8, 9, 11, 19, 24, 26, 31, 39, 40, 44, 47, 48, 51, 52, 55, 56, 60, 65, 66, 67, 75, 79, 80, 81, 83, 84, 85, 86, 87, 88, 94, 110, 114, 115, 117, 120, 122, 127, 128], "togeth": [0, 56, 87], "guillaum": [0, 2, 5, 6, 7, 8, 9, 10, 13, 16, 19, 20, 23, 24, 28, 31, 32, 33, 36, 40, 41, 42, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128], "lemaitr": [0, 2, 5, 6, 7, 8, 9, 10, 13, 16, 19, 20, 23, 24, 28, 31, 32, 33, 36, 40, 41, 42, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128], "dayvid": [0, 16, 117, 118, 122], "victor": 0, "christo": [0, 8, 16, 28, 36, 117, 118, 122, 123, 124, 125, 126, 127], "arida": [0, 8, 16, 28, 36, 117, 118, 122, 123, 124, 125, 126, 127], "addit": [0, 20, 23, 24, 47, 48, 55, 56, 64, 65, 101, 102, 116, 117, 122, 124, 126], "under": [0, 2, 4, 5, 10, 11, 12, 14, 18, 19, 20, 35, 43, 47, 48, 56, 59, 60, 61, 62, 64, 65, 66, 67, 68, 71, 83, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 105, 114, 116, 118, 122, 123, 124, 125], "sampl": [0, 2, 4, 5, 7, 9, 11, 12, 14, 16, 18, 19, 24, 34, 35, 42, 43, 45, 46, 47, 48, 51, 52, 55, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 105, 110, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 130], "over": [0, 2, 4, 5, 11, 12, 14, 24, 28, 34, 45, 52, 60, 61, 62, 65, 66, 67, 68, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 94, 95, 98, 102, 105, 114, 116, 117, 118, 119, 120, 125, 128, 130], "method": [0, 2, 4, 6, 7, 10, 11, 13, 19, 20, 27, 31, 40, 44, 47, 48, 49, 51, 52, 55, 56, 58, 60, 61, 62, 65, 66, 67, 68, 69, 74, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 114, 115, 117, 122, 123, 124, 128, 130], "have": [0, 5, 8, 10, 13, 19, 20, 23, 24, 44, 45, 47, 48, 52, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 115, 117, 122, 123, 124, 126, 128], "been": [0, 13, 19, 23, 24, 44, 48, 63, 71, 79, 80, 83, 84, 85, 86, 115, 117, 119, 122, 123, 124, 126], "well": [0, 5, 13, 45, 51, 52, 56, 60, 61, 62, 65, 66, 67, 68, 70, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 115, 117, 119, 120, 124], "major": [0, 2, 5, 9, 18, 19, 20, 26, 31, 32, 33, 39, 40, 41, 42, 45, 48, 51, 56, 61, 62, 65, 66, 67, 68, 72, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 115, 116, 117, 118, 120, 122], "chang": [0, 10, 40, 47, 48, 56, 65, 66, 67, 68, 87, 120, 124, 128], "api": [0, 3, 48, 49, 50, 55, 114, 116, 125], "fulli": [0, 55], "compat": [0, 65, 67, 72, 79, 80, 81, 83, 84, 85, 86, 91, 103, 105, 124, 128], "scikit": [0, 5, 7, 26, 31, 35, 40, 45, 47, 48, 49, 51, 52, 54, 63, 65, 66, 86, 87, 91, 113, 115, 117, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129], "refer": [0, 26, 39, 47, 48, 49, 50, 51, 56, 61, 62, 63, 65, 66, 67, 68, 72, 74, 75, 77, 79, 80, 81, 82, 83, 84, 85, 86, 90, 92, 93, 94, 95, 96, 97, 99, 100, 115, 116], "github": [0, 47], "page": [0, 130], "If": [0, 42, 47, 50, 56, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 115], "you": [0, 9, 10, 28, 47, 48, 50, 55, 56, 60, 61, 62, 65, 66, 67, 68, 74, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 115], "us": [0, 1, 3, 4, 6, 8, 9, 10, 13, 16, 21, 22, 23, 24, 28, 33, 34, 35, 36, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55, 56, 70, 75, 77, 89, 102, 104, 105, 114, 116, 117, 120, 122, 123, 124, 125, 126, 127, 128, 130], "scientif": 0, "public": 0, "we": [0, 2, 5, 6, 7, 8, 9, 10, 13, 16, 19, 20, 24, 28, 31, 33, 36, 41, 42, 44, 45, 47, 50, 51, 52, 55, 56, 60, 81, 115, 117, 120], "would": [0, 36, 45, 46, 56, 66, 115], "appreci": 0, "citat": 0, "follow": [0, 5, 13, 19, 24, 28, 31, 40, 41, 46, 47, 48, 50, 51, 55, 56, 60, 61, 62, 63, 66, 71, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 115, 117, 118, 119, 120, 124, 125, 126, 127], "paper": [0, 80, 83, 84, 85, 86, 96, 117, 120, 125], "articl": 0, "jmlr": 0, "v18": 0, "16": [0, 8, 28, 34, 41, 42, 46, 63, 73, 117, 126, 129, 130], "365": 0, "author": [0, 2, 5, 6, 7, 8, 9, 10, 13, 16, 19, 20, 23, 24, 28, 31, 32, 33, 36, 40, 41, 42], "lema": 0, "i": [0, 2, 5, 7, 8, 9, 10, 12, 13, 16, 18, 19, 20, 24, 26, 28, 31, 32, 33, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55, 56, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 115, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130], "tre": 0, "k": [0, 8, 13, 31, 40, 41, 47, 52, 56, 65, 67, 68, 75, 79, 80, 81, 83, 84, 85, 86, 90, 92, 93, 95, 96, 97, 99, 101, 104, 115, 117, 122, 130], "titl": [0, 7, 10, 31, 33, 40, 42, 47], "A": [0, 9, 31, 32, 38, 46, 48, 49, 55, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 115, 116, 117, 120, 122, 130], "python": [0, 2, 5, 6, 7, 8, 9, 10, 13, 16, 19, 20, 23, 24, 26, 28, 31, 32, 33, 36, 40, 41, 42, 47, 52, 117, 119, 124, 125], "toolbox": [0, 26, 105], "tackl": 0, "curs": [0, 72, 97, 130], "dataset": [0, 6, 7, 9, 11, 17, 22, 23, 24, 28, 31, 33, 36, 40, 42, 44, 45, 48, 55, 56, 60, 61, 62, 65, 66, 67, 68, 69, 70, 71, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 105, 106, 111, 112, 114, 115, 116, 117, 120, 123, 124, 126, 130], "machin": [0, 5, 51, 61, 65, 94, 130], "journal": [0, 19, 65, 80, 83, 84, 85, 86, 130], "research": [0, 80, 83, 84, 85, 86, 130], "year": [0, 19], "2017": [0, 117, 122, 130], "volum": [0, 130], "18": [0, 32, 41, 42, 46, 47, 62, 63, 66, 85, 117, 128, 130], "number": [0, 2, 5, 7, 9, 19, 20, 24, 26, 28, 31, 39, 40, 45, 46, 47, 51, 52, 55, 56, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 115, 117, 120, 121, 123, 126], "17": [0, 6, 46, 50, 53, 54, 63], "1": [0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 16, 17, 19, 20, 21, 23, 24, 25, 28, 29, 31, 32, 33, 34, 36, 37, 40, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 114, 115, 121, 122, 125, 130], "5": [0, 2, 5, 10, 11, 16, 19, 20, 24, 31, 32, 36, 37, 40, 41, 42, 43, 46, 47, 50, 52, 53, 54, 56, 63, 65, 66, 68, 71, 73, 75, 78, 79, 80, 81, 83, 84, 85, 86, 94, 96, 114, 115, 124, 126, 130], "url": [0, 130], "http": [0, 10, 50, 81, 130], "org": [0, 81, 130], "html": 0, "some": [1, 5, 6, 7, 8, 9, 12, 13, 24, 26, 31, 32, 40, 41, 42, 45, 49, 50, 52, 55, 56, 60, 65, 66, 67, 68, 87, 101, 108, 115, 117, 122, 123, 124, 126, 127], "detail": [1, 26, 49, 61, 62, 65, 66, 67, 79, 80, 81, 83, 84, 85, 86, 87, 90, 92, 93, 94, 95, 96, 97, 99, 100, 107], "regard": [1, 5, 10, 13, 26, 44, 56, 61, 62, 63, 64, 115, 116, 117, 124, 126], "how": [1, 3, 4, 9, 11, 19, 22, 26, 32, 35, 42, 46, 51, 55, 60, 61, 62, 64, 65, 66, 67, 68, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 114, 115, 117, 125], "sampling_strategi": [1, 3, 5, 6, 16, 20, 26, 42, 45, 46, 48, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 79, 80, 81, 82, 83, 84, 85, 86, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 114, 115, 117, 120, 124, 127], "go": [2, 5, 6, 7, 8, 9, 10, 13, 16, 19, 20, 23, 24, 28, 31, 32, 33, 36, 40, 41, 42, 47, 115], "end": [2, 5, 6, 7, 8, 9, 10, 13, 16, 19, 20, 23, 24, 28, 31, 32, 33, 36, 40, 41, 42, 66, 69, 87], "download": [2, 5, 6, 7, 8, 9, 10, 13, 16, 19, 20, 23, 24, 26, 28, 31, 32, 33, 36, 40, 41, 42, 63], "full": [2, 5, 6, 7, 8, 9, 10, 13, 16, 19, 20, 23, 24, 28, 31, 32, 33, 36, 40, 41, 42, 50, 105, 117, 125], "exampl": [2, 3, 5, 6, 7, 8, 10, 11, 13, 14, 16, 17, 19, 20, 21, 23, 24, 25, 27, 28, 29, 31, 32, 33, 34, 36, 37, 38, 40, 41, 42, 43, 47, 49, 50, 52, 54, 55, 70, 73, 75, 76, 77, 78, 104, 105, 114, 115, 116, 117, 123, 125, 128], "code": [2, 5, 6, 7, 8, 9, 10, 13, 16, 19, 20, 23, 24, 26, 28, 31, 32, 33, 36, 40, 41, 42, 50, 115], "thi": [2, 5, 7, 8, 9, 10, 13, 19, 20, 28, 31, 32, 33, 40, 41, 42, 44, 45, 46, 47, 48, 50, 52, 55, 56, 60, 61, 62, 63, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 115, 117, 120, 124, 125, 126, 128, 129], "show": [2, 5, 7, 8, 9, 10, 13, 16, 19, 20, 23, 28, 31, 32, 33, 40, 41, 42, 44, 45, 48, 56, 63, 64, 115, 117, 125], "differ": [2, 5, 6, 8, 10, 13, 19, 28, 31, 36, 40, 41, 42, 45, 47, 48, 51, 56, 61, 62, 65, 66, 67, 68, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 91, 93, 94, 95, 98, 99, 102, 115, 116, 117, 124, 125, 126, 127, 130], "usag": [2, 5, 6, 7, 8, 9, 10, 13, 16, 19, 20, 23, 24, 28, 31, 32, 33, 35, 37, 40, 41, 42, 83, 87, 88, 93, 114, 117, 125, 126], "paramet": [2, 5, 16, 28, 31, 33, 40, 44, 46, 47, 48, 49, 52, 55, 56, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 115, 117, 119, 120, 122, 123, 124, 125, 126, 127, 128], "famili": 2, "sampler": [2, 4, 5, 8, 9, 11, 12, 14, 18, 21, 24, 26, 28, 30, 33, 34, 35, 37, 39, 42, 43, 44, 45, 47, 56, 60, 61, 62, 65, 66, 68, 69, 70, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 105, 114, 115, 116, 117, 119, 122, 123, 124, 125, 126, 128], "e": [2, 5, 8, 12, 13, 26, 41, 47, 52, 55, 56, 65, 66, 67, 68, 69, 70, 72, 82, 86, 87, 93, 98, 99, 115, 117, 124, 125], "clean": [2, 7, 12, 13, 26, 39, 40, 42, 44, 61, 62, 93, 96, 102, 116, 117, 118, 124], "g": [2, 5, 6, 7, 8, 9, 10, 13, 16, 19, 20, 23, 24, 28, 31, 32, 33, 36, 40, 41, 42, 47, 55, 56, 61, 62, 65, 66, 67, 68, 72, 82, 87], "lemaitre58": [2, 5, 6, 7, 8, 9, 10, 13, 16, 19, 20, 23, 24, 28, 31, 32, 33, 36, 40, 41, 42], "gmail": [2, 5, 6, 7, 8, 9, 10, 13, 16, 19, 20, 23, 24, 28, 31, 32, 33, 36, 40, 41, 42], "com": [2, 5, 6, 7, 8, 9, 10, 13, 16, 19, 20, 23, 24, 28, 31, 32, 33, 36, 40, 41, 42, 50], "licens": [2, 5, 6, 7, 8, 9, 10, 13, 16, 19, 20, 23, 24, 28, 31, 32, 33, 36, 40, 41, 42, 49], "mit": [2, 5, 6, 7, 8, 9, 10, 13, 16, 19, 20, 23, 24, 28, 31, 32, 33, 36, 40, 41, 42, 49], "print": [2, 5, 6, 7, 8, 9, 10, 13, 16, 19, 20, 23, 24, 28, 31, 32, 33, 36, 40, 41, 42, 44, 45, 46, 55, 56, 60, 61, 62, 64, 65, 66, 67, 71, 74, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 115, 117, 125], "__doc__": [2, 5, 6, 7, 8, 9, 10, 13, 16, 19, 20, 23, 24, 28, 31, 32, 33, 36, 40, 41, 42, 117, 119], "import": [2, 5, 6, 7, 8, 9, 10, 13, 16, 19, 20, 23, 24, 28, 31, 32, 33, 36, 40, 41, 42, 44, 45, 46, 47, 48, 49, 55, 56, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 115, 116, 117, 125, 126, 127], "seaborn": [2, 8, 10, 13, 16, 20, 28, 31, 32, 33, 40, 41, 42, 50, 54, 117, 123], "sn": [2, 8, 10, 13, 16, 20, 28, 31, 32, 33, 40, 41, 42], "set_context": [2, 8, 13, 16, 20, 28, 31, 32, 33, 40, 41, 42], "poster": [2, 8, 13, 16, 20, 28, 31, 32, 33, 40, 41, 42], "first": [2, 5, 7, 10, 16, 19, 20, 24, 28, 31, 33, 36, 40, 41, 45, 55, 56, 60, 66, 68, 87, 90, 96, 100, 115, 117, 118], "data": [2, 5, 6, 8, 13, 19, 20, 23, 24, 26, 30, 32, 36, 40, 41, 42, 46, 48, 55, 56, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 116, 117, 120, 124, 125, 128, 130], "set": [2, 7, 10, 16, 18, 19, 20, 24, 26, 33, 36, 45, 46, 48, 52, 56, 60, 61, 62, 64, 65, 66, 67, 68, 71, 72, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 104, 109, 115, 116, 117, 119, 120, 124, 125, 130], "from": [2, 3, 6, 7, 8, 9, 10, 11, 13, 14, 16, 17, 19, 20, 21, 23, 24, 25, 28, 29, 31, 33, 34, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 51, 52, 55, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 114, 115, 116, 117, 119, 120, 122, 123, 124, 125, 126, 127, 128, 130], "iri": [2, 6, 46, 69], "sklearn": [2, 5, 6, 7, 8, 9, 10, 13, 16, 19, 20, 23, 24, 28, 31, 33, 36, 40, 41, 44, 45, 46, 47, 48, 49, 52, 55, 56, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 73, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 115, 117, 122, 125, 126, 127], "load_iri": [2, 6, 46, 64, 69, 70], "imblearn": [2, 5, 6, 7, 8, 9, 10, 13, 15, 16, 19, 20, 23, 24, 26, 28, 31, 33, 36, 40, 42, 44, 45, 46, 47, 48, 49, 50, 52, 55, 56, 57, 58, 59, 70, 73, 75, 76, 77, 78, 89, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 117, 124, 125, 126, 127, 128], "make_imbal": [2, 5, 6, 16, 45, 46, 69, 70, 105, 117, 123, 126], "as_fram": [2, 5, 45, 46, 56, 115], "true": [2, 5, 8, 10, 16, 19, 20, 24, 40, 45, 46, 47, 48, 52, 55, 56, 60, 61, 62, 63, 65, 66, 67, 68, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 103, 115, 117, 120], "0": [2, 5, 6, 7, 8, 9, 10, 11, 13, 16, 19, 20, 23, 24, 28, 31, 32, 33, 34, 36, 38, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 114, 115], "10": [2, 5, 8, 9, 10, 11, 13, 14, 16, 17, 19, 20, 21, 23, 24, 25, 28, 29, 31, 32, 33, 34, 36, 37, 40, 41, 42, 43, 46, 52, 55, 56, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 114, 130], "20": [2, 9, 23, 24, 28, 31, 46, 47, 52, 56, 60, 61, 62, 63, 64, 65, 67, 79, 80, 82, 83, 84, 85, 86, 87, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 117, 124, 130], "2": [2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 16, 19, 20, 21, 23, 24, 25, 26, 28, 29, 31, 32, 33, 36, 39, 40, 42, 44, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 78, 79, 80, 81, 82, 83, 85, 86, 87, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 114, 115, 118, 119, 120, 125, 129, 130], "47": [2, 46], "x": [2, 6, 7, 8, 10, 13, 16, 19, 20, 23, 24, 28, 31, 33, 36, 40, 44, 45, 47, 48, 52, 55, 56, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 115, 117, 124, 125, 126], "y": [2, 5, 6, 7, 8, 10, 13, 16, 19, 20, 23, 24, 28, 31, 32, 33, 36, 40, 44, 45, 46, 48, 52, 55, 56, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 115, 117, 124, 125, 126, 127], "target": [2, 6, 8, 9, 10, 20, 40, 46, 47, 51, 52, 55, 56, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 115, 117, 122, 124, 126, 128], "matplotlib": [2, 7, 8, 10, 13, 16, 20, 28, 31, 32, 33, 40, 41, 42, 50, 54], "pyplot": [2, 7, 8, 10, 13, 16, 20, 28, 31, 32, 33, 40, 41, 42], "plt": [2, 7, 8, 10, 13, 16, 20, 28, 31, 32, 33, 40, 41, 42], "fig": [2, 8, 13, 16, 20, 28, 31, 33, 40, 41, 42], "ax": [2, 8, 10, 13, 16, 20, 28, 31, 32, 33, 40, 41, 42], "subplot": [2, 8, 13, 16, 20, 28, 31, 32, 33, 40, 41, 42], "ncol": [2, 16, 20, 31, 40, 42], "figsiz": [2, 8, 13, 16, 20, 28, 31, 32, 33, 40, 41, 42], "autopct": 2, "2f": [2, 20, 28, 41], "value_count": [2, 5, 8, 19], "plot": [2, 7, 8, 13, 16, 26, 27, 29, 31, 32, 40, 41, 42, 83, 87, 88, 114], "pie": 2, "set_titl": [2, 8, 13, 16, 20, 31, 40, 41, 42], "origin": [2, 5, 13, 16, 31, 40, 46, 47, 56, 61, 62, 65, 66, 67, 68, 69, 70, 79, 80, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 103, 115, 117, 120, 124, 125], "tight_layout": [2, 8, 13, 16, 20, 28, 31, 32, 33, 40, 41, 42], "can": [2, 5, 7, 8, 9, 10, 13, 19, 20, 22, 24, 26, 28, 30, 31, 33, 36, 39, 40, 41, 42, 44, 45, 46, 47, 48, 50, 51, 52, 55, 56, 60, 65, 66, 67, 68, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 101, 102, 115, 117, 123, 124, 126], "given": [2, 13, 26, 30, 31, 40, 45, 46, 52, 56, 61, 62, 65, 66, 67, 68, 69, 70, 72, 75, 82, 87, 88, 115, 117, 126, 127], "For": [2, 19, 45, 47, 51, 55, 56, 66, 68, 72, 77, 79, 80, 81, 83, 84, 85, 86, 87, 97, 102, 117, 119], "correspond": [2, 24, 41, 42, 45, 46, 47, 51, 56, 60, 61, 62, 64, 65, 66, 67, 68, 79, 80, 81, 82, 83, 84, 85, 86, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102], "ratio": [2, 5, 8, 9, 16, 19, 20, 26, 30, 33, 40, 45, 46, 51, 61, 62, 63, 64, 65, 66, 67, 68, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 91, 94, 95, 98, 102, 117, 121, 123, 124, 125, 126], "alpha_": [2, 61, 62, 65, 66, 67, 68, 79, 80, 81, 82, 83, 84, 85, 86, 91, 94, 95, 98, 102], "u": [2, 45, 65, 66, 67, 68, 91, 94, 95, 98, 102, 115], "defin": [2, 5, 7, 41, 46, 52, 55, 56, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 75, 79, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 115], "n_": [2, 61, 62, 65, 66, 67, 68, 79, 80, 81, 82, 83, 84, 85, 86, 91, 94, 95, 98, 102], "rm": [2, 61, 62, 65, 66, 67, 68, 79, 80, 81, 82, 83, 84, 85, 86, 91, 94, 95, 98, 102], "time": [2, 5, 6, 7, 8, 9, 13, 16, 19, 20, 23, 24, 28, 31, 32, 33, 36, 40, 41, 42, 45, 56, 65, 87, 88, 90, 99, 102, 115], "m": [2, 40, 46, 61, 62, 63, 65, 66, 67, 68, 72, 79, 80, 81, 82, 83, 84, 85, 86, 91, 94, 95, 97, 98, 102, 115, 117, 122, 130], "where": [2, 8, 36, 46, 52, 56, 61, 62, 65, 66, 67, 68, 72, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 91, 94, 95, 96, 98, 102, 115, 117, 119, 120, 121, 124, 125, 128], "ar": [2, 5, 7, 8, 9, 12, 13, 18, 19, 20, 24, 26, 30, 31, 33, 40, 41, 42, 44, 45, 46, 47, 48, 52, 55, 56, 60, 61, 62, 63, 65, 66, 67, 68, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 115, 117, 120, 124, 125, 126, 127], "class": [2, 5, 6, 7, 8, 13, 16, 19, 20, 28, 31, 32, 33, 36, 40, 41, 42, 44, 45, 46, 47, 48, 49, 51, 52, 55, 60, 61, 62, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 115, 116, 117, 119, 120, 121, 122, 123, 124, 126, 128, 130], "after": [2, 13, 31, 40, 44, 61, 62, 64, 65, 66, 67, 68, 79, 80, 81, 82, 83, 84, 85, 86, 87, 91, 94, 95, 96, 98, 102, 115, 117, 126], "minor": [2, 5, 8, 9, 19, 20, 26, 30, 32, 33, 40, 41, 42, 46, 47, 56, 61, 62, 63, 65, 66, 67, 68, 79, 80, 81, 82, 83, 84, 85, 86, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 115, 117, 118, 119, 120, 121, 122, 126, 130], "respect": [2, 19, 56, 68, 96, 102, 115], "select": [2, 16, 19, 31, 32, 39, 43, 45, 46, 48, 49, 56, 60, 69, 72, 81, 82, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 105, 114, 116, 117, 118, 122, 124, 128, 130], "onli": [2, 5, 8, 24, 31, 33, 41, 42, 45, 52, 55, 56, 60, 61, 62, 65, 66, 67, 68, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 115, 117, 119, 120, 122, 124, 125, 127, 128], "sinc": [2, 41, 42, 65, 66, 67, 68, 74, 79, 80, 82, 83, 84, 85, 86, 96, 115, 117, 120, 127], "make": [2, 5, 8, 10, 19, 20, 28, 31, 32, 40, 41, 42, 45, 50, 56, 81, 87, 96, 115, 116, 117, 119, 123, 124, 125, 128, 129], "sens": 2, "case": [2, 6, 28, 31, 33, 41, 45, 56, 60, 61, 62, 65, 66, 67, 68, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 115, 117, 120, 122, 124, 130], "binary_mask": 2, "isin": [2, 8], "binary_i": 2, "binary_x": 2, "under_sampl": [2, 5, 6, 9, 19, 36, 40, 42, 45, 55, 60, 69, 70, 112, 115, 117, 122, 123, 124, 126, 127, 128], "randomundersampl": [2, 5, 9, 19, 40, 45, 48, 55, 60, 65, 66, 68, 69, 70, 89, 94, 95, 100, 105, 115, 117, 120, 124, 126], "8": [2, 6, 13, 28, 31, 32, 40, 41, 42, 44, 46, 47, 48, 52, 55, 56, 63, 65, 71, 73, 75, 82, 84, 115, 120], "ru": [2, 98, 115], "x_re": [2, 13, 31, 33, 40, 42, 55, 56, 60, 61, 62, 64, 79, 80, 81, 82, 83, 84, 85, 86, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "y_re": [2, 5, 13, 31, 33, 40, 42, 55, 56, 60, 61, 62, 64, 79, 80, 81, 82, 83, 84, 85, 86, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "fit_resampl": [2, 7, 13, 31, 33, 40, 42, 44, 45, 51, 55, 56, 60, 61, 62, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 115, 117, 124], "_": [2, 7, 13, 20, 33, 41, 42], "o": [2, 10, 23, 61, 62, 79, 80, 81, 82, 83, 84, 85, 86, 102, 130], "over_sampl": [2, 8, 13, 19, 23, 24, 28, 31, 33, 36, 56, 87, 109, 117, 122, 124, 125, 126, 127, 128], "randomoversampl": [2, 8, 19, 31, 33, 56, 105, 117, 120, 124, 126, 128], "ro": [2, 56, 82], "string": [2, 52, 56, 60, 61, 62, 65, 66, 67, 68, 71, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 117, 119, 123, 124, 128], "which": [2, 4, 5, 6, 7, 10, 13, 20, 23, 24, 26, 28, 31, 32, 36, 40, 41, 45, 46, 47, 48, 52, 55, 56, 57, 60, 61, 62, 65, 66, 67, 68, 69, 70, 74, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 115, 117, 122, 124, 125, 127], "specifi": [2, 16, 36, 40, 61, 62, 63, 65, 66, 67, 68, 72, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 104, 115, 117, 120, 124], "With": [2, 5, 40, 41, 51], "equal": [2, 9, 52, 61, 62, 65, 66, 67, 68, 73, 75, 79, 80, 81, 82, 83, 84, 85, 86, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102], "note": [2, 9, 45, 46, 47, 52, 56, 60, 61, 62, 63, 64, 65, 66, 67, 68, 72, 74, 75, 79, 80, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 115], "multipl": [2, 6, 56, 115, 117, 123], "now": [2, 5, 16, 24, 28, 33, 36, 45, 52, 79, 80, 83, 84, 85, 86, 87, 117, 120, 121, 126], "each": [2, 8, 10, 20, 31, 36, 40, 41, 42, 45, 47, 48, 51, 52, 56, 60, 61, 62, 63, 64, 65, 66, 67, 68, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 104, 115, 117, 120, 124], "even": [2, 66, 115, 117, 125, 128], "tomeklink": [2, 40, 42, 62, 105, 115], "tl": [2, 100], "when": [2, 7, 13, 24, 31, 33, 36, 45, 47, 48, 49, 52, 56, 60, 61, 62, 64, 65, 66, 67, 68, 69, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 115, 117, 120, 122, 123, 124, 125, 126, 127, 128, 130], "kei": [2, 19, 45, 46, 49, 60, 61, 62, 64, 65, 66, 67, 68, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 117, 127], "valu": [2, 10, 28, 33, 45, 46, 56, 60, 61, 62, 64, 65, 66, 67, 68, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 116, 117, 121, 126, 127, 128], "desir": [2, 19, 48, 61, 62, 64, 65, 66, 67, 68, 79, 80, 81, 82, 83, 84, 85, 86, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 117, 122], "work": [2, 5, 36, 46, 52, 56, 60, 61, 62, 65, 66, 67, 68, 72, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 117, 119, 121, 127, 129], "both": [2, 5, 42, 45, 46, 47, 56, 79, 80, 81, 83, 84, 85, 86, 102, 115, 117, 124], "instead": [2, 5, 19, 20, 31, 46, 47, 56, 63, 65, 66, 67, 68, 72, 79, 80, 83, 84, 85, 86, 87, 88, 102, 115, 117, 119, 120, 121, 122, 123, 124, 128], "15": [2, 10, 13, 16, 31, 32, 40, 41, 42, 46, 47, 50, 53, 54, 63], "25": [2, 6, 7, 10, 13, 16, 19, 21, 31, 36, 40, 46, 63, 73, 74, 114, 130], "35": [2, 46], "contain": [2, 8, 31, 47, 49, 52, 56, 60, 61, 62, 63, 64, 65, 66, 67, 68, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 112, 115, 117, 124, 128], "It": [2, 7, 9, 16, 31, 40, 46, 47, 56, 65, 66, 68, 79, 80, 82, 83, 84, 85, 86, 90, 93, 102, 115, 117, 119, 123, 126, 128], "rais": [2, 61, 62, 63, 65, 66, 67, 68, 71, 79, 80, 81, 82, 83, 84, 85, 86, 87, 91, 94, 95, 98, 101, 102, 117, 120, 122, 123, 124, 127], "error": [2, 61, 62, 65, 66, 67, 68, 79, 80, 81, 82, 83, 84, 85, 86, 87, 91, 94, 95, 98, 101, 102, 116, 117, 120, 123, 124, 127], "otherwis": [2, 65, 66, 67, 68, 72, 75, 76, 77, 78, 87, 91], "function": [2, 7, 9, 13, 16, 19, 31, 36, 40, 41, 42, 46, 47, 48, 51, 52, 55, 56, 60, 61, 62, 64, 65, 66, 67, 68, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 107, 115, 117, 122, 123, 125, 126, 127, 128, 130], "take": [2, 5, 8, 32, 48, 56, 60, 61, 62, 64, 65, 66, 67, 68, 72, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 115, 117, 120, 123, 126], "return": [2, 7, 10, 13, 16, 19, 31, 40, 46, 47, 55, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 117, 122, 123, 124, 128], "def": [2, 7, 10, 13, 16, 19, 31, 40, 41, 42, 46, 47, 55, 60, 104], "ratio_multipli": [2, 46], "collect": [2, 6, 9, 10, 13, 16, 19, 31, 33, 44, 45, 46, 56, 60, 61, 62, 63, 64, 65, 66, 67, 68, 79, 80, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 115], "counter": [2, 6, 9, 10, 13, 16, 19, 20, 31, 33, 44, 45, 46, 56, 60, 61, 62, 64, 65, 67, 79, 80, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 115], "multipli": [2, 16, 46, 66, 117, 121], "7": [2, 11, 13, 28, 31, 32, 33, 36, 41, 42, 46, 50, 52, 53, 54, 56, 63, 65, 75, 114, 124, 126], "95": [2, 6, 8, 9, 46, 94, 130], "target_stat": [2, 16, 46], "item": [2, 31, 42, 44, 45, 46, 56, 60, 115], "int": [2, 16, 46, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "total": [2, 3, 5, 6, 7, 8, 9, 11, 13, 14, 16, 17, 19, 20, 21, 23, 24, 25, 28, 29, 31, 32, 33, 34, 36, 37, 38, 40, 41, 42, 43, 52, 66, 68, 71, 72, 76, 77, 78, 114, 117, 121], "run": [2, 5, 6, 7, 8, 9, 13, 16, 19, 20, 23, 24, 28, 31, 32, 33, 36, 40, 41, 42, 47, 50, 99, 104, 115], "script": [2, 5, 6, 7, 8, 9, 13, 16, 19, 20, 23, 24, 28, 31, 32, 33, 36, 40, 41, 42, 117, 123], "minut": [2, 5, 6, 7, 8, 9, 13, 16, 19, 20, 23, 24, 28, 31, 32, 33, 36, 40, 41, 42], "645": [2, 3, 114], "second": [2, 5, 6, 7, 8, 9, 13, 16, 19, 20, 23, 24, 28, 31, 32, 33, 36, 40, 41, 42, 55, 68, 90, 96], "estim": [2, 4, 5, 6, 8, 9, 10, 11, 13, 16, 19, 20, 23, 24, 26, 28, 31, 32, 33, 35, 36, 40, 41, 42, 45, 48, 51, 55, 60, 61, 62, 65, 66, 67, 68, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 110, 114, 115, 117, 119, 122, 124, 125], "memori": [2, 5, 6, 7, 8, 9, 10, 13, 16, 19, 20, 23, 24, 28, 31, 32, 33, 36, 40, 41, 42, 51, 65, 66, 67, 75, 87, 88, 117, 124, 127, 130], "36": [2, 3, 8, 9, 11, 46, 56, 63, 65, 72, 114, 130], "mb": [2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 16, 17, 19, 20, 21, 23, 24, 25, 28, 29, 31, 32, 33, 34, 36, 37, 38, 40, 41, 42, 43, 114], "jupyt": [2, 5, 6, 7, 8, 9, 10, 13, 16, 19, 20, 23, 24, 26, 28, 31, 32, 33, 36, 40, 41, 42], "notebook": [2, 5, 6, 7, 8, 9, 10, 13, 16, 19, 20, 23, 24, 26, 28, 31, 32, 33, 36, 40, 41, 42], "plot_sampling_strategy_usag": [2, 3, 114], "ipynb": [2, 5, 6, 7, 8, 9, 10, 13, 16, 19, 20, 23, 24, 28, 31, 32, 33, 36, 40, 41, 42], "sourc": [2, 5, 6, 7, 8, 9, 10, 13, 16, 19, 20, 23, 24, 26, 28, 31, 32, 33, 36, 40, 41, 42, 47, 49, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104], "py": [2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 16, 17, 19, 20, 21, 23, 24, 25, 28, 29, 31, 32, 33, 34, 36, 37, 40, 41, 42, 43, 47, 50, 104, 114, 117, 125, 128], "galleri": [2, 5, 6, 7, 8, 9, 10, 13, 16, 19, 20, 23, 24, 26, 28, 31, 32, 33, 36, 40, 41, 42, 49, 50, 54, 114], "gener": [2, 5, 6, 8, 9, 10, 12, 20, 23, 24, 26, 28, 30, 31, 33, 34, 36, 41, 42, 44, 45, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 114, 116, 117, 120, 122, 124, 126, 128], "sphinx": [2, 5, 6, 7, 8, 9, 10, 13, 16, 19, 20, 23, 24, 26, 28, 31, 32, 33, 36, 40, 41, 42, 50, 54, 117, 128], "00": [3, 6, 7, 9, 11, 14, 17, 21, 25, 29, 34, 36, 37, 38, 43, 71, 87, 114], "02": [3, 13, 14, 25, 31, 40, 43, 114], "execut": [3, 11, 14, 17, 21, 25, 29, 34, 36, 37, 38, 43, 114], "file": [3, 11, 14, 17, 21, 25, 29, 34, 37, 38, 43, 47, 50, 114, 117, 128], "auto_exampl": [3, 11, 14, 17, 21, 25, 29, 34, 37, 38, 43], "mem": [3, 11, 14, 17, 21, 25, 29, 34, 37, 38, 43, 114], "imbalanc": [3, 4, 8, 9, 10, 11, 13, 15, 17, 22, 23, 25, 28, 31, 33, 36, 40, 44, 45, 47, 48, 50, 55, 58, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 79, 80, 81, 82, 83, 86, 87, 88, 89, 95, 97, 98, 100, 105, 106, 111, 114, 115, 116, 117, 118, 123, 124, 127, 128, 129, 130], "learn": [3, 7, 10, 13, 20, 22, 23, 25, 31, 35, 40, 44, 45, 46, 47, 48, 52, 55, 61, 63, 64, 65, 66, 67, 68, 72, 74, 79, 80, 81, 82, 83, 86, 87, 88, 91, 94, 95, 98, 100, 105, 108, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130], "word": [4, 26, 115], "multiclass": [4, 11, 26, 64, 66, 71, 72, 76, 77, 78, 87, 88, 95, 103, 114, 117, 120, 123], "classif": [4, 5, 8, 11, 19, 22, 25, 26, 31, 33, 49, 56, 61, 62, 64, 65, 66, 67, 68, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 94, 95, 98, 102, 105, 114, 116, 117, 124, 128, 130], "topic": [4, 11, 26, 71, 87, 88, 98, 114], "text": [4, 11, 26, 71, 87, 88, 98, 114, 115], "document": [4, 11, 26, 45, 47, 50, 71, 87, 88, 98, 105, 114, 115, 126], "custom": [4, 11, 26, 60, 87, 88, 114, 116, 117, 120], "an": [4, 6, 8, 10, 11, 13, 15, 17, 18, 26, 28, 31, 36, 40, 46, 47, 49, 50, 52, 55, 56, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 114, 115, 117, 119, 120, 123, 124, 125, 126, 128, 130], "outlier": [4, 11, 26, 44, 55, 56, 60, 87, 88, 114, 115], "reject": [4, 11, 26, 55, 60, 87, 88, 114, 115, 117, 119], "benchmark": [4, 11, 26, 50, 54, 60, 63, 79, 82, 83, 87, 88, 114, 116, 117, 123], "face": [4, 11, 26, 60, 79, 82, 83, 87, 88, 114], "recognit": [4, 11, 26, 60, 72, 79, 82, 83, 87, 88, 114, 130], "task": [4, 11, 26, 60, 79, 82, 83, 87, 88, 114], "porto": [4, 11, 26, 55, 69, 114], "seguro": [4, 11, 26, 55, 69, 114], "balanc": [4, 6, 11, 16, 18, 20, 23, 24, 26, 27, 30, 40, 45, 46, 51, 52, 55, 61, 62, 65, 66, 67, 68, 69, 70, 71, 72, 74, 81, 89, 96, 112, 114, 115, 116, 117, 122, 124, 130], "mini": [4, 11, 26, 55, 69, 89, 114, 117, 124], "batch": [4, 11, 26, 55, 69, 70, 89, 105, 114, 117, 124, 125], "kera": [4, 11, 26, 70, 105, 114, 116, 117, 124, 125, 127], "fit": [4, 6, 7, 8, 9, 10, 11, 13, 20, 23, 24, 26, 31, 36, 40, 41, 48, 51, 52, 55, 56, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 114, 115, 117, 120, 126, 128], "model": [4, 7, 8, 9, 10, 11, 19, 20, 24, 28, 31, 36, 40, 45, 55, 64, 65, 66, 69, 70, 87, 88, 89, 98, 114, 124, 130], "fight": [4, 11, 26, 56, 64, 65, 66, 87, 88, 98, 114], "bia": [4, 11, 26, 45, 64, 65, 66, 87, 88, 98, 114, 117, 125], "illustr": [5, 6, 7, 13, 16, 19, 22, 26, 32, 39, 40, 41, 43, 45, 51, 52, 55, 56, 100, 114, 115], "induc": [5, 20, 66], "subsequ": [5, 51, 52, 66, 68, 75], "compar": [5, 10, 12, 14, 18, 21, 26, 30, 34, 39, 43, 44, 48, 52, 56, 60, 61, 62, 63, 65, 66, 67, 68, 72, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 114, 115], "approach": [5, 31, 56, 68, 79, 95, 117, 118, 130], "allevi": [5, 20, 45, 68, 72, 130], "neg": [5, 19, 40, 52, 66, 72, 73, 76, 77, 78, 115, 117, 123], "effect": [5, 10, 13, 26, 30, 34, 45, 51, 65, 66, 67, 68, 74, 82, 87, 96, 114, 115, 117, 120, 130], "drop": [5, 10], "featur": [5, 10, 16, 31, 33, 45, 52, 56, 60, 61, 62, 65, 66, 67, 68, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 115, 120, 127], "fnlwgt": 5, "wa": [5, 10, 47, 65, 66, 75, 79, 80, 83, 84, 85, 86, 87, 103, 117, 119, 120, 121, 122, 124, 125, 126, 127, 128], "creat": [5, 6, 8, 13, 15, 17, 18, 19, 24, 26, 31, 32, 33, 36, 40, 46, 47, 52, 55, 56, 60, 64, 65, 66, 67, 69, 70, 80, 83, 84, 85, 86, 88, 89, 91, 93, 95, 96, 101, 114, 117, 122, 123, 124], "while": [5, 10, 12, 19, 26, 31, 45, 52, 56, 66, 72, 76, 77, 78, 87, 88, 115], "studi": [5, 45, 61, 62, 95, 130], "adult": [5, 45, 56, 115], "thu": [5, 65, 66, 67, 90, 93, 96, 99, 117, 124], "acquir": 5, "survei": 5, "educ": 5, "num": 5, "encod": [5, 10, 52, 75, 84, 85, 103, 117, 120, 124, 127], "same": [5, 8, 20, 24, 31, 32, 41, 47, 48, 51, 56, 60, 61, 62, 66, 68, 71, 79, 80, 81, 82, 83, 84, 85, 86, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 115, 117, 122, 124, 125, 127], "inform": [5, 45, 47, 49, 56, 60, 61, 62, 63, 64, 65, 66, 67, 68, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 117, 120, 125, 130], "than": [5, 8, 9, 13, 20, 24, 33, 40, 44, 45, 52, 56, 65, 66, 67, 68, 90, 93, 96, 99, 115, 117, 120, 127], "remov": [5, 10, 20, 40, 42, 47, 61, 68, 79, 80, 83, 84, 85, 86, 87, 90, 93, 96, 99, 100, 115, 117, 119, 120, 121, 123, 124, 125, 126, 127, 128], "one": [5, 10, 19, 31, 40, 45, 46, 47, 48, 56, 63, 66, 72, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 90, 92, 93, 96, 97, 99, 100, 103, 115, 117, 120, 122, 124, 130], "fetch_openml": [5, 45, 46, 56, 92, 115], "df": [5, 46], "version": [5, 6, 31, 40, 46, 47, 49, 50, 54, 56, 60, 61, 62, 63, 65, 66, 67, 68, 69, 71, 73, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 115], "return_x_i": [5, 45, 46, 56, 70, 92, 115], "column": [5, 10, 16, 31, 52, 56, 65, 66, 67, 77, 85, 117, 126], "about": [5, 45, 49], "3": [5, 7, 8, 9, 13, 16, 19, 20, 24, 28, 31, 32, 33, 34, 36, 40, 42, 43, 44, 46, 48, 50, 53, 54, 55, 56, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 79, 80, 82, 83, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 115, 118, 120, 122, 124, 130], "classes_count": 5, "50k": [5, 45], "37155": 5, "11687": 5, "name": [5, 10, 16, 19, 46, 48, 56, 60, 61, 62, 63, 65, 66, 67, 68, 71, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104], "count": [5, 31, 72, 75, 76, 77, 78, 84], "dtype": [5, 7, 8, 19, 31, 52, 55, 56, 66, 75, 84, 85, 115, 117, 124], "int64": [5, 55, 85], "slightli": [5, 9, 40, 56], "To": [5, 9, 45, 47, 49, 51, 55, 72, 115], "better": [5, 8, 9, 81, 115, 117, 126], "highlight": [5, 41, 42, 45, 115], "increas": [5, 20, 33, 40, 45, 66, 115], "its": [5, 20, 41, 47, 56, 66, 77, 87, 93, 99, 102, 104, 115, 117, 124], "30": [5, 31, 46, 56, 64, 69, 70, 75, 84], "df_re": 5, "idxmin": [5, 8], "max": [5, 13, 19, 31, 40], "1238": 5, "perform": [5, 8, 10, 19, 20, 26, 30, 40, 45, 46, 47, 48, 56, 65, 66, 67, 71, 72, 76, 77, 78, 82, 83, 87, 88, 95, 97, 98, 107, 109, 115, 117, 128], "cross": [5, 8, 10, 28, 45, 61, 62, 65, 66, 67, 79, 80, 81, 83, 84, 85, 86, 87, 90, 92, 93, 94, 95, 96, 97, 99, 100, 115], "valid": [5, 8, 10, 20, 26, 27, 29, 45, 55, 60, 61, 62, 65, 66, 67, 79, 80, 81, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 102, 105, 114, 115, 116, 117, 119, 122, 123, 126, 128], "evalu": [5, 8, 19, 20, 24, 25, 28, 45, 52, 65, 71, 83, 87, 88, 114, 115, 117, 124, 130], "get": [5, 8, 19, 23, 24, 45, 49, 52, 60, 61, 62, 63, 65, 66, 67, 68, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 115, 117, 120, 123, 125], "test": [5, 6, 7, 8, 9, 10, 20, 23, 24, 45, 54, 65, 66, 67, 68, 104, 105, 117, 124, 127, 128], "score": [5, 7, 19, 28, 36, 45, 65, 66, 67, 68, 72, 74, 76, 77, 78, 87, 107, 117, 122, 126], "As": [5, 9, 45, 47, 51, 56, 115, 117, 124], "could": [5, 9, 79, 80, 81, 83, 84, 85, 86, 115, 117, 125, 128], "alwai": [5, 47, 96, 115], "predict": [5, 6, 7, 9, 10, 13, 20, 23, 24, 31, 36, 40, 45, 48, 51, 65, 66, 67, 68, 87, 115], "independ": [5, 31, 56, 67, 82, 91, 98, 115], "provid": [5, 6, 8, 13, 23, 24, 36, 46, 47, 48, 49, 50, 51, 55, 56, 57, 58, 65, 66, 67, 68, 75, 87, 106, 108, 109, 111, 112, 115, 117, 121, 122, 124, 129], "dummyclassifi": 5, "model_select": [5, 6, 8, 10, 19, 20, 23, 24, 28, 29, 36, 45, 48, 65, 67, 87, 114, 117, 122], "cross_valid": [5, 19, 45, 117, 122], "dummy_clf": 5, "most_frequ": [5, 10], "accuraci": [5, 7, 10, 20, 24, 36, 45, 52, 55, 65, 66, 67, 68, 69, 70, 71, 72, 74, 87], "balanced_accuraci": [5, 19, 45, 55], "cv_result": [5, 19, 45], "f": [5, 6, 8, 9, 10, 13, 16, 19, 20, 24, 31, 32, 40, 41, 45, 46, 52, 55, 60, 63, 64, 72, 75, 76, 77, 78, 84, 85, 87, 130], "test_accuraci": 5, "mean": [5, 8, 19, 20, 24, 28, 45, 55, 61, 62, 65, 66, 67, 68, 71, 72, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 90, 92, 93, 94, 95, 96, 97, 99, 100, 115, 116, 130], "3f": [5, 10, 19, 24, 45, 55], "968": 5, "account": [5, 24, 32, 72, 76, 77, 78, 117, 120, 126], "issu": [5, 20, 31, 40, 44, 45, 47, 49, 51, 56, 117, 122, 125, 126, 127], "test_balanced_accuraci": 5, "500": [5, 7, 40, 92, 117, 125], "dictionari": [5, 46, 47, 52, 55, 60, 61, 62, 64, 66, 71, 79, 80, 81, 82, 83, 84, 85, 86, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 117, 123, 124, 128], "list": [5, 31, 40, 41, 50, 51, 65, 66, 67, 68, 71, 75, 87, 88, 90, 92, 93, 96, 97, 99, 100, 102, 104, 117, 122, 124, 126], "continu": [5, 31, 50, 56, 79, 80, 81, 82, 83, 84, 85, 86, 117, 120, 124], "store": [5, 45, 63, 65, 66, 67], "result": [5, 6, 9, 20, 28, 31, 44, 45, 56, 66, 72, 76, 77, 78, 87, 115, 117, 124, 125, 126, 127], "our": [5, 7, 45, 55, 115], "experi": [5, 20, 90, 99, 130], "them": [5, 8, 56, 73, 87, 115], "panda": [5, 8, 10, 16, 19, 46, 50, 52, 54, 56, 85, 87, 115, 117, 126], "datafram": [5, 10, 16, 46, 51, 52, 56, 60, 61, 62, 64, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 115, 117, 121, 126], "index": [5, 24, 66, 71, 74, 100], "befor": [5, 7, 20, 31, 36, 45, 48, 50, 51, 56, 64, 65, 74, 80, 81, 82, 83, 84, 85, 86, 87, 88, 117, 124, 125], "real": [5, 45, 65, 66, 67, 68, 117, 123], "obtain": [5, 44, 65, 66, 115, 117, 122, 124], "pd": [5, 8, 10, 16, 19, 117, 120], "append": [5, 8, 10, 45, 47, 81], "df_score": 5, "967755": 5, "pipelin": [5, 6, 8, 13, 19, 23, 24, 28, 31, 37, 40, 44, 45, 55, 60, 61, 62, 65, 66, 67, 68, 75, 79, 80, 81, 82, 83, 84, 85, 86, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 105, 114, 117, 121, 122, 123, 124, 125, 126, 127], "logisticregress": [5, 6, 7, 13, 23, 24, 31, 40, 56, 104, 115], "In": [5, 8, 10, 13, 18, 19, 20, 26, 28, 33, 41, 42, 44, 45, 47, 48, 52, 55, 56, 62, 65, 66, 67, 68, 79, 92, 93, 95, 97, 100, 115, 117, 124, 126, 130], "need": [5, 28, 52, 56, 74, 82, 87, 90, 93, 99, 101, 117, 127], "hot": [5, 10, 85, 117, 120], "categor": [5, 10, 26, 31, 39, 52, 56, 75, 79, 80, 81, 82, 83, 84, 85, 86, 115, 117, 120, 124, 127, 128], "standard": [5, 10, 85, 117, 120, 124, 127], "numer": [5, 10, 31, 45, 52, 56, 82, 85, 98, 115, 117, 127], "inject": 5, "imput": [5, 10], "simpleimput": [5, 10], "make_pipelin": [5, 6, 7, 8, 9, 10, 13, 23, 24, 28, 31, 36, 40, 45, 87, 105, 117, 124], "preprocess": [5, 6, 10, 23, 24, 45, 52, 60, 74, 75, 88, 92, 130], "onehotencod": [5, 10, 85, 117, 120], "standardscal": [5, 6, 10, 23, 24, 88], "num_pip": 5, "add_ind": 5, "cat_pip": 5, "constant": 5, "fill_valu": 5, "miss": [5, 66, 94, 98, 115, 117, 121], "handle_unknown": [5, 85], "ignor": [5, 65, 66, 67, 68, 71, 72, 76, 77, 78, 85, 87], "Then": [5, 41, 55, 56, 115], "preprocessor": [5, 10], "dispatch": 5, "compos": [5, 10, 31, 52], "make_column_selector": 5, "selector": 5, "make_column_transform": 5, "preprocessor_linear": 5, "dtype_includ": 5, "categori": [5, 9, 10, 31, 47, 52, 56, 75, 117, 120], "n_job": [5, 45, 61, 62, 65, 66, 67, 79, 80, 81, 83, 84, 85, 86, 90, 92, 93, 94, 95, 96, 97, 99, 100, 117, 119, 127], "final": [5, 36, 47, 66, 87, 88, 90, 115, 117, 125], "connect": [5, 56], "linear_model": [5, 6, 7, 13, 23, 24, 31, 40, 56, 104, 115], "lr_clf": 5, "max_it": [5, 23, 24, 99, 115], "1000": [5, 10, 31, 40, 60, 61, 62, 65, 66, 67, 68, 79, 80, 82, 83, 85, 86, 87, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 117, 120], "logist": [5, 31, 55], "regress": [5, 31, 55, 65, 66, 67, 117, 119, 124, 130], "500000": 5, "971349": 5, "580721": 5, "see": [5, 8, 10, 28, 33, 44, 45, 46, 49, 51, 52, 60, 61, 62, 64, 65, 66, 67, 68, 72, 74, 79, 80, 81, 83, 84, 85, 86, 87, 90, 92, 93, 94, 95, 96, 97, 99, 100, 107, 115], "howev": [5, 9, 13, 20, 31, 45, 48, 56, 85, 115], "impact": [5, 16, 28, 31, 115, 117, 119], "imbal": [5, 20, 45, 67, 68, 72, 74, 76, 77, 78, 108, 130], "verifi": 5, "someth": [5, 56], "similar": [5, 23, 45, 52, 65, 79, 115], "happen": [5, 9, 24, 36, 47, 52, 87], "tree": [5, 28, 65, 66, 68, 104, 116, 117, 124, 125], "base": [5, 51, 65, 66, 67, 68, 71, 74, 75, 79, 81, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 115, 117, 122, 123, 128, 130], "randomforestclassifi": [5, 20, 48], "type": [5, 47, 51, 55, 56, 60, 72, 75, 76, 77, 78, 80, 88, 102, 103, 115, 117, 118, 119, 120, 122, 123, 124, 128], "scale": [5, 10, 92], "ordin": [5, 52, 73, 84, 117, 128, 130], "ensembl": [5, 7, 19, 21, 45, 63, 72, 105, 114, 116, 117, 118, 122, 123, 124, 125, 126, 127, 128, 130], "ordinalencod": [5, 52, 75, 84, 117, 120], "use_encoded_valu": 5, "unknown_valu": 5, "preprocessor_tre": 5, "rf_clf": 5, "random_st": [5, 6, 7, 8, 10, 13, 16, 19, 20, 23, 24, 28, 31, 33, 36, 40, 44, 45, 46, 48, 55, 56, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 115, 117, 122, 124, 126], "42": [5, 6, 7, 8, 10, 11, 23, 24, 28, 31, 36, 46, 55, 56, 61, 62, 63, 64, 65, 67, 69, 70, 79, 80, 81, 82, 83, 85, 86, 87, 91, 92, 94, 97, 98, 114], "random": [5, 7, 8, 10, 16, 19, 26, 30, 32, 34, 41, 42, 55, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 79, 80, 81, 82, 83, 84, 85, 86, 89, 91, 92, 94, 95, 97, 98, 114, 116, 117, 118, 124, 126, 128, 130], "forest": [5, 65, 66, 67, 68, 116, 117, 124, 130], "972130": 5, "637362": 5, "affect": [5, 7, 20, 51, 115], "less": [5, 7, 9, 31, 33, 56, 66, 90, 93, 96, 99, 115], "present": [5, 10, 41, 44, 56, 61, 62, 63, 72, 76, 77, 78, 83, 117, 126], "improv": [5, 8, 9, 10, 20, 96, 117, 123, 126, 130], "most": [5, 18, 26, 28, 40, 56, 90, 93, 99, 115], "comput": [5, 8, 19, 41, 52, 56, 65, 66, 67, 68, 72, 73, 74, 75, 76, 77, 78, 79, 80, 92, 95, 96, 97, 107, 115, 117, 120, 126, 128, 130], "loss": [5, 10, 55, 69, 70, 73], "criterion": [5, 66, 68, 117, 122], "penal": 5, "fals": [5, 10, 16, 19, 20, 41, 47, 48, 55, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 76, 77, 78, 87, 88, 89, 90, 98, 103, 117, 128], "weight": [5, 7, 13, 19, 23, 24, 28, 31, 33, 36, 40, 44, 48, 52, 55, 56, 60, 61, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 82, 83, 85, 86, 87, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 115], "appli": [5, 9, 13, 44, 45, 56, 65, 66, 67, 68, 80, 81, 82, 83, 84, 85, 86, 87, 90, 92, 96, 115, 117, 124, 125], "invers": [5, 66, 87, 117, 124], "proport": [5, 19, 52, 56, 65, 66, 67], "frequenc": [5, 66], "parametr": [5, 86, 104], "set_param": [5, 31, 60, 61, 62, 65, 66, 67, 68, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "logisticregression__class_weight": 5, "797593": 5, "807580": 5, "randomforestclassifier__class_weight": 5, "964290": 5, "627844": 5, "realli": 5, "still": [5, 47, 117, 124], "bias": [5, 31], "toward": [5, 31, 45, 75, 130], "mainli": [5, 9, 24, 45, 115, 117, 129], "due": [5, 9, 31, 33, 45, 115, 117, 126, 127], "suit": 5, "enough": 5, "anoth": [5, 20, 47, 48, 63, 87], "wai": [5, 40, 41, 45, 56, 115], "do": [5, 6, 40, 45, 47, 55, 65, 67], "process": [5, 26, 39, 45, 47, 56, 65, 66, 67], "make_pipeline_with_sampl": 5, "786576": 5, "806180": 5, "786993": 5, "802108": 5, "allow": [5, 6, 9, 10, 13, 20, 31, 33, 41, 42, 46, 47, 48, 52, 55, 56, 60, 65, 66, 67, 68, 87, 90, 104, 115, 117, 119, 120, 121, 124, 125, 126], "focu": [5, 31, 56, 115], "cost": [5, 9, 66], "more": [5, 9, 13, 33, 44, 45, 49, 52, 56, 60, 61, 62, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 115, 117, 120], "mistak": 5, "decreas": [5, 66], "ani": [5, 13, 18, 24, 26, 31, 44, 45, 47, 52, 55, 56, 60, 66, 74, 79, 80, 81, 83, 84, 85, 86, 87, 93, 99, 115, 117, 120, 128], "find": [5, 19, 47, 50, 56, 72, 76, 77, 78, 81, 90, 92, 93, 95, 96, 97, 99, 115], "best": [5, 66, 72, 73, 76, 78], "current": [5, 7, 47, 50, 52, 56, 66, 96, 103, 117, 124], "intern": [5, 20, 40, 47, 66, 77, 79, 86, 117, 126, 130], "alreadi": [5, 31, 66, 79, 80, 83, 84, 85, 86], "decis": [5, 13, 31, 40, 51, 56, 65, 66, 67, 68, 93, 115, 117, 125], "onc": [5, 55, 56], "bootstrap": [5, 19, 20, 31, 33, 48, 56, 65, 66, 67, 68, 82, 115, 117, 120, 124, 128], "balancedrandomforestclassifi": [5, 20, 48, 65, 67, 68, 105, 117, 120, 121, 124, 126, 127], "balancedbaggingclassifi": [5, 19, 20, 48, 66, 67, 68, 105, 117, 119, 127, 128], "all": [5, 8, 9, 20, 26, 40, 42, 45, 46, 47, 48, 50, 55, 56, 60, 61, 62, 63, 65, 66, 67, 68, 75, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 114, 116, 117, 119, 120, 121, 123, 124, 126], "replac": [5, 19, 20, 40, 48, 56, 65, 66, 67, 68, 82, 87, 91, 98, 115, 117, 118, 119, 120, 122, 124], "846170": 5, "801848": 5, "singl": [5, 52, 55, 56, 66, 81, 117, 122], "gradient": [5, 55, 69, 70, 89], "boost": [5, 19, 65, 66, 67, 68, 105, 116, 117, 124, 130], "within": [5, 19, 47, 55, 87, 88, 115, 117, 128], "histgradientboostingclassifi": [5, 45], "bag_clf": 5, "n_estim": [5, 20, 48, 65, 66, 67, 68], "bag": [5, 18, 21, 26, 60, 65, 66, 67, 68, 82, 83, 87, 98, 105, 114, 116, 117, 124, 128, 130], "histogram": 5, "824317": 5, "816325": 5, "last": [5, 31, 56, 81, 85, 87, 92, 97, 117, 124, 130], "bring": [5, 117, 124], "divers": [5, 19, 65, 130], "gbdt": 5, "portion": 5, "246": [5, 11, 114], "86": [5, 9, 20, 23], "plot_impact_imbalanced_class": [5, 11, 114], "those": [6, 31, 44, 52, 56, 115], "binari": [6, 8, 19, 47, 49, 56, 61, 62, 65, 66, 67, 68, 72, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 91, 94, 95, 98, 102, 103, 117, 122, 124], "train": [6, 7, 8, 9, 10, 18, 20, 23, 24, 26, 45, 48, 51, 55, 56, 61, 62, 65, 66, 67, 68, 69, 70, 72, 75, 82, 87, 89, 97, 115, 117, 124, 130], "statist": [6, 19, 45, 56, 60, 61, 62, 65, 75, 79, 80, 81, 82, 83, 84, 85, 86, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 117, 120, 130], "38": [6, 21], "12": [6, 31, 41, 42, 46, 49, 50, 53, 54, 63, 66, 68, 75, 79, 80, 83, 84, 85, 86, 92, 96, 97, 119, 124, 130], "pre": [6, 9, 23, 50, 71, 115], "rec": [6, 9, 23, 71], "spe": [6, 9, 23, 71], "f1": [6, 7, 9, 23, 36, 71, 87], "geo": [6, 9, 23, 71], "iba": [6, 9, 23, 24, 71, 74], "sup": [6, 9, 23, 52, 71], "88": [6, 9, 23], "58": [6, 32, 114], "70": [6, 9, 20, 71], "74": [6, 23, 46, 63], "53": 6, "69": 6, "92": [6, 7, 9, 82, 130], "75": [6, 7, 16, 55, 71, 78], "79": [6, 9], "83": [6, 7, 9], "avg": [6, 7, 9, 23, 36, 41, 52, 71, 87], "84": [6, 9, 23], "81": 6, "89": [6, 7, 9, 23], "71": 6, "32": [6, 46, 55, 63, 69, 70, 89], "train_test_split": [6, 20, 23, 24, 36, 45, 48, 65, 67, 87], "metric": [6, 7, 8, 9, 10, 20, 22, 23, 25, 26, 28, 36, 45, 48, 55, 56, 65, 66, 67, 68, 69, 70, 73, 75, 76, 77, 78, 83, 87, 88, 105, 114, 116, 117, 122, 124, 126, 127, 128], "classification_report_imbalanc": [6, 9, 23, 52, 105, 117, 120, 124, 128], "nearmiss": [6, 26, 39, 40, 43, 69, 70, 94, 98, 105, 114, 115, 117, 118, 122, 123, 124], "folder": [6, 63], "fetch": [6, 46, 63, 65, 66, 67, 117, 123], "50": [6, 7, 10, 20, 31, 46, 56, 64, 68, 69, 70, 71], "x_train": [6, 7, 9, 10, 20, 23, 24, 36, 48, 65, 67, 87], "x_test": [6, 7, 9, 10, 20, 23, 24, 36, 48, 52, 65, 67, 75, 87], "y_train": [6, 7, 9, 10, 20, 23, 24, 36, 48, 65, 67, 87], "y_test": [6, 7, 9, 10, 20, 23, 24, 36, 48, 65, 67, 87], "classifi": [6, 7, 8, 9, 13, 18, 21, 23, 24, 26, 28, 31, 36, 40, 45, 51, 52, 56, 60, 63, 65, 66, 67, 68, 71, 72, 73, 76, 77, 78, 82, 83, 86, 87, 94, 95, 98, 114, 115, 116, 117, 124, 127], "report": [6, 9, 10, 20, 22, 25, 26, 45, 71, 72, 76, 77, 78, 83, 87, 88, 114], "278": [6, 11, 46, 63, 114], "11": [6, 7, 13, 20, 28, 31, 34, 40, 46, 63, 66, 114, 115, 127, 129], "plot_multi_class_under_sampl": [6, 11, 114], "easili": [7, 55], "vari": [7, 28, 51, 90, 93, 99, 115], "dure": [7, 18, 26, 28, 31, 33, 55, 56, 60, 61, 62, 65, 66, 67, 68, 69, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 115, 117, 122, 124, 126], "usual": [7, 13, 20, 51, 52, 75], "limit": 7, "numpi": [7, 8, 10, 13, 19, 31, 32, 40, 41, 42, 45, 50, 51, 52, 54, 55, 56, 60, 71, 73, 75, 76, 77, 78, 81, 84, 85, 115, 117, 126], "np": [7, 8, 10, 13, 19, 31, 32, 40, 41, 42, 45, 52, 55, 56, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 91, 92, 94, 97, 98, 115], "make_blob": [7, 81], "make_moon": [7, 16], "isolationforest": 7, "classification_report": [7, 36, 87], "rng": [7, 31, 32, 41, 42, 55, 56], "randomst": [7, 31, 32, 41, 42, 55, 56, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 79, 80, 81, 82, 83, 84, 85, 86, 89, 91, 92, 94, 97, 98], "plot_scatt": 7, "scatter": [7, 13, 16, 28, 31, 32, 33, 40, 41, 42], "figur": [7, 10, 42, 56, 115], "label": [7, 8, 28, 32, 41, 42, 46, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 115], "legend": [7, 8, 28, 32, 33, 41, 42], "non": [7, 20, 66, 73, 117, 126], "gaussian": 7, "contamin": 7, "unform": 7, "nois": [7, 16, 33, 40, 56, 115, 117, 120], "moon": 7, "n_sampl": [7, 13, 16, 19, 23, 24, 28, 31, 33, 36, 40, 44, 48, 55, 56, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 115], "05": [7, 31, 40, 44, 48, 55, 56, 115], "blob": [7, 81], "center": [7, 81], "cluster_std": 7, "uniform": [7, 32], "low": [7, 9, 40, 115], "high": [7, 66, 68], "size": [7, 19, 31, 32, 55, 56, 85, 86, 90, 92, 93, 95, 96, 97, 99], "vstack": [7, 42, 115], "hstack": [7, 19], "ones": 7, "shape": [7, 10, 13, 31, 40, 41, 42, 46, 55, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 115, 117, 122], "int8": [7, 8], "zero": [7, 66, 71, 72], "randint": [7, 31, 32, 56, 85], "without": [7, 19, 31, 45, 56, 82, 90, 98, 117, 127], "elimin": 7, "pass": [7, 19, 46, 47, 55, 56, 60, 64, 65, 66, 67, 68, 79, 80, 81, 83, 84, 85, 86, 87, 90, 93, 99, 101, 102, 115, 117, 119, 120, 123, 124, 126, 127, 128], "call": [7, 24, 36, 47, 48, 50, 52, 55, 60, 65, 66, 67, 69, 81, 87, 117, 128], "outlier_reject": 7, "resampl": [7, 8, 9, 13, 18, 19, 21, 24, 26, 31, 36, 40, 45, 46, 48, 51, 56, 60, 61, 62, 63, 64, 65, 66, 67, 68, 72, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 114, 117, 123, 124, 126, 128], "max_sampl": [7, 65, 66, 117, 126], "100": [7, 8, 10, 13, 31, 32, 33, 46, 48, 55, 60, 61, 62, 63, 65, 66, 67, 79, 80, 81, 82, 83, 85, 86, 87, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100], "4": [7, 9, 13, 23, 24, 28, 31, 32, 33, 40, 41, 42, 46, 50, 53, 54, 63, 65, 66, 67, 68, 69, 80, 82, 85, 86, 87, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 121], "y_pred": [7, 9, 10, 24, 36, 47, 48, 55, 65, 67, 71, 72, 73, 74, 76, 77, 78, 87, 117, 124], "reject_sampl": 7, "func": [7, 10, 19, 55, 60], "x_inlier": 7, "y_inlier": 7, "By": [7, 31, 60, 63, 65, 66, 69, 70, 77, 81, 87, 88, 89, 91, 95, 96, 115, 117, 118, 122, 123, 124], "elimn": 7, "pipe": 7, "solver": [7, 115], "lbfg": [7, 115], "multi_class": [7, 115], "auto": [7, 10, 42, 48, 60, 61, 62, 65, 66, 67, 68, 75, 79, 80, 81, 82, 83, 84, 85, 86, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 115, 117, 120], "clf": [7, 13, 31, 40, 56, 66, 68], "precis": [7, 36, 52, 71, 72, 76, 77, 78, 87, 100], "recal": [7, 9, 36, 47, 52, 71, 72, 76, 77, 78, 87], "support": [7, 31, 36, 47, 49, 51, 52, 56, 60, 61, 62, 65, 66, 67, 68, 72, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125], "macro": [7, 36, 72, 73, 76, 77, 78, 87, 116], "91": [7, 9], "80": [7, 9, 71], "90": [7, 9, 33, 46, 63, 71], "976": [7, 11, 114], "plot_outlier_reject": [7, 11, 114], "two": [8, 10, 13, 19, 24, 31, 36, 40, 44, 45, 47, 48, 52, 56, 75, 100, 115, 117, 122, 130], "lfw": 8, "wild": 8, "sever": [8, 19, 31, 48, 61, 87, 90, 99, 101, 130], "conjunct": [8, 19], "3nn": 8, "order": [8, 36, 40, 63, 65, 66, 67, 68, 71, 72, 76, 77, 78, 87, 92, 96, 97, 112, 117, 123], "examin": [8, 28, 90, 93, 99, 115], "": [8, 10, 13, 19, 28, 32, 33, 36, 41, 42, 44, 45, 46, 47, 50, 52, 55, 56, 60, 61, 62, 63, 65, 66, 67, 68, 72, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 116, 130], "output": [8, 51, 52, 60, 61, 62, 66, 68, 71, 73, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 115, 117, 121, 126], "qualiti": [8, 52, 66], "imag": [8, 50, 52, 54, 56], "know": 8, "person": 8, "build": [8, 45, 48, 50, 54, 65, 66, 67, 68, 71, 92, 97, 110, 117, 123], "recogn": 8, "problem": [8, 19, 23, 24, 66, 68, 72, 81, 116, 117, 122, 123, 130], "pictur": [8, 45], "georg": 8, "w": [8, 65, 66, 67, 68, 80, 83, 84, 85, 86, 130], "bush": 8, "bill": 8, "clinton": 8, "fetch_lfw_peopl": 8, "george_bush_id": 8, "1871": 8, "photo": 8, "bill_clinton_id": 8, "531": [8, 46, 63, 117, 125], "classes_nam": 8, "arrai": [8, 31, 32, 42, 47, 52, 55, 56, 60, 61, 62, 64, 65, 66, 67, 68, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 115, 117, 120, 122, 124, 126], "b": [8, 31, 46, 47, 56, 62, 63, 67, 84, 130], "object": [8, 31, 36, 47, 51, 56, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 115, 117, 119, 122, 123, 124], "mask_photo": 8, "astyp": [8, 10, 31, 55, 56], "check": [8, 20, 45, 47, 49, 55, 60, 61, 62, 66, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 115, 117, 123, 126], "between": [8, 19, 31, 32, 33, 40, 44, 47, 52, 56, 66, 68, 72, 75, 76, 77, 78, 115, 117, 122, 128], "class_distribut": 8, "seri": [8, 19, 51, 117, 126], "normal": [8, 19, 31, 33, 36, 47, 66, 68, 82, 115, 117, 125], "barh": 8, "distribut": [8, 9, 13, 16, 19, 28, 45, 47, 64, 79, 95, 96, 130], "pos_label": [8, 72, 76, 77, 78], "posit": [8, 52, 66, 72, 76, 77, 78, 115, 117, 127], "consid": [8, 31, 40, 52, 56, 66, 80, 92, 93, 95, 96, 97, 99, 115, 117, 124], "belong": [8, 56, 100, 115], "knn": [8, 36, 87, 90, 93, 95, 99, 116, 130], "presid": 8, "through": [8, 46, 50, 51, 66, 115], "roc": [8, 10], "curv": [8, 26, 27, 29, 83, 87, 88, 114], "neighbor": [8, 28, 31, 36, 40, 41, 42, 56, 75, 79, 80, 81, 83, 84, 85, 86, 87, 90, 91, 92, 93, 96, 97, 99, 101, 116, 117, 119, 130], "kneighborsclassifi": [8, 36, 87, 92, 97], "functionsampl": [8, 19, 31, 40, 55, 105, 117, 126, 128], "adasyn": [8, 80, 81, 82, 83, 84, 85, 86, 105, 116, 117, 118, 119, 122, 124, 126, 130], "n_neighbor": [8, 36, 40, 41, 79, 90, 92, 93, 95, 96, 97, 99, 115, 117, 122, 125], "stratifiedkfold": [8, 10], "cv": [8, 28, 94, 115], "n_split": [8, 10], "split": [8, 9, 10, 20, 23, 24, 36, 45, 66], "roccurvedisplai": 8, "auc": [8, 10], "roc_curv": 8, "disp": [8, 20], "fpr": 8, "tpr": 8, "mean_tpr": 8, "mean_fpr": 8, "linspac": 8, "y_proba": [8, 87], "predict_proba": [8, 10, 36, 65, 66, 67, 68, 87, 94, 115], "pos_label_idx": 8, "flatnonzero": [8, 19], "classes_": [8, 47, 65, 66, 67, 68, 87], "threshold": [8, 81, 94, 96, 116, 117, 118], "interp": 8, "get_n_split": 8, "mean_auc": 8, "displai": [8, 71], "reus": [8, 19, 52, 65, 66, 67], "aggreg": 8, "roc_auc": [8, 10], "estimator_nam": 8, "__class__": [8, 13, 31, 40], "__name__": [8, 13, 31, 40], "previou": [8, 20, 65, 66, 67, 115], "cell": 8, "9": [8, 11, 16, 19, 20, 23, 24, 28, 33, 41, 42, 46, 50, 52, 53, 54, 55, 60, 61, 62, 63, 65, 66, 67, 68, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 114, 119, 127], "d": [8, 19, 51, 65, 93, 94, 115, 130], "linestyl": 8, "color": [8, 41, 52, 56], "axi": [8, 10, 28, 41, 55, 115], "squar": [8, 24, 72, 74], "suptitl": [8, 28, 31, 42], "comparison": [8, 20, 31, 40], "nwith": 8, "set_xlim": [8, 28, 32, 41, 42], "set_ylim": [8, 28, 32, 41, 42], "despin": [8, 10, 13, 16, 28, 31, 32, 40, 41, 42], "offset": [8, 13, 16, 28, 31, 32, 40, 41, 42], "loc": [8, 28, 33, 41, 42], "lower": [8, 28, 33, 42, 68, 115], "right": [8, 10, 28, 42, 45, 66, 115, 117, 122], "fontsiz": [8, 28, 32, 41], "new": [8, 26, 30, 31, 32, 33, 44, 47, 49, 56, 60, 61, 62, 63, 65, 66, 67, 68, 69, 71, 73, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 112, 115, 120, 130], "interpol": [8, 32, 44, 56], "462": [8, 11, 114, 117, 124], "224": [8, 11, 24, 25, 87, 114], "plot_over_sampling_benchmark_lfw": [8, 11, 114], "signific": 9, "part": [9, 20, 67, 68, 115, 130], "newsgroup": 9, "load": [9, 63, 116], "loader": 9, "ha": [9, 20, 23, 24, 47, 52, 60, 61, 62, 65, 66, 67, 68, 69, 70, 71, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 115, 117, 119, 122, 123, 124, 126], "almost": [9, 115], "twice": 9, "fetch_20newsgroup": 9, "alt": 9, "atheism": 9, "talk": 9, "religion": 9, "misc": 9, "comp": 9, "graphic": 9, "sci": 9, "space": [9, 13, 31, 40, 44, 87, 115], "newsgroups_train": 9, "subset": [9, 16, 48, 59, 65, 66, 67, 68, 95, 115, 117, 124], "newsgroups_test": 9, "summari": [9, 71, 116], "593": 9, "584": 9, "480": [9, 117, 124], "377": 9, "394": [9, 117, 124], "389": [9, 46, 63], "319": [9, 31, 34, 114], "251": 9, "might": [9, 45, 56, 65, 66, 117, 125, 126, 127], "combin": [9, 14, 24, 36, 59, 83, 87, 88, 105, 114, 116, 117, 122, 123], "tf": [9, 55], "idf": 9, "vector": [9, 31, 52, 56, 75, 100, 117, 118, 120, 126], "feed": 9, "multinomi": 9, "naiv": [9, 40, 116], "bay": 9, "summar": [9, 52], "expect": [9, 51, 56, 60, 65, 66, 67, 75, 84, 87], "feature_extract": 9, "tfidfvector": 9, "naive_bay": [9, 88], "multinomialnb": 9, "67": [9, 55, 71], "94": [9, 31, 44, 48, 55, 56, 115], "82": [9, 71], "96": [9, 52, 75, 87], "99": [9, 36, 87], "87": [9, 20, 23, 56, 71, 87], "98": [9, 23, 31, 40, 87], "97": [9, 52, 97, 130], "52": [9, 40, 43, 46, 63, 114], "60": [9, 71], "33": [9, 31, 46, 50, 53, 54, 56, 63, 76, 77], "78": 9, "1353": 9, "interest": [9, 41, 42, 96, 115], "therefor": [9, 13, 31, 33, 41, 45, 48, 51, 52, 56, 61, 62, 65, 66, 67, 68, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 94, 95, 98, 115, 117, 122, 126], "also": [9, 40, 44, 45, 46, 49, 50, 52, 56, 60, 66, 67, 68, 71, 82, 87, 115, 117, 124, 126, 128], "properli": [9, 117, 125], "handl": [9, 31, 88, 115, 117, 120, 122, 123, 126], "make_pipeline_imb": 9, "although": 9, "ident": [9, 40, 44, 60], "seen": [9, 31, 56, 60, 61, 62, 65, 66, 67, 68, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 115], "correct": [9, 45, 71, 72, 73, 74, 76, 77, 78, 115, 117, 122, 125], "poor": 9, "reduc": [9, 10, 26, 39, 65, 66, 67, 115], "other": [9, 42, 44, 46, 52, 56, 65, 66, 67, 68, 72, 75, 87, 92, 115, 117, 122, 123, 130], "overal": 9, "85": [9, 11, 20, 46, 55, 63, 65, 114], "93": [9, 23, 46, 63, 87], "73": [9, 20, 23], "76": 9, "68": [9, 20], "726": [9, 11, 114], "113": [9, 11, 114], "plot_topic_class": [9, 11, 114], "strategi": [10, 31, 56, 61, 62, 64, 69, 70, 72, 89, 90, 91, 92, 93, 96, 99, 115, 117, 119, 125, 130], "kaggl": 10, "www": 10, "c": [10, 13, 16, 31, 33, 40, 50, 52, 56, 61, 65, 68, 75, 84, 96, 115, 130], "safe": [10, 56], "driver": 10, "should": [10, 24, 31, 36, 40, 45, 47, 52, 56, 60, 61, 62, 65, 66, 67, 68, 69, 70, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 103, 115, 117, 120, 124], "link": [10, 12, 13, 26, 39, 41, 43, 44, 49, 61, 62, 79, 90, 99, 100, 114, 116, 117, 118, 126], "introduct": [10, 116], "training_data": 10, "read_csv": 10, "input": [10, 47, 55, 60, 61, 62, 65, 66, 67, 68, 69, 70, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 115, 117, 121, 126], "csv": 10, "testing_data": 10, "id": [10, 46, 63, 104], "set_index": 10, "columntransform": 10, "functiontransform": 10, "convert_float64": 10, "float64": [10, 19], "want": [10, 19, 48, 50, 90, 93, 99], "numerical_column": 10, "_calc_": 10, "_bin": 10, "numerical_pipelin": 10, "categorical_column": 10, "_cat": 10, "categorical_pipelin": 10, "missing_valu": 10, "numerical_preprocess": 10, "categorical_preprocess": 10, "remaind": 10, "environ": 10, "variabl": [10, 55], "avoid": [10, 45, 51, 75, 76, 77, 78, 117, 122, 124], "gpu": 10, "cuda_visible_devic": 10, "tensorflow": [10, 69, 70, 89, 105, 116, 117, 124, 125], "layer": [10, 55, 69, 70, 117, 125], "activ": [10, 50, 55, 69, 70, 117, 125, 127], "batchnorm": [10, 117, 125], "dens": [10, 55, 69, 70, 89, 117, 120, 125], "dropout": 10, "sequenti": [10, 55, 69, 70, 87], "make_model": 10, "n_featur": [10, 13, 19, 23, 24, 28, 31, 33, 36, 40, 44, 48, 55, 56, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 115], "add": [10, 33, 47, 52, 55, 65, 66, 67, 69, 70, 81, 115, 117, 119, 122, 123, 124, 125, 126, 128], "200": [10, 16, 41, 42, 48], "input_shap": 10, "kernel_initi": 10, "glorot_norm": 10, "relu": 10, "use_bia": 10, "sigmoid": 10, "compil": [10, 22, 25, 26, 55, 69, 70, 71, 83, 87, 88, 114], "binary_crossentropi": 10, "optim": [10, 55, 56, 69, 70], "adam": 10, "decor": [10, 41, 47, 74, 104], "functool": 10, "wrap": [10, 52, 74], "timeit": 10, "wrapper": 10, "arg": [10, 60], "kwd": 10, "start_tim": 10, "elapsed_tim": 10, "elaps": [10, 87, 88], "sec": 10, "roc_auc_scor": 10, "util": [10, 55, 65, 66, 67, 68, 69, 70, 87, 101, 102, 103, 104, 105, 106, 110, 111, 116, 117, 123, 125, 126, 128], "parse_vers": 10, "tf_version": 10, "__version__": 10, "fit_predict_imbalanced_model": 10, "epoch": [10, 55, 69, 70, 89], "verbos": [10, 55, 63, 64, 65, 66, 67, 69, 70, 87, 88], "batch_siz": [10, 55, 69, 70, 89], "6": [10, 11, 13, 14, 19, 20, 28, 31, 32, 41, 46, 48, 50, 53, 54, 60, 61, 63, 65, 66, 90, 99, 100, 114, 115, 130], "predict_method": 10, "els": [10, 31, 41], "getattr": 10, "contrari": [10, 56], "yield": [10, 55, 68], "balancedbatchgener": [10, 55, 105], "fit_predict_balanced_model": 10, "training_gener": [10, 55, 69, 70], "fold": [10, 45, 94], "previous": [10, 41, 44, 55, 79, 80, 83, 84, 85, 86], "skf": 10, "cv_results_imbalanc": 10, "cv_time_imbalanc": 10, "cv_results_balanc": 10, "cv_time_balanc": 10, "train_idx": 10, "valid_idx": 10, "x_local_train": 10, "fit_transform": [10, 52, 75, 87], "iloc": 10, "y_local_train": 10, "ravel": [10, 13, 16, 31, 40], "x_local_test": 10, "transform": [10, 24, 36, 52, 60, 61, 62, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 110], "y_local_test": 10, "df_result": 10, "unstack": 10, "reset_index": 10, "df_time": 10, "boxplot": 10, "level_0": 10, "top": [10, 47], "left": [10, 33, 41, 45, 65, 66, 115], "xlabel": [10, 32], "ylabel": [10, 32], "whi": 10, "gca": 10, "xaxi": 10, "set_major_formatt": 10, "funcformatt": 10, "lambda": [10, 56], "po": 10, "term": [10, 20, 45], "porto_seguro_keras_under_sampl": [10, 11, 114, 117, 125], "01": [11, 17, 31, 32, 37, 40, 44, 48, 55, 56, 114, 115], "31": 11, "689": 11, "applic": [11, 47, 52, 63, 72, 76, 77, 78, 114, 130], "000": [11, 38, 46, 63, 114], "mix": [12, 26, 31, 56, 117, 120], "enn": [12, 26, 36, 61, 90, 92, 93, 96, 99, 115, 117, 118], "tomek": [12, 13, 26, 39, 43, 44, 61, 62, 90, 99, 100, 114, 116, 117, 118, 130], "algorithm": [13, 19, 20, 31, 40, 46, 48, 50, 51, 56, 61, 62, 64, 65, 66, 67, 68, 69, 70, 79, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 101, 105, 115, 117, 124], "literatur": [13, 20, 52, 117, 121, 124], "edit": [13, 44, 50, 61, 62, 90, 91, 92, 93, 96, 97, 99, 100, 116, 117, 118, 130], "nearest": [13, 31, 40, 41, 42, 44, 56, 61, 62, 79, 80, 81, 83, 84, 85, 86, 90, 91, 92, 93, 95, 96, 97, 99, 100, 101, 116, 117, 118, 119, 122, 130], "neighbour": [13, 41, 44, 61, 62, 79, 80, 83, 84, 85, 86, 90, 92, 93, 95, 96, 99, 100, 116, 117, 118, 122], "avail": [13, 31, 40, 45, 46, 47, 51, 52, 55, 56, 61, 62, 63, 65, 66, 67, 68, 79, 80, 81, 82, 83, 84, 85, 86, 87, 91, 94, 95, 98, 102, 117, 124], "coupl": [13, 19, 52], "make_classif": [13, 19, 23, 24, 28, 31, 33, 36, 40, 44, 48, 55, 56, 60, 61, 62, 65, 66, 67, 68, 79, 80, 82, 83, 85, 86, 87, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 115], "n_inform": [13, 23, 24, 28, 31, 36, 40, 44, 48, 55, 56, 60, 61, 62, 65, 66, 67, 68, 79, 80, 82, 83, 85, 86, 87, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 115], "n_redund": [13, 23, 24, 28, 31, 33, 36, 40, 44, 48, 55, 56, 60, 61, 62, 65, 67, 79, 80, 82, 83, 85, 86, 87, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 115], "n_repeat": [13, 31, 40, 44, 48, 55, 56, 115], "n_class": [13, 23, 24, 28, 31, 36, 40, 44, 48, 55, 56, 60, 61, 62, 65, 66, 67, 68, 69, 70, 75, 79, 80, 82, 83, 85, 86, 87, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 115], "n_clusters_per_class": [13, 23, 24, 28, 31, 36, 40, 44, 48, 55, 56, 60, 61, 62, 65, 67, 79, 80, 82, 83, 85, 86, 87, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 115], "class_sep": [13, 19, 23, 24, 28, 31, 36, 40, 44, 48, 55, 56, 60, 61, 62, 65, 67, 79, 80, 82, 83, 85, 86, 87, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 115], "alpha": [13, 24, 28, 31, 32, 33, 40, 41, 42, 52, 71, 74], "edgecolor": [13, 31, 40], "characterist": [13, 63], "plot_resampl": [13, 31, 40], "plot_decision_funct": [13, 31, 40], "plot_step": [13, 31, 40], "x_min": [13, 31, 40], "x_max": [13, 31, 40], "min": [13, 19, 31, 40], "y_min": [13, 31, 40], "y_max": [13, 31, 40], "xx": [13, 31, 40], "yy": [13, 31, 40], "meshgrid": [13, 31, 40], "arang": [13, 31, 40, 41, 55], "z": [13, 31, 32, 40, 46, 63, 67, 68, 115], "c_": [13, 31, 40], "reshap": [13, 31, 40, 52, 56, 75, 84], "contourf": [13, 31, 40], "doe": [13, 19, 45, 48, 56, 65, 66, 67, 68, 72, 76, 77, 78, 88, 115, 117, 124], "knowledg": [13, 65, 74, 82, 86, 130], "underli": [13, 115], "noisi": [13, 40, 44, 96, 97, 115], "cannot": [13, 40, 74, 87, 88, 115], "separ": [13, 72, 87], "henc": [13, 115], "benefici": 13, "ii": [13, 24, 26, 39, 40, 44, 46, 56, 99, 115], "readi": [13, 44], "smotetomek": [13, 44, 61, 105, 117, 122, 123, 125], "smoteenn": [13, 44, 62, 105, 117, 122, 123, 125], "zip": [13, 16, 26, 31, 32, 40, 41, 42, 55], "484": [13, 14, 46, 63, 114], "plot_comparison_combin": [13, 14, 114], "concern": [15, 26], "modul": [15, 26, 47, 52, 59, 107, 110, 113, 117, 122, 123, 124, 126, 127], "abil": [16, 76, 77, 78], "deal": [16, 31, 49, 52, 56, 74, 106, 111, 130], "oliveira": [16, 117, 118, 122], "convert": [16, 51, 66, 68, 75, 102, 117, 125], "arbitrari": [16, 60, 115], "shuffl": [16, 63], "colormap": 16, "viridi": 16, "colorbar": [16, 20], "helper": [16, 36, 87], "ratio_func": 16, "minority_class": [16, 19], "nrow": [16, 31, 40, 42], "x_resampl": [16, 31, 44, 45, 56, 60, 61, 62, 64, 79, 80, 81, 82, 83, 84, 85, 86, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 115], "y_resampl": [16, 31, 44, 45, 46, 56, 60, 61, 62, 64, 79, 80, 81, 82, 83, 84, 85, 86, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 115], "890": [16, 17, 114], "plot_make_imbal": [16, 17, 114], "impli": [18, 26, 115], "lost": [18, 26], "procedur": [18, 26, 45, 68, 97], "offer": [18, 26, 52, 56, 115], "altern": [18, 19, 26, 47, 66, 68], "fact": [18, 26, 31, 33, 56, 66, 115], "later": [18, 26, 36, 41, 45, 115], "larg": [19, 65, 81], "varieti": 19, "give": [19, 31, 45, 47, 48, 52, 66, 73, 117, 125, 126, 127], "publish": 19, "synthet": [19, 56, 79, 80, 81, 83, 84, 85, 86, 117, 118, 124, 130], "toi": [19, 31, 33, 40, 42, 64, 115], "10_000": [19, 23, 24, 55], "8977": 19, "1023": [19, 117, 120], "section": [19, 45, 47, 107, 115], "propos": [19, 31, 52, 63, 66, 71, 80, 83, 84, 85, 86, 90, 93, 96, 97, 99, 100], "intend": 19, "baggingclassifi": [19, 20, 48], "ebb": 19, "test_scor": [19, 28, 45], "std": [19, 28, 45], "708": 19, "010": [19, 72], "These": [19, 47, 56, 101, 115], "760": 19, "011": [19, 45], "over_bag": 19, "704": 19, "013": 19, "known": [19, 48, 49, 52, 56, 66, 67, 68, 82, 115, 117, 128], "smote_bag": 19, "743": 19, "spirit": 19, "framework": 19, "binomi": 19, "here": [19, 20, 45, 47], "charg": 19, "integr": [19, 50, 68], "roughly_balanced_bag": 19, "class_count": 19, "majority_class": 19, "draw": [19, 32, 65, 66], "n_minority_class": 19, "n_majority_resampl": 19, "negative_binomi": 19, "n": [19, 38, 40, 66, 80, 82, 83, 84, 85, 86, 91, 115, 130], "p": [19, 52, 65, 66, 67, 68, 75, 80, 83, 84, 85, 86, 87, 88, 92], "randomli": [19, 32, 40, 48, 56, 65, 66, 67, 68, 98, 100, 115], "majority_indic": 19, "choic": [19, 31, 55, 56, 61, 62, 65, 66, 67, 68, 79, 80, 81, 82, 83, 84, 85, 86, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102], "minority_indic": 19, "indic": [19, 55, 56, 65, 66, 67, 69, 71, 77, 80, 82, 85, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 103, 117, 122, 123, 124], "rbb": 19, "kw_arg": [19, 55, 60], "756": 19, "014": [19, 45], "r": [19, 20, 28, 32, 41, 42, 48, 52, 61, 65, 66, 67, 68, 72, 75, 94, 130], "maclin": [19, 65, 130], "opitz": [19, 65, 130], "empir": [19, 65, 130], "aaai": [19, 65, 130], "iaai": [19, 65, 130], "1997": [19, 65, 72, 97, 130], "546": [19, 65, 130], "551": [19, 65, 130], "wang": [19, 65, 130], "yao": [19, 65, 130], "analysi": [19, 65, 94, 130], "2009": [19, 65, 67, 86, 130], "ieee": [19, 65, 67, 68, 79, 90, 92, 93, 99, 100, 130], "symposium": [19, 65, 130], "intellig": [19, 65, 79, 80, 83, 84, 85, 86, 130], "mine": [19, 65, 82, 130], "hido": [19, 65, 130], "h": [19, 65, 67, 80, 86], "kashima": [19, 65, 130], "takahashi": [19, 65, 130], "asa": [19, 65, 130], "scienc": [19, 65, 130], "412": [19, 65, 117, 124, 130], "426": [19, 65, 130], "371": [19, 21, 114], "plot_bagging_classifi": [19, 21, 114], "shown": [20, 56], "learner": [20, 48, 67, 117, 125], "thei": [20, 40, 42, 47, 56, 65, 66, 67, 87, 115, 117, 120], "benefit": 20, "geometr": [20, 24, 71, 72], "wide": 20, "uci": [20, 46, 63], "satimag": [20, 46, 63], "fetch_dataset": [20, 46, 105, 117, 123], "stratifi": [20, 24, 36, 45], "baselin": [20, 45], "rest": [20, 47, 56, 72, 79, 80, 83, 84, 85, 86, 90, 93, 96, 99, 100], "decisiontreeclassifi": [20, 28, 48, 65, 66, 68, 117, 125], "y_pred_tre": 20, "balanced_accuracy_scor": [20, 45, 48, 52], "geometric_mean_scor": [20, 24, 52, 74, 105], "confusionmatrixdisplai": 20, "from_estim": 20, "ax_": 20, "actual": [20, 47], "balanced_bag": 20, "y_pred_bc": 20, "y_pred_bbc": 20, "significantli": 20, "popular": [20, 56], "outperform": 20, "vanilla": 20, "counterpart": 20, "rf": 20, "brf": [20, 48], "y_pred_rf": 20, "y_pred_brf": 20, "similarli": [20, 46, 48, 56, 117, 123, 126, 127], "manner": [20, 56, 82, 115], "easi": [20, 56, 115], "adaboost": [20, 48, 65, 66, 67, 68, 117, 124], "slower": [20, 65, 66, 67], "achiev": [20, 48, 67, 68], "wors": [20, 45], "adaboostclassifi": [20, 48, 67], "easyensembleclassifi": [20, 48, 65, 66, 68, 105, 117, 119, 124, 127], "rusboostclassifi": [20, 48, 65, 66, 67, 105, 117, 119, 124, 125, 127], "eec": [20, 48, 67], "y_pred_eec": 20, "rusboost": [20, 48, 68, 130], "y_pred_rusboost": 20, "home": [20, 40], "circleci": [20, 40], "mambaforg": 20, "env": 20, "testenv": 20, "lib": 20, "python3": 20, "site": [20, 63], "packag": [20, 31, 40, 46, 47, 50, 117, 123, 126, 128], "_weight_boost": 20, "519": 20, "futurewarn": [20, 47, 117, 127], "samm": [20, 48, 68], "default": [20, 31, 47, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 115, 117, 120, 123, 125, 127], "deprec": [20, 68, 79, 80, 83, 84, 85, 86, 96, 116, 122, 125], "circumv": 20, "warn": [20, 40, 47, 66, 68, 71, 77, 117, 120, 122, 124, 125, 128], "13": [20, 21, 41, 42, 43, 46, 47, 63, 66, 74, 114, 117, 120, 130], "334": [20, 21, 114], "242": [20, 21, 114, 117, 123], "plot_comparison_ensemble_classifi": [20, 21, 114], "705": 21, "done": [22, 26, 47], "specif": [22, 23, 25, 26, 31, 40, 41, 46, 48, 55, 56, 60, 64, 66, 71, 72, 74, 76, 77, 78, 79, 81, 82, 83, 85, 86, 87, 88, 104, 114, 115, 116, 117, 122, 124], "develop": [23, 24, 50, 116], "56": 23, "123": [23, 65], "1127": 23, "1250": [23, 36], "pl": 23, "flip_i": [23, 24, 28, 36, 60, 61, 62, 65, 67, 79, 80, 82, 83, 85, 86, 87, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100], "5000": [23, 24, 28, 31, 36, 44, 55, 56, 115], "y_pred_bal": 23, "364": [23, 25, 114], "plot_classification_report": [23, 25, 114], "made": [24, 56, 77, 84], "associ": [24, 55, 56, 66, 69, 70, 89, 101], "Be": [24, 50, 52, 56, 66], "awar": [24, 50, 52, 56, 66], "root": [24, 52, 66, 72], "product": [24, 52, 72], "sensit": [24, 40, 72, 76, 77, 115, 116], "940": 24, "make_index_balanced_accuraci": [24, 52, 105, 117, 127], "geo_mean": 24, "884": 24, "plot_metr": [24, 25, 114], "589": 25, "purpos": [26, 50, 54, 87], "introductori": 26, "relat": [26, 27], "reach": [26, 30, 99, 115], "like": [26, 30, 31, 34, 36, 44, 60, 61, 62, 64, 65, 66, 67, 68, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 114, 117, 120, 124], "shrinkag": [26, 30, 31, 34, 56, 82, 114, 117, 120, 128], "factor": [26, 30, 34, 71, 74, 82, 114, 117, 123], "includ": [26, 35, 45, 47, 56, 59, 65, 66, 71, 72, 76, 77, 78, 107, 113, 116, 117, 126], "embed": [26, 35, 37, 83, 87, 88, 93, 114], "group": [26, 39, 40, 56, 115], "fix": [26, 31, 39, 40, 116, 125, 129], "definit": [26, 39, 43, 75, 100, 114, 117, 125], "auto_examples_python": 26, "auto_examples_jupyt": 26, "k_neighbor": [28, 56, 80, 81, 83, 84, 85, 86, 95, 117, 122], "cart": 28, "let": [28, 33, 36, 45, 52, 55, 56, 115], "aim": 28, "search": [28, 56, 66, 94], "adequ": [28, 82], "validation_curv": 28, "inspect": [28, 66, 68, 87, 88], "cohen_kappa_scor": 28, "make_scor": 28, "scorer": 28, "param_rang": 28, "rang": [28, 55, 56], "train_scor": 28, "param_nam": 28, "smote__k_neighbor": 28, "train_scores_mean": 28, "train_scores_std": 28, "test_scores_mean": 28, "test_scores_std": 28, "tri": [28, 52, 72], "fill_between": 28, "idx_max": 28, "argmax": [28, 55], "cohen": 28, "kappa": 28, "pm": 28, "format": [28, 66, 71, 87, 117, 121, 125, 126], "set_xlabel": [28, 33, 41, 42], "set_ylabel": [28, 33, 41, 42], "nice": [28, 41, 42], "924": [28, 29, 114], "plot_validation_curv": [28, 29, 114], "06": [29, 46, 63, 114], "attend": [31, 40], "qualit": [31, 40], "create_dataset": [31, 40], "n_cluster": [31, 40, 47, 91], "none": [31, 40, 47, 55, 56, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 117, 119, 120, 123, 125], "linear": [31, 51], "boundari": [31, 93, 115], "weights_arr": 31, "300": [31, 45, 46, 63], "greater": [31, 51, 66], "poorer": 31, "repeat": [31, 33, 40, 56, 90, 92, 93, 99, 116, 117, 118], "trivial": 31, "ad": [31, 33, 44, 47, 51, 55, 66, 82, 87, 115, 117, 122, 123, 124, 128], "small": [31, 33, 65, 66, 82, 96, 130], "perturb": [31, 33, 82], "smooth": [31, 33, 56, 82, 117, 128], "below": [31, 44, 56, 63, 87, 115], "look": [31, 45, 66, 100], "superimpos": 31, "heurist": [31, 40, 41, 115], "idend": 31, "150": 31, "isinst": 31, "difficult": [31, 96, 115, 130], "rule": [31, 40, 41, 56, 82, 90, 92, 93, 96, 97, 99, 115, 117, 118, 130], "regular": [31, 56], "distinct": [31, 56], "depend": [31, 47, 50, 51, 52, 54, 56, 79, 115, 117, 123, 125], "particular": [31, 47, 56], "rise": [31, 48], "variant": [31, 79, 80, 81, 82, 83, 84, 85, 86, 115, 116], "identifi": [31, 65, 66, 67, 115], "borderlin": [31, 56, 79, 80, 81, 82, 83, 84, 85, 86, 117, 118, 124, 130], "borderlinesmot": [31, 56, 79, 81, 82, 83, 84, 85, 86, 105, 117, 119, 120, 124, 125, 126], "detect": [31, 80, 85, 86, 100, 115], "point": [31, 32, 41, 44, 47, 65, 66, 71, 73, 95, 100, 117, 125], "border": [31, 56], "svm": [31, 51, 56, 79, 80, 81, 82, 83, 84, 85, 86, 117, 118, 124], "svmsmote": [31, 56, 79, 80, 81, 82, 83, 84, 85, 105, 117, 119, 120, 124, 125, 126], "found": [31, 40, 56, 66, 91], "kmean": [31, 56, 81, 91, 117, 127], "kmeanssmot": [31, 56, 80, 82, 83, 84, 85, 86, 105, 117, 125, 126], "cluster": [31, 40, 56, 64, 80, 81, 82, 83, 84, 85, 86, 91, 115, 117, 118, 125, 127], "densiti": [31, 56, 81], "minibatchkmean": [31, 40, 81, 91], "kind": [31, 56, 80, 117, 124, 126], "kmeans_estim": [31, 81], "n_init": [31, 40, 81, 91], "smotenc": [31, 56, 79, 80, 81, 82, 83, 84, 86, 105, 117, 119, 120, 124, 125, 126, 127], "empti": [31, 56], "randn": [31, 56], "sort": [31, 44, 46, 56, 60, 65, 67, 77, 115, 117, 124], "smote_nc": [31, 56, 117, 124], "categorical_featur": [31, 56, 85, 117, 120], "nc": [31, 56, 85], "14021849735700803": 31, "033193400066544886": 31, "7490765234433554": 31, "7783820070908942": 31, "948842857719016": 31, "1989993778979113": 31, "3657680728116921": 31, "8790828729585258": 31, "3710891618824609": 31, "3327240726719727": 31, "smoten": [31, 56, 79, 81, 82, 83, 85, 86, 105, 117, 119, 120, 128], "40": [31, 46, 68, 69, 70, 84, 130], "int32": [31, 52, 75, 84], "133": [31, 34, 114], "plot_comparison_over_sampl": [31, 34, 114], "neighbourhood": [32, 56, 90, 92, 93, 95, 96, 97, 99, 115], "65284": 32, "52623": 32, "51468": 32, "22199": 32, "21": [32, 46, 63, 74, 86, 114, 117, 124, 125, 130], "43": 32, "45": [32, 41, 42, 46], "211": [32, 55], "y_2": 32, "z_2": 32, "34": [32, 46, 63, 130], "idx": 32, "len": [32, 45, 100], "annot": [32, 62, 130], "x_i": [32, 56], "x_": [32, 52, 56, 75], "zi": [32, 56], "xytext": 32, "tupl": [32, 63, 70, 77, 87, 89, 115], "005": 32, "circl": [32, 56], "radiu": 32, "sqrt": [32, 66, 117, 120], "add_artist": [32, 33], "line": [32, 41, 56, 65, 117, 125], "step": [32, 36, 40, 41, 45, 47, 55, 65, 70, 86, 87, 88, 89, 115, 117, 123], "y_gen": 32, "z_gen": 32, "nicer": 32, "x_1": [32, 41, 42], "x_2": [32, 41, 42], "651": [32, 34, 114], "plot_illustration_generation_sampl": [32, 34, 114], "few": 33, "class_legend": 33, "legend_el": 33, "mani": [33, 66, 68, 95, 115, 130], "observ": [33, 45, 85, 93, 94, 99, 115], "transpar": 33, "inde": [33, 45, 56], "float": [33, 61, 62, 65, 66, 67, 68, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 91, 94, 95, 96, 98, 102, 117, 123, 124, 125], "overlap": [33, 56], "anymor": [33, 56], "dispers": [33, 56], "forc": [33, 66, 117, 124], "equival": [33, 45, 56, 61, 62, 65, 66, 67, 68, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102], "handi": 33, "manual": [33, 45, 81], "tune": 33, "580": [33, 34, 114], "plot_shrinkage_effect": [33, 34, 114], "549": 34, "04": [34, 48, 52, 75, 114, 130], "individu": 36, "decomposit": [36, 87], "pca": [36, 87], "editednearestneighbour": [36, 40, 61, 90, 91, 92, 96, 97, 99, 100, 105, 115], "n_compon": 36, "disabl": 36, "decision_funct": [36, 65, 67, 68, 87], "375": 36, "875": 36, "566": [36, 37, 114], "plot_pipeline_classif": [36, 37, 114], "clustercentroid": [40, 105, 115, 117, 126, 127, 128], "centroid": [40, 91, 115, 117, 118], "400": 40, "subdivid": 40, "control": [40, 48, 55, 56, 61, 62, 65, 66, 67, 68, 69, 70, 79, 80, 81, 82, 83, 84, 85, 86, 89, 91, 92, 94, 97, 98, 116, 117, 128], "averag": [40, 41, 65, 67, 72, 73, 74, 76, 77, 78, 95, 115, 116, 117, 128], "distanc": [40, 41, 52, 56, 75, 95, 107, 115, 117, 120, 128, 130], "smallest": [40, 41, 115], "farthest": [40, 41, 115], "kept": [40, 115], "largest": [40, 41, 66, 115], "_prototype_select": 40, "_nearmiss": 40, "203": 40, "userwarn": 40, "larger": [40, 51, 52], "ensur": [40, 45, 47, 50, 101, 117, 127], "siev": 40, "principl": [40, 41], "repeatededitednearestneighbour": [40, 90, 92, 93, 105, 115, 117, 122], "allknn": [40, 92, 93, 99, 105, 115, 117, 122, 124], "neighor": 40, "iter": [40, 48, 55, 68, 87, 89, 90, 99, 115, 117, 124], "allow_minor": [40, 90], "condensednearestneighbour": [40, 90, 91, 93, 99, 100, 105, 115, 117, 121, 124], "nn": [40, 41, 47, 55, 81, 92, 95, 96, 97, 101], "decid": [40, 56, 115], "preserv": [40, 117, 124], "onesidedselect": [40, 105, 115, 117, 121, 122], "neighbourhoodcleaningrul": [40, 105, 115, 117, 121, 122, 124], "addition": 40, "agre": [40, 96], "instancehardnessthreshold": [40, 95, 105, 115, 117, 124, 126], "exclud": [40, 72, 76, 77, 78, 90, 93, 96, 99], "probabl": [40, 52, 65, 66, 67, 68, 75, 94, 115], "771": [40, 43, 114], "plot_comparison_under_sampl": [40, 43, 114], "make_plot_despin": [41, 42], "set_xtick": 41, "set_ytick": 41, "upper": 41, "x_minor": [41, 42], "transpos": [41, 42], "55": [41, 42], "x_major": [41, 42], "14": [41, 42, 46, 50, 53, 54, 63, 68, 92, 96, 117, 121, 130], "green": [41, 42, 52, 56, 75, 115], "dash": 41, "smaller": [41, 52, 66], "nearestneighbor": [41, 79, 80, 81, 83, 84, 85, 86, 117, 119], "marker": [41, 42], "nearest_neighbor": 41, "dist": [41, 47], "ind": 41, "kneighbor": [41, 79, 80, 81, 83, 84, 85, 86, 101], "dist_avg": 41, "sum": [41, 66, 81], "positive_idx": 41, "enumer": [41, 45], "make_plot": 41, "sample_idx": 41, "configur": [41, 87], "divid": [41, 115, 117, 120], "short": 41, "selected_idx": 41, "return_dist": 41, "uniqu": [41, 66, 68, 75, 115], "464": [41, 43, 114], "plot_illustration_nearmiss": [41, 43, 114], "what": 42, "abov": [42, 47, 63], "form": [42, 60, 61, 62, 65, 66, 67, 68, 75, 79, 80, 81, 82, 83, 84, 85, 86, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "091": [42, 43, 114], "plot_illustration_tomek_link": [42, 43, 114], "326": 43, "08": [43, 114], "margin": [44, 115], "inlier": [44, 56], "solv": [44, 117, 122], "cleaner": 44, "undersampl": [44, 67, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 116, 130], "bpm04": [44, 130], "bbm03": [44, 130], "former": [44, 115], "64": [44, 46, 63, 71, 115], "262": [44, 115], "4674": [44, 56, 115], "smote_enn": 44, "4060": 44, "4381": 44, "3502": 44, "smote_tomek": 44, "4499": 44, "4566": 44, "4413": 44, "tend": [44, 81], "complement": [45, 46], "misus": 45, "lead": [45, 56, 87, 117, 126, 128], "optimist": 45, "mention": [45, 46], "occur": [45, 47, 117, 122], "entir": [45, 50, 87, 115], "partit": [45, 66], "Such": 45, "potenti": 45, "natur": 45, "either": [45, 51, 52, 56, 66, 69, 70, 85, 89, 102, 103, 115], "typic": [45, 68, 115], "demonstr": 45, "wrong": [45, 117, 123, 125, 126], "emphas": 45, "tool": [45, 49, 108, 116, 117, 127], "fall": 45, "trap": 45, "censu": 45, "sake": 45, "simplic": 45, "wrongdo": 45, "data_id": 45, "1119": 45, "select_dtyp": 45, "988": 45, "keep": [45, 52, 72, 91, 100, 115], "asid": 45, "out": [45, 49, 65, 66, 115], "x_left_out": 45, "y_left_out": 45, "via": [45, 56, 87], "return_train_scor": 45, "return_estim": 45, "dev": [45, 47, 117, 127], "609": 45, "024": 45, "good": [45, 46, 49, 63], "close": [45, 93, 100], "fold_id": 45, "cv_model": 45, "628": 45, "009": 45, "pattern": [45, 65, 72, 117, 123, 130], "come": [45, 50, 90], "724": 45, "042": 45, "698": 45, "gave": 45, "too": [45, 115], "reason": [45, 75, 130], "state": [45, 63, 71, 115, 117, 124, 126], "earlier": 45, "becaus": 45, "deleg": [45, 117, 120], "requir": [45, 56, 65, 66, 67, 68, 70, 74, 86, 87, 88, 115, 117, 120, 123, 124, 128], "732": 45, "019": 45, "727": 45, "008": 45, "veri": 45, "sign": 45, "systemat": 46, "27": [46, 63], "binar": 46, "repositori": [46, 47, 49, 63], "ecoli": [46, 63], "imu": [46, 63], "336": [46, 63], "optical_digit": [46, 63], "620": [46, 63, 117, 126], "435": [46, 63, 117, 125], "pen_digit": [46, 63], "992": [46, 63], "abalon": [46, 63], "177": [46, 63], "sick_euthyroid": [46, 63], "sick": [46, 63], "euthyroid": [46, 63], "163": [46, 63], "spectromet": [46, 63], "44": [46, 52, 63, 74, 75], "car_eval_34": [46, 63], "v": [46, 50, 56, 63, 72, 79, 80, 83, 84, 85, 86, 90, 92, 93, 96, 97, 99, 100, 103, 117, 124, 130], "728": [46, 63], "isolet": [46, 63], "797": [46, 63], "617": [46, 63, 117, 126], "us_crim": [46, 63], "65": [46, 63], "994": [46, 63], "yeast_ml8": [46, 63], "libsvm": [46, 63], "417": [46, 63], "103": [46, 63, 65], "scene": [46, 63], "407": [46, 63], "294": [46, 63], "libras_mov": [46, 63], "360": [46, 63], "thyroid_sick": [46, 63], "772": [46, 63, 100, 130], "coil_2000": [46, 63], "kdd": [46, 63], "coil": [46, 63], "822": [46, 63], "arrhythmia": [46, 63], "452": [46, 63, 90, 99, 117, 124, 130], "solar_flare_m0": [46, 63], "19": [46, 49, 50, 53, 54, 56, 63, 85], "oil": [46, 63], "22": [46, 63, 66, 117, 123], "937": [46, 63], "49": [46, 63], "car_eval_4": [46, 63], "vgood": [46, 63], "26": [46, 63, 87, 117, 118], "wine_qu": [46, 63], "wine": [46, 63], "898": [46, 63], "letter_img": [46, 63], "yeast_me2": [46, 63], "me2": [46, 63], "28": [46, 63, 82, 117, 119, 125, 130], "23": [46, 50, 53, 54, 63, 65, 67, 117, 127], "webpag": [46, 63], "w7a": [46, 63], "780": [46, 63, 117, 128], "24": [46, 63, 65, 115, 130], "ozone_level": [46, 63], "ozon": [46, 63], "536": [46, 63], "72": [46, 63], "mammographi": [46, 63], "183": [46, 63, 117, 122], "protein_homo": [46, 63], "cup": [46, 63], "2004": [46, 61, 63, 65, 66, 130], "145": [46, 63], "751": [46, 63], "abalone_19": [46, 63], "130": [46, 63], "301": 46, "turn": [46, 55, 60, 64, 65, 117, 123], "behaviour": [46, 52, 87, 115], "driven": 46, "behav": 46, "x_imb": 46, "y_imb": 46, "directli": [46, 87, 88, 117, 125], "df_resampl": [46, 56, 115], "setosa": 46, "versicolor": 46, "head": [46, 56, 115], "sepallength": 46, "sepalwidth": 46, "petallength": 46, "petalwidth": 46, "39": [46, 67, 130], "virginica": 46, "help": [47, 115], "locat": 47, "meant": 47, "guarante": 47, "stabl": [47, 117, 118], "backport": 47, "evolv": 47, "write": 47, "accept": [47, 51, 55, 65, 67, 87, 115, 117, 119, 120, 122, 123, 126, 127], "matric": [47, 65, 67, 82, 115, 117, 120, 123, 124, 125], "spars": [47, 60, 61, 62, 65, 66, 67, 68, 71, 79, 80, 81, 82, 83, 84, 85, 86, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 115, 117, 120, 121, 123, 124, 125, 126], "argument": [47, 60, 64, 87, 102, 104, 117, 121, 123, 124, 127], "check_neighbors_object": [47, 105], "consist": [47, 66, 101, 102, 117, 123, 127], "check_target_typ": [47, 105], "conform": [47, 103], "check_sampling_strategi": [47, 105], "pixel": 47, "apart": [47, 56, 85], "deprecate_paramet": 47, "taken": [47, 66, 72, 117, 120], "pleas": [47, 50, 60, 61, 62, 65, 66, 67, 68, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "publicli": 47, "access": [47, 87, 117, 120, 125], "attribut": [47, 55, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 117, 120, 124], "renam": 47, "old": [47, 117, 125], "zero_on": 47, "zero_one_loss": 47, "y_true": [47, 55, 71, 72, 73, 74, 76, 77, 78, 117, 124], "behavior": [47, 56, 61, 117, 124, 130], "properti": [47, 65, 66, 67, 68, 72, 85, 87, 92, 93, 97, 130], "labels_": 47, "self": [47, 60, 61, 62, 65, 66, 67, 68, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "appropri": 47, "example_funct": 47, "deprecationwarn": 47, "messag": [47, 117, 120, 127], "sai": 47, "docstr": [47, 117, 124], "explain": [47, 117, 121], "direct": [47, 56], "On": [47, 56, 74, 130], "necessari": [47, 56, 63, 75, 100, 117, 124], "updat": [47, 60, 61, 62, 65, 66, 67, 68, 69, 70, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 117, 125, 126], "whats_new": 47, "v0": 47, "rst": 47, "date": [47, 49, 115], "statu": 47, "bumpvers": [47, 117, 122], "dev0": [47, 49], "tag": [47, 117, 120], "commit": [47, 50], "git": [47, 50], "am": 47, "branch": 47, "checkout": 47, "push": 47, "upstream": [47, 51], "remot": 47, "symlink": 47, "websit": [47, 117, 128], "latest": [47, 117, 129], "clone": [47, 50, 87, 88, 101, 117, 124], "unlink": 47, "ln": 47, "correctli": [47, 65, 66, 67, 68, 94, 115], "l": [47, 65, 80, 83, 84, 85, 86, 117, 125, 130], "your": [47, 50, 55, 67, 105, 115], "wheel": 47, "setup": [47, 50, 117, 128], "sdist": 47, "bdist_wheel": 47, "upload": [47, 117, 123], "pypi": 47, "twine": 47, "switch": 47, "master": 47, "offici": 47, "click": 47, "draft": 47, "doc": [47, 50, 54], "mark": [47, 56, 104], "conda": [47, 54, 117, 123], "forg": 47, "feedstock": 47, "pr": [47, 117, 121], "synchron": [47, 117, 126], "merg": 47, "hash": 47, "wish": [47, 50], "back": 47, "port": 47, "log": [47, 55, 65, 66, 67, 68], "lastest": 47, "cherri": 47, "pick": [47, 56, 82, 98, 117, 122], "interact": 47, "rebas": 47, "bump": 47, "patch": [47, 50, 65], "oppos": 47, "dirti": 47, "favor": [48, 51, 117, 121, 123, 124], "10000": 48, "bc": 48, "doctest": [48, 117, 122], "77": [48, 71], "further": [48, 107], "bbc": [48, 65], "mo97": [48, 130], "hkt09": [48, 130], "wy09": [48, 130], "practic": [48, 87, 116], "clb": [48, 130], "advantag": [48, 87, 88, 117, 126], "design": [48, 56, 85, 130], "skvhn09": [48, 130], "easyensembl": [48, 67, 117, 118, 122, 124, 126], "lwz08": [48, 130], "construct": [48, 60, 65, 66, 88], "jan": 49, "2024": 49, "instal": [49, 54, 66, 117, 121], "idea": [49, 115], "q": 49, "open": 49, "librari": 49, "reli": [49, 50, 56, 101], "guid": [49, 50, 60, 61, 62, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 107, 117, 123, 125], "extra": [49, 56], "contribut": [49, 68, 117, 125], "guidelin": [49, 116], "user": [49, 60, 61, 62, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 107, 115, 117, 118, 120, 123, 124], "depth": [49, 55, 66, 117, 125], "concept": 49, "background": 49, "explan": 49, "descript": [49, 63], "place": 49, "action": 49, "dive": 49, "complet": [50, 87, 88], "tabl": [50, 52, 63], "minimum": [50, 52, 54, 66], "scipi": [50, 51, 54, 117, 125], "joblib": [50, 54, 61, 62, 65, 66, 67, 79, 80, 81, 83, 84, 85, 86, 87, 88, 90, 92, 93, 94, 95, 96, 97, 99, 100, 117, 127], "threadpoolctl": [50, 54], "cython": [50, 54], "29": [50, 53, 54, 61, 75, 117, 128, 130], "memory_profil": [50, 54], "57": [50, 53, 54], "pytest": [50, 54, 104, 117, 123, 124], "cov": [50, 54], "ruff": [50, 54], "272": [50, 53, 54], "black": [50, 54], "mypi": [50, 54], "pyamg": [50, 54], "polar": [50, 54, 87], "pyarrow": [50, 54], "copybutton": [50, 54], "numpydoc": [50, 54], "pillow": [50, 54], "pooch": [50, 54], "prompt": [50, 54], "sphinxext": [50, 54], "opengraph": [50, 54], "plotli": [50, 54], "lock": [50, 54], "mainten": [50, 54, 119, 120], "pip": 50, "releas": [50, 116, 118, 119, 120, 124, 126, 129], "mamba": 50, "hardwar": 50, "blog": 50, "post": 50, "instruct": 50, "prefer": 50, "command": [50, 117, 125], "copi": [50, 51], "contrib": 50, "cd": 50, "mode": [50, 66, 90, 93, 96, 99, 115], "isol": 50, "pull": 50, "request": [50, 65, 66, 67, 68, 87], "advis": 50, "sure": [50, 117, 119], "unit": [50, 117, 123], "obj": 51, "data_resampl": 51, "targets_resampl": 51, "ndarrai": [51, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103], "csr_matrix": [51, 66], "csc_matrix": [51, 66], "unlik": [51, 85], "compress": 51, "row": [51, 52, 115], "represent": 51, "being": [51, 56, 66, 77, 94, 99, 102, 115, 117, 120], "fed": 51, "unnecessari": 51, "recommend": [51, 116], "choos": 51, "csr": [51, 66, 68, 117, 123], "phase": [51, 95, 96], "level": [51, 52, 55, 74, 94, 130], "greatli": 51, "upon": 51, "medic": 52, "rate": [52, 68], "field": 52, "pair": [52, 100], "sensitivity_specificity_support": [52, 105], "sensitivity_scor": [52, 105], "specificity_scor": [52, 105], "possibl": [52, 55, 56, 60, 61, 62, 65, 66, 67, 68, 75, 79, 80, 81, 82, 83, 84, 85, 86, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 115, 117, 124, 125, 128], "bsanchezgr03": [52, 130], "km": [52, 130], "wise": [52, 72], "measur": [52, 66, 72, 115, 130], "maxim": [52, 72], "garciasanchezm12": [52, 130], "rank": 52, "among": [52, 56], "movi": 52, "macro_averaged_mean_absolute_error": [52, 105, 117, 128], "ebs09": [52, 130], "per": [52, 69, 70, 75, 82, 85, 89, 92, 97], "output_dict": [52, 71, 117, 120, 128], "instanc": [52, 55, 56, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 116, 117, 118, 119, 130], "bottom": 52, "submodul": [52, 112, 117, 123, 125], "valuedifferencemetr": [52, 56, 105, 117, 128], "sw86": [52, 130], "proxim": 52, "correl": 52, "closer": [52, 68], "wm97": [52, 130], "repres": [52, 56, 65, 67, 115], "whether": [52, 60, 63, 65, 66, 67, 68, 96, 98, 100], "appl": [52, 56], "red": [52, 56, 75], "blue": [52, 56, 75], "x_encod": [52, 75], "three": [52, 56], "vdm": [52, 56, 75], "x_test_encod": [52, 75], "whenev": [52, 117, 124], "much": 52, "mathemat": [52, 116], "formul": [52, 116], "delta": [52, 75], "sum_": [52, 75], "y_": [52, 72, 75, 76, 77, 78], "condit": [52, 75], "expon": [52, 75, 81], "fast": [55, 75, 108, 115], "prototyp": [55, 105, 108, 116], "own": [55, 66, 67, 105], "retain": [55, 65, 66, 67, 68, 87, 94, 115], "element": [55, 66], "make_regress": 55, "x_reg": 55, "y_reg": 55, "dummy_sampl": 55, "41": 55, "49112498": 55, "142": 55, "78526195": 55, "55095317": 55, "141": 55, "43321419": 55, "46571114": 55, "49177372": 55, "159": 55, "72700509": 55, "169": 55, "80498923": 55, "95889757": 55, "balanced_batch_gener": [55, 105], "float32": [55, 66], "steps_per_epoch": [55, 70, 89], "sample_weight": [55, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 87, 89], "descent": 55, "initi": [55, 68, 117, 122], "intercept": 55, "normal_initi": 55, "random_normal_initi": 55, "stddev": 55, "coef": 55, "logistic_regress": 55, "softmax": [55, 69, 70], "matmul": 55, "cross_entropi": 55, "one_hot": 55, "clip_by_valu": 55, "1e": 55, "reduce_mean": 55, "reduce_sum": 55, "math": 55, "cm": 55, "confusion_matrix": [55, 65, 67], "cast": 55, "per_class": 55, "diag": 55, "sgd": [55, 69, 70], "learning_r": [55, 68], "run_optim": 55, "gradienttap": 55, "apply_gradi": 55, "minim": [55, 66], "bal_acc": 55, "x_batch": [55, 70, 89], "y_batch": [55, 70, 89], "next": [55, 56, 115], "higher": [55, 66, 68, 72, 82, 115, 117, 124], "fit_gener": [55, 70], "to_categor": [55, 69, 70], "input_dim": [55, 69, 70], "categorical_crossentropi": [55, 69, 70], "callback_histori": [55, 69, 70], "One": [56, 85, 116, 117, 118], "scheme": [56, 61, 62, 79, 80, 83, 84, 85, 86, 90, 93, 96, 97, 99, 100], "augment": 56, "consequ": 56, "heterogen": [56, 82, 98, 115, 117, 124, 130], "x_hetero": [56, 115], "xxx": [56, 115], "yyi": [56, 115], "zzz": [56, 115], "y_hetero": [56, 115], "df_adult": [56, 115], "y_adult": [56, 115], "rose": [56, 82, 117, 128], "mt14": [56, 130], "oversampl": [56, 79, 80, 81, 82, 83, 84, 85, 86, 130], "techniqu": [56, 80, 83, 84, 85, 86, 116, 117, 118, 122, 130], "cbhk02": [56, 130], "adapt": [56, 79, 117, 118, 123, 130], "hbgl08": [56, 130], "clf_smote": 56, "4673": 56, "4662": 56, "clf_adasyn": 56, "duplic": 56, "wrongli": [56, 117, 124], "basic": [56, 105], "hard": [56, 91, 94, 116, 117, 118, 128], "peculiar": 56, "sole": 56, "sub": [56, 65, 66, 67, 68, 87], "option": [56, 65, 66, 67, 68, 71, 72, 80, 82, 87, 103, 117, 124, 128], "opposit": 56, "hwm05": [56, 130], "nck09": [56, 130], "ldb17": [56, 130], "extens": 56, "treat": 56, "boolean": [56, 100], "mask": [56, 85], "infer": [56, 85, 117, 120], "categoricaldtyp": [56, 85], "37": 56, "euclidean": [56, 117, 120], "common": [56, 116, 117, 127], "strongli": 56, "neareast": 56, "frequent": 56, "ahead": [56, 69, 70, 89], "cf": 56, "impos": [56, 117, 124, 127], "up": [56, 66, 115, 117, 120, 126], "danger": [56, 80, 86], "least": [56, 66, 72, 115], "half": [56, 117, 124], "iii": [56, 99], "neighborhood": [56, 79, 80, 81, 83, 84, 85, 86], "m_neighbor": [56, 80, 86, 117, 122, 124, 126], "area": 56, "inter": 56, "against": 56, "insid": [59, 65, 66, 67, 68, 87], "accept_spars": 60, "callabl": [60, 61, 62, 64, 65, 66, 67, 68, 74, 79, 80, 81, 82, 83, 84, 85, 86, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 117, 123], "read": [60, 61, 62, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "kwarg": [60, 64, 87, 102], "forward": [60, 87], "bool": [60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 103, 117, 120], "dict": [60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 117, 124], "keyword": [60, 62, 64, 87, 102, 104, 117, 127, 130], "bypass": 60, "off": [60, 68, 117, 123], "sampling_strategy_": [60, 61, 62, 79, 80, 81, 82, 83, 84, 85, 86, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "n_features_in_": [60, 61, 62, 65, 66, 67, 68, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "feature_names_in_": [60, 61, 62, 65, 66, 67, 68, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 117, 119], "functiontransfom": 60, "stateless": 60, "ten": 60, "matrix": [60, 61, 62, 64, 65, 66, 67, 68, 71, 79, 80, 81, 82, 83, 84, 85, 86, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 115], "itself": [60, 61, 62, 75, 79, 80, 81, 82, 83, 84, 85, 86, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "n_samples_new": [60, 61, 62, 64, 79, 80, 81, 82, 83, 84, 85, 86, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "get_feature_names_out": [60, 61, 62, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 117, 119], "input_featur": [60, 61, 62, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "str": [60, 61, 62, 63, 65, 66, 67, 68, 71, 72, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 117, 120], "x0": [60, 61, 62, 79, 80, 81, 82, 83, 84, 85, 86, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "x1": [60, 61, 62, 79, 80, 81, 82, 83, 84, 85, 86, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "must": [60, 61, 62, 68, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "match": [60, 61, 62, 71, 79, 80, 81, 82, 83, 84, 85, 86, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "feature_names_out": [60, 61, 62, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "get_metadata_rout": [60, 61, 62, 65, 66, 67, 68, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "metadata": [60, 61, 62, 65, 66, 67, 68, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 117, 121], "rout": [60, 61, 62, 65, 66, 67, 68, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 117, 121], "mechan": [60, 61, 62, 65, 66, 67, 68, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "metadatarequest": [60, 61, 62, 66, 75, 79, 80, 81, 82, 83, 84, 85, 86, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "encapsul": [60, 61, 62, 66, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "get_param": [60, 61, 62, 65, 66, 67, 68, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "deep": [60, 61, 62, 65, 66, 67, 68, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "subobject": [60, 61, 62, 65, 66, 67, 68, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "param": [60, 61, 62, 65, 66, 67, 68, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "map": [60, 61, 62, 65, 66, 67, 68, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "simpl": [60, 61, 62, 64, 65, 66, 67, 68, 75, 79, 80, 81, 82, 83, 84, 85, 86, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "nest": [60, 61, 62, 65, 66, 67, 68, 75, 79, 80, 81, 82, 83, 84, 85, 86, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "latter": [60, 61, 62, 65, 66, 67, 68, 75, 79, 80, 81, 82, 83, 84, 85, 86, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 115], "compon": [60, 61, 62, 65, 66, 67, 68, 72, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "__": [60, 61, 62, 65, 66, 67, 68, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "so": [60, 61, 62, 65, 66, 67, 68, 75, 79, 80, 81, 82, 83, 84, 85, 86, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 117, 122], "express": [61, 62, 65, 66, 67, 68, 74, 79, 80, 81, 82, 83, 84, 85, 86, 91, 94, 95, 98], "multi": [61, 62, 65, 66, 67, 68, 72, 79, 80, 81, 82, 83, 84, 85, 86, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 116, 117, 123], "seed": [61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 79, 80, 81, 82, 83, 84, 85, 86, 89, 91, 92, 94, 97, 98], "cpu": [61, 62, 65, 66, 67, 79, 80, 81, 83, 84, 85, 86, 90, 92, 93, 94, 95, 96, 97, 99, 100], "core": [61, 62, 65, 66, 67, 79, 80, 81, 83, 84, 85, 86, 90, 92, 93, 94, 95, 96, 97, 99, 100], "loop": [61, 62, 65, 66, 67, 79, 80, 81, 83, 84, 85, 86, 90, 92, 93, 94, 95, 96, 97, 99, 100], "unless": [61, 62, 65, 66, 67, 79, 80, 81, 83, 84, 85, 86, 90, 92, 93, 94, 95, 96, 97, 99, 100], "parallel_backend": [61, 62, 65, 66, 67, 79, 80, 81, 83, 84, 85, 86, 90, 92, 93, 94, 95, 96, 97, 99, 100], "context": [61, 62, 65, 66, 67, 79, 80, 81, 83, 84, 85, 86, 90, 92, 93, 94, 95, 96, 97, 99, 100, 117, 128], "processor": [61, 62, 65, 66, 67, 79, 80, 81, 83, 84, 85, 86, 90, 92, 93, 94, 95, 96, 97, 99, 100], "glossari": [61, 62, 65, 66, 67, 79, 80, 81, 83, 84, 85, 86, 90, 92, 93, 94, 95, 96, 97, 99, 100], "smote_": [61, 62], "enn_": [61, 90, 99], "batista": [61, 62, 130], "prati": [61, 130], "monard": [61, 62, 130], "acm": [61, 75, 130], "sigkdd": [61, 130], "explor": [61, 130], "newslett": [61, 130], "900": [61, 62, 65, 67, 79, 80, 82, 83, 85, 86, 87, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100], "sme": 61, "881": 61, "tomek_": 62, "bazzan": [62, 130], "autom": [62, 130], "wob": [62, 130], "2003": [62, 72, 95, 130], "smt": [62, 87], "data_hom": 63, "filter_data": 63, "download_if_miss": 63, "zenodo": 63, "cach": [63, 87, 88], "scikit_learn_data": 63, "subfold": 63, "ioerror": 63, "local": [63, 79], "try": 63, "ordereddict": 63, "bunch": [63, 87, 117, 126], "descr": 63, "111": 63, "ding": 63, "zejin": 63, "diversifi": 63, "highli": [63, 72], "bioinformat": 63, "dissert": 63, "georgia": 63, "univers": [63, 65, 66, 130], "2011": 63, "visual": 64, "max_featur": [65, 66], "bootstrap_featur": 65, "oob_scor": [65, 66], "warm_start": [65, 66, 67], "serv": 65, "basi": [65, 72], "variou": [65, 87, 92, 113], "exactli": 65, "roughli": [65, 130], "drawn": [65, 66, 67, 82], "solut": [65, 66, 67], "just": [65, 66, 67], "whole": [65, 66, 67, 117, 120], "estimator_": [65, 66, 67, 68, 91, 92, 94, 97, 117, 121], "grown": [65, 66, 67, 68], "n_features_": [65, 66, 67, 85], "estimators_": [65, 66, 67, 68, 92, 97, 117, 121], "sampler_": [65, 69], "estimators_samples_": [65, 66, 67], "estimators_features_": [65, 67], "n_classes_": [65, 66, 67, 68], "oob_score_": [65, 66], "oob_decision_function_": [65, 66], "never": [65, 66], "nan": [65, 66], "were": [65, 66, 67, 115, 117, 123, 124], "round": [65, 66, 67, 71, 90, 115], "breiman": [65, 66, 130], "past": 65, "vote": [65, 66, 67, 91, 96, 117, 128], "databas": 65, "1999": 65, "predictor": 65, "140": 65, "1996": 65, "t": [65, 66, 67, 68, 96, 115], "ho": 65, "subspac": 65, "832": 65, "844": 65, "1998": 65, "loupp": 65, "geurt": 65, "discoveri": [65, 82, 130], "346": 65, "361": 65, "2012": [65, 74, 130], "chen": [65, 66, 130], "chao": [65, 66, 130], "liaw": [65, 66, 130], "california": [65, 66, 130], "berkelei": [65, 66, 130], "110": [65, 66, 130], "225": [65, 67, 94, 130], "base_estimator_": [65, 67], "older": [65, 67], "appear": [65, 67], "special": [65, 67, 68], "dynam": [65, 66, 67], "member": [65, 66, 67], "re": [65, 66, 67, 95], "footprint": [65, 66, 67], "mai": [65, 66, 67, 87, 115, 117, 129], "notimplementederror": [65, 67, 68], "yet": [65, 67, 68], "highest": [65, 66, 67, 94], "resort": [65, 67], "predict_log_proba": [65, 66, 67, 68, 87], "harsh": [65, 66, 67, 68], "n_output": [65, 66, 67, 68, 73], "set_fit_request": [65, 66, 67, 68], "union": [65, 66, 67, 68, 87, 115], "unchang": [65, 66, 67, 68, 81, 87], "relev": [65, 66, 67, 68, 87], "enable_metadata_rout": [65, 66, 67, 68, 87], "set_config": [65, 66, 67, 68, 87], "meta": [65, 66, 67, 68, 87, 117, 124], "alia": [65, 66, 67, 68, 87, 117, 124], "metadata_rout": [65, 66, 67, 68, 87], "exist": [65, 66, 67, 68, 87, 115], "set_score_request": [65, 66, 67, 68, 87], "gini": [66, 68], "max_depth": [66, 68, 117, 125], "min_samples_split": 66, "min_samples_leaf": [66, 117, 127], "min_weight_fraction_leaf": 66, "max_leaf_nod": 66, "min_impurity_decreas": 66, "class_weight": 66, "ccp_alpha": [66, 117, 126], "monotonic_cst": 66, "classic": 66, "entropi": 66, "criteria": [66, 117, 122], "impur": [66, 68], "gain": 66, "maximum": [66, 68, 90, 99, 115], "node": [66, 117, 124], "expand": 66, "until": [66, 115], "leav": [66, 81], "pure": 66, "percentag": 66, "ceil": 66, "leaf": 66, "fraction": 66, "log2": 66, "stop": [66, 68, 90, 99, 115, 117, 122], "grow": 66, "fashion": [66, 103], "rel": 66, "reduct": [66, 68], "unlimit": 66, "equat": 66, "n_t": 66, "n_t_r": 66, "right_impur": 66, "n_t_l": 66, "left_impur": 66, "child": 66, "care": 66, "balanced_subsampl": 66, "class_label": 66, "suppos": 66, "multioutput": 66, "multilabel": [66, 72, 76, 77, 78, 103, 117, 124], "everi": [66, 69, 100], "four": 66, "automat": [66, 74, 85, 88, 117, 119, 120, 123], "adjust": 66, "bincount": 66, "except": [66, 117, 123], "complex": [66, 94, 130], "prune": 66, "subtre": 66, "chosen": 66, "interv": 66, "monoton": [66, 117, 121], "constraint": [66, 117, 121], "enforc": 66, "n_outputs_": 66, "hold": 66, "valueerror": 66, "templat": [66, 117, 125, 128], "base_sampler_": [66, 68], "samplers_": [66, 68], "pipelines_": [66, 68], "feature_importances_": [66, 68], "andi": [66, 130], "leo": [66, 130], "x_leav": 66, "datapoint": 66, "decision_path": 66, "path": [66, 87, 88], "n_node": 66, "goe": [66, 115], "n_nodes_ptr": 66, "th": 66, "brought": [66, 68], "mislead": [66, 68], "cardin": [66, 68], "permutation_import": [66, 68], "net": 66, "carri": [66, 115], "That": 66, "across": [66, 117, 128], "inner": [67, 116], "describ": [67, 81, 117, 124], "liu": [67, 130], "j": [67, 68, 72, 96], "wu": [67, 130], "zhou": [67, 130], "exploratori": [67, 130], "transact": [67, 68, 90, 92, 93, 99, 100, 130], "system": [67, 68, 74, 90, 93, 99, 100, 117, 125, 130], "man": [67, 68, 90, 93, 99, 100, 130], "cybernet": [67, 68, 90, 99, 100, 130], "vol": [67, 90, 92, 93, 97, 99, 100], "pp": [67, 72, 79, 82, 86, 90, 92, 93, 97, 99, 100], "539": [67, 117, 125, 130], "550": [67, 130], "april": 67, "built": 68, "proper": [68, 117, 127], "termin": 68, "perfect": 68, "earli": [68, 90], "shrink": 68, "There": [68, 117, 124], "trade": 68, "base_estim": [68, 117, 119], "calcul": [68, 72, 76, 77, 78], "discret": 68, "converg": 68, "faster": 68, "fewer": 68, "becom": [68, 90, 99, 115, 117, 122], "estimator_weights_": 68, "estimator_errors_": 68, "seiffert": [68, 130], "khoshgoftaar": [68, 130], "van": [68, 130], "huls": [68, 130], "napolitano": [68, 130], "hybrid": [68, 130], "human": [68, 130], "2010": 68, "185": [68, 130], "197": [68, 130], "csc": 68, "coo": [68, 117, 125], "dok": 68, "lil": 68, "staged_decision_funct": 68, "monitor": 68, "determin": [68, 72, 76, 77, 78, 80, 81, 86, 115], "staged_predict": 68, "stage": [68, 87, 117, 124], "staged_predict_proba": 68, "staged_scor": 68, "keep_spars": [69, 70, 89], "sequenc": 69, "sample_indices_": [69, 70, 82, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 117, 124], "conserv": [69, 70, 89, 90, 93, 96, 99, 115], "sparsiti": [69, 70, 89], "indices_": 69, "class_dict": [69, 70], "on_epoch_end": 69, "sampler_weight_batch": [70, 89], "target_nam": [71, 117, 120], "digit": 71, "zero_divis": 71, "art": 71, "1d": 71, "ground": [71, 72, 73, 76, 77, 78], "truth": [71, 72, 73, 76, 77, 78], "n_label": 71, "divis": 71, "act": 71, "structur": 71, "61": 71, "66": [71, 77, 78, 130], "54": 71, "worst": [72, 76, 78], "tradition": 72, "unrecogn": 72, "resolv": [72, 117, 126], "pred": [72, 76, 77, 78], "micro": [72, 76, 77, 78], "global": [72, 76, 77, 78], "unweight": [72, 76, 77, 78], "No": 72, "alter": [72, 76, 77, 78, 115], "meaning": [72, 76, 77, 78], "accuracy_scor": [72, 76, 77, 78], "substitut": [72, 117, 119], "geometric_mean": 72, "kubat": [72, 97, 130], "matwin": [72, 97, 130], "address": [72, 97, 130], "side": [72, 97, 116, 117, 118, 130], "icml": [72, 97, 130], "barandela": [72, 130], "s\u00e1nchez": [72, 74], "garc\u0131a": 72, "rangel": [72, 130], "849": [72, 130], "851": [72, 130], "001": 72, "471": 72, "866": 72, "mae": [73, 116, 117, 128], "mean_absolute_error": 73, "y_true_balanc": 73, "y_true_imbalanc": 73, "factori": 74, "y_score": [74, 87], "domin": 74, "iba_scoring_func": 74, "garc\u00eda": 74, "vicent": [74, 130], "javier": 74, "salvador": [74, 130], "ram\u00f3n": 74, "alberto": [74, 130], "mollineda": [74, 130], "gmean": 74, "pairwis": [75, 105, 116, 117, 128], "n_categori": 75, "propo": 75, "categories_": 75, "deduc": 75, "n_categories_": 75, "proba_per_class_": 75, "length": [75, 81], "distancemetr": 75, "interfac": [75, 88], "stanfil": [75, 130], "craig": [75, 130], "david": [75, 130], "waltz": [75, 130], "commun": [75, 130], "1986": [75, 130], "1213": [75, 130], "1228": [75, 130], "pairwise_dist": 75, "distance_matrix": 75, "tp": [76, 77], "fn": [76, 77], "quantifi": [76, 77, 78], "n_unique_label": [76, 77, 78], "specifc": 76, "warn_for": 77, "negatives_": 77, "tn": [77, 78], "fp": [77, 78], "positives_": 77, "occurr": 77, "wikipedia": 77, "entri": [77, 117, 120], "cat": 77, "dog": 77, "pig": 77, "kneighbors_graph": [79, 80, 81, 83, 84, 85, 86], "extend": [79, 80, 81, 83, 84, 85, 86, 115, 117, 123], "nn_": [79, 90, 93, 95, 96, 99], "he": [79, 130], "haibo": [79, 130], "yang": [79, 130], "bai": [79, 130], "edwardo": [79, 130], "garcia": [79, 130], "shutao": [79, 130], "li": [79, 117, 122, 130], "joint": [79, 130], "confer": [79, 130], "neural": [79, 130], "network": [79, 130], "world": [79, 130], "congress": [79, 130], "1322": [79, 130], "1328": [79, 130], "2008": [79, 130], "ada": 79, "904": 79, "nn_k_": [80, 81, 83, 84, 85, 86], "nn_m_": [80, 86], "in_danger_indic": 80, "chawla": [80, 83, 84, 85, 86, 130], "bowyer": [80, 83, 84, 85, 86, 130], "hall": [80, 83, 84, 85, 86, 130], "kegelmey": [80, 83, 84, 85, 86, 130], "artifici": [80, 83, 84, 85, 86, 130], "321": [80, 83, 84, 85, 86, 117, 123, 130], "357": [80, 83, 84, 85, 86, 130], "2002": [80, 83, 84, 85, 86, 130], "han": [80, 130], "wen": [80, 130], "yuan": [80, 130], "bing": [80, 130], "huan": [80, 130], "advanc": [80, 117, 127], "878": [80, 130], "887": [80, 90, 93, 99, 117, 119, 130], "2005": [80, 130], "sm": [80, 81, 83, 85, 86], "cluster_balance_threshold": 81, "density_expon": 81, "kmeans_estimator_": 81, "cluster_balance_threshold_": 81, "felix": [81, 130], "georgio": [81, 130], "douza": [81, 130], "bacao": [81, 130], "arxiv": [81, 130], "ab": 81, "1711": [81, 130], "00837": [81, 130], "800": 81, "middl": 81, "concaten": 81, "n_res_in_middl": 81, "801": [81, 117, 128], "covari": 82, "n_new_sampl": [82, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100], "shrinkage_": 82, "menardi": [82, 130], "torelli": [82, 130], "assess": [82, 130], "122": [82, 130], "categorical_encod": [84, 85, 117, 120], "nomin": [84, 85], "categorical_encoder_": [84, 85, 117, 120], "n_cat_featur": 85, "ohe_": [85, 117, 120], "categorical_features_": 85, "continuous_features_": 85, "n_cont_featur": 85, "median_std_": 85, "median": [85, 117, 120, 124, 127], "deviat": [85, 117, 120, 124, 127], "simul": 85, "svm_estim": [86, 117, 124, 126], "out_step": [86, 117, 124, 126], "svc": 86, "expos": [86, 91, 117, 120, 124], "support_": 86, "extrapol": 86, "svm_estimator_": 86, "nguyen": [86, 130], "cooper": [86, 130], "kamei": [86, 130], "engin": 86, "soft": [86, 91], "paradigm": 86, "intermedi": 87, "assembl": 87, "enabl": [87, 88, 117, 124], "passthrough": 87, "chain": [87, 110], "directori": [87, 88], "trigger": [87, 88], "named_step": [87, 88], "consum": [87, 88], "surpris": 87, "break": [87, 117, 124], "contract": 87, "estimm": 87, "semant": 87, "tt": 87, "y_hat": 87, "250": 87, "fulfil": 87, "certain": 87, "prefix": 87, "s__p": 87, "fit_predict": 87, "uncertainti": 87, "return_std": 87, "return_cov": 87, "propag": 87, "xt": 87, "n_transformed_featur": 87, "yt": 87, "metadatarout": 87, "constructor": [87, 88], "inverse_transform": [87, 117, 124], "revers": 87, "y_log_proba": 87, "score_sampl": 87, "set_output": 87, "prior": [87, 88], "shorthand": 88, "permit": 88, "lowercas": 88, "gaussiannb": 88, "kind_sel": [90, 93, 96, 99, 115, 117, 121], "begin": 90, "closest": [90, 93, 99, 115], "incras": 90, "whichev": 90, "neigbhour": [90, 115], "inherit": [90, 92, 93, 95, 96, 97, 99], "kneighborsmixin": [90, 92, 93, 95, 96, 97, 99, 101, 115, 117, 122], "condens": [90, 91, 92, 93, 99, 100, 116, 130], "448": [90, 99, 130], "june": [90, 99, 117, 125, 127], "1976": [90, 99, 100, 130], "coordin": 91, "cluster_centers_": 91, "voting_": 91, "cc": [91, 115], "n_seeds_": [92, 97, 115], "extract": [92, 95, 97, 117, 118, 130], "n_resampled_class": [92, 97], "hart": [92, 130], "theori": [92, 130], "515": [92, 130], "516": [92, 130], "1968": [92, 130], "diabet": 92, "tested_neg": 92, "tested_posit": 92, "268": 92, "cnn": [92, 100, 115, 130], "181": [92, 115], "neighour": 93, "wilson": [93, 130], "asymptot": [93, 130], "cybernetr": 93, "408": [93, 130], "421": [93, 130], "1972": [93, 130], "smith": [94, 130], "michael": [94, 117, 125, 130], "toni": [94, 130], "martinez": [94, 130], "christoph": [94, 130], "giraud": [94, 130], "carrier": [94, 130], "256": [94, 130], "iht": [94, 115], "n_neighbors_ver3": [95, 115], "zhang": [95, 130], "unbalanc": [95, 130], "involv": [95, 130], "proceed": [95, 130], "workshop": [95, 130], "nm": 95, "edited_nearest_neighbour": 96, "threshold_clean": [96, 117, 121], "ci": 96, "theta": 96, "edited_nearest_neighbours_": 96, "classes_to_clean_": 96, "laurikkala": [96, 130], "identif": [96, 130], "springer": [96, 130], "berlin": 96, "heidelberg": 96, "2001": [96, 130], "ncr": [96, 115], "888": 96, "179": [97, 130], "186": [97, 130], "oss": [97, 115], "496": 97, "repetit": [99, 115], "iv": 99, "disappear": [99, 115, 117, 122], "n_iter_": 99, "renn": [99, 115], "modif": [100, 130], "769": [100, 117, 128, 130], "897": 100, "static": 100, "is_tomek": 100, "nn_index": 100, "class_typ": 100, "track": 100, "nn_name": 101, "nn_object": 101, "additional_neighbor": 101, "initialis": 101, "integ": [101, 115], "said": 101, "sometim": 101, "sampling_typ": 102, "basesampl": 102, "sampling_strategy_convert": 102, "indicate_one_vs_al": 103, "is_one_vs_al": 103, "indicate_multilabel": 103, "estimator_check": 104, "pprint": 104, "test_check_estim": 104, "check_estimators_fit_returns_self": 104, "decisiontreeregressor": 104, "test_sklearn_compatible_estim": 104, "miscellan": [105, 116], "parametrize_with_check": 105, "composit": 110, "prototype_gener": [112, 117, 123], "prototype_select": [112, 117, 123], "367": [114, 117, 124], "But": 115, "And": 115, "discuss": 115, "throughout": 115, "remain": [115, 117, 122], "synthes": 115, "effici": 115, "mind": 115, "ineffici": 115, "contrast": 115, "192": 115, "etc": 115, "mz03": [115, 130], "nm1": 115, "x_resampled_nm1": 115, "deriv": [115, 117, 123], "presenc": 115, "around": 115, "yellow": 115, "rather": 115, "imagin": 115, "tom76b": [115, 130], "suitabl": 115, "discrimin": 115, "wherea": 115, "methodologi": 115, "wil72": [115, 130], "213": 115, "4568": 115, "paraphras": 115, "234": 115, "4666": 115, "subclass": 115, "third": 115, "tom76a": [115, 130], "delet": 115, "208": 115, "4551": 115, "variat": 115, "220": 115, "4601": 115, "har68": [115, 130], "misclassifi": [115, 117, 122], "success": 115, "115": 115, "attempt": [115, 117, 120], "introduc": [115, 117, 124], "plu": 115, "174": 115, "4404": 115, "put": [115, 117, 122], "lau01": [115, 130], "193": 115, "4535": 115, "fundament": 115, "produc": 115, "logic": 115, "smgc14": [115, 130], "Or": 115, "caveat": 115, "statement": 116, "ill": 116, "pose": 116, "manag": [116, 117, 128], "absolut": 116, "ma": 116, "pitfal": 116, "leakag": 116, "bug": 116, "1012": [117, 121], "1058": [117, 121], "1011": [117, 121], "1059": [117, 121], "ts2095": [117, 121], "plug": [117, 120], "1014": [117, 120], "1016": [117, 120], "1015": [117, 120], "null": [117, 120, 127], "juli": [117, 120], "2023": [117, 120], "989": [117, 120], "ayy7": [117, 120], "convers": [117, 120], "1002": [117, 120], "1003": [117, 120], "spuriou": [117, 120], "1007": [117, 120, 130], "999": [117, 120], "1006": [117, 120], "1001": [117, 120], "1004": [117, 120], "1008": [117, 120], "glemaitr": [117, 120, 124], "1009": [117, 120], "decemb": [117, 118, 119, 126], "2022": [117, 119, 129], "unvalid": [117, 119], "964": [117, 119], "prakhyath": [117, 119], "bhandari": [117, 119], "oo": [117, 119], "953": [117, 119], "bu": [117, 119], "946": [117, 119], "947": [117, 119], "949": [117, 119], "955": [117, 119], "959": [117, 119], "duck": [117, 119], "cuml": [117, 119], "858": [117, 119], "nv": [117, 119], "jpt": [117, 119], "januari": [117, 122, 129], "septemb": [117, 128], "2020": [117, 126, 127, 128], "864": [117, 128], "februari": [117, 123, 126, 128], "2021": [117, 128], "aur\u00e9lien": [117, 128], "massiot": [117, 128], "796": [117, 128], "802": [117, 128], "unlock": [117, 128], "808": [117, 128], "770": [117, 128], "754": [117, 128], "andrea": [117, 128], "lorenzon": [117, 128], "790": [117, 128], "favour": [117, 128], "extras_requir": [117, 128], "816": [117, 128], "pydata": [117, 128], "theme": [117, 128], "815": [117, 128], "687": [117, 127], "refactor": [117, 124, 127], "710": [117, 127], "721": [117, 127], "711": [117, 127], "zerolfx": [117, 127], "unus": [117, 127], "720": [117, 127], "675": [117, 127], "bganglia": [117, 127], "718": [117, 127], "lazi": [117, 127], "719": [117, 127], "673": [117, 126], "plain": [117, 126], "681": [117, 126], "2019": [117, 125, 126], "primarili": [117, 126], "bad": [117, 126], "oob": [117, 126], "656": [117, 126], "determinist": [117, 124, 126], "cross_val_predict": [117, 126], "parallel": [117, 126], "599": [117, 126], "shihab": [117, 126], "shahriar": [117, 126], "khan": [117, 126], "privat": [117, 124, 126], "_base": [117, 126], "_set_random_st": [117, 126], "_forest": [117, 126], "_parallel_build_tre": [117, 126], "_classif": [117, 126], "_check_target": [117, 126], "_prf_divid": [117, 126], "_safe_index": [117, 126], "_test": [117, 126], "assert_allclos": [117, 126], "assert_array_equ": [117, 126], "skiptest": [117, 126], "621": [117, 126], "636": [117, 126], "637": [117, 126], "finit": [117, 126], "643": [117, 126], "644": [117, 126], "speed": [117, 126], "596": [117, 126], "649": [117, 126], "matt": [117, 126], "ed": [117, 126], "cycl": [117, 122, 126], "balancecascad": [117, 118, 122, 123, 124, 126], "check_ratio": [117, 123, 126], "return_indic": [117, 124, 126], "stump": [117, 125], "525": [117, 125], "ariel": [117, 125], "rossanigo": [117, 125], "documen": [117, 125], "530": [117, 125], "parallelis": [117, 125], "547": [117, 125], "hsieh": [117, 125], "_show_vers": [117, 125], "557": [117, 125], "alexand": [117, 125], "hay": [117, 125], "stephan": [117, 125], "heijl": [117, 125], "576": [117, 125], "move": [117, 122, 123, 125], "stack": [117, 125], "554": [117, 125], "oliv": [117, 125], "rausch": [117, 125], "578": [117, 125], "weak": [117, 125], "545": [117, 125], "octob": [117, 124], "2018": [117, 123, 124], "491": [117, 124], "490": [117, 124], "densifi": [117, 124], "495": [117, 124], "tie": [117, 124], "497": [117, 124], "strengthen": [117, 124], "foundat": [117, 124], "consolid": [117, 124], "simplifi": [117, 124], "down": [117, 124], "411": [117, 124], "fit_sampl": [117, 124], "backward": [117, 124], "409": [117, 124], "455": [117, 124], "459": [117, 124], "469": [117, 124], "imblern": [117, 124], "deni": [117, 124], "dudnik": [117, 124], "372": [117, 124], "440": [117, 124], "439": [117, 124], "hugo": [117, 124], "gascon": [117, 124], "451": [117, 124], "ol": [117, 124], "silvig": [117, 124], "klizter": [117, 124], "354": [117, 124], "447": [117, 124], "446": [117, 124], "450": [117, 124], "458": [117, 124], "331": [117, 124, 130], "upgrad": [117, 124], "379": [117, 124], "catch": [117, 124], "441": [117, 124], "style": [117, 124], "470": [117, 124], "454": [117, 124], "editednearestneighbor": [117, 122, 124], "repeatededitednearestneighbor": [117, 124], "exact": [117, 124], "472": [117, 124], "474": [117, 124], "nosetest": [117, 123], "joan": [117, 123], "massich": [117, 123], "295": [117, 123], "312": [117, 123], "abl": [117, 123], "307": [117, 123], "249": [117, 123], "316": [117, 123], "check_estim": [117, 123], "264": [117, 123], "290": [117, 123], "__init__": [117, 123], "samplermixin": [117, 122, 123], "mixin": [117, 123], "creation": [117, 122, 123], "recurr": [117, 123], "clearer": [117, 123], "dinstinct": [117, 123], "277": [117, 123], "min_c_": [117, 123], "condensedneareastneigbour": [117, 122], "emb": [117, 122], "231": [117, 122], "188": [117, 122], "sel_x": [117, 122], "aliaksei": [117, 122], "halachkin": [117, 122], "230": [117, 122, 130], "aleksandr": [117, 122], "loskutov": [117, 122], "235": [117, 122], "rafael": [117, 122], "wampfler": [117, 122], "204": [117, 122], "moment": [117, 122], "size_ngh": [117, 122], "basebinaryclasssampl": [117, 122], "basemulticlasssampl": [117, 122], "abnorm": [117, 122], "assign": [117, 122], "182": [117, 122], "109": [117, 122], "unbalanceddataset": [117, 122], "francoi": [117, 122], "magimel": [117, 122], "2016": [117, 118], "fmfn": [117, 118], "condensend": [117, 118], "neighboorhood": [117, 118], "bsmote": [117, 118], "ricardo": 130, "jo": 130, "\u00e9": 130, "\u00e1": 130, "nchez": 130, "garca": 130, "edgar": 130, "gustavo": 130, "eapa": 130, "ana": 130, "lc": 130, "maria": 130, "carolina": 130, "ronaldo": 130, "nitesh": 130, "kevin": 130, "lawrenc": 130, "philip": 130, "esuli": 130, "baccianella": 130, "sebastiani": 130, "283": 130, "287": 130, "dec": 130, "doi": 130, "ieeecomputersocieti": 130, "1109": 130, "isda": 130, "garc": 130, "\u00ed": 130, "ram": 130, "\u00f3": 130, "hui": 130, "mao": 130, "peter": 130, "corresp": 130, "shohei": 130, "hisashi": 130, "yutaka": 130, "miroslav": 130, "stan": 130, "nashvil": 130, "usa": 130, "preprint": 130, "jorma": 130, "medicin": 130, "europ": 130, "63": 130, "xu": 130, "ying": 130, "jianxin": 130, "zhi": 130, "hua": 130, "richard": 130, "inderjeet": 130, "126": 130, "giovanna": 130, "nicola": 130, "s10618": 130, "012": 130, "0295": 130, "hien": 130, "eric": 130, "katsuari": 130, "fifth": 130, "smc": 130, "hiroshima": 130, "chapter": 130, "chri": 130, "taghi": 130, "jason": 130, "amri": 130, "ivan": 130, "tran": 130, "shuo": 130, "xin": 130, "324": 130, "randal": 130, "denni": 130}, "objects": {"imblearn": [[60, 0, 1, "", "FunctionSampler"], [57, 2, 0, "-", "combine"], [58, 2, 0, "-", "datasets"], [59, 2, 0, "-", "ensemble"], [106, 2, 0, "-", "keras"], [107, 2, 0, "-", "metrics"], [109, 2, 0, "-", "over_sampling"], [110, 2, 0, "-", "pipeline"], [111, 2, 0, "-", "tensorflow"], [112, 2, 0, "-", "under_sampling"], [113, 2, 0, "-", "utils"]], "imblearn.FunctionSampler": [[60, 1, 1, "", "fit"], [60, 1, 1, "", "fit_resample"], [60, 1, 1, "", "get_feature_names_out"], [60, 1, 1, "", "get_metadata_routing"], [60, 1, 1, "", "get_params"], [60, 1, 1, "", "set_params"]], "imblearn.combine": [[61, 0, 1, "", "SMOTEENN"], [62, 0, 1, "", "SMOTETomek"]], "imblearn.combine.SMOTEENN": [[61, 1, 1, "", "fit"], [61, 1, 1, "", "fit_resample"], [61, 1, 1, "", "get_feature_names_out"], [61, 1, 1, "", "get_metadata_routing"], [61, 1, 1, "", "get_params"], [61, 1, 1, "", "set_params"]], "imblearn.combine.SMOTETomek": [[62, 1, 1, "", "fit"], [62, 1, 1, "", "fit_resample"], [62, 1, 1, "", "get_feature_names_out"], [62, 1, 1, "", "get_metadata_routing"], [62, 1, 1, "", "get_params"], [62, 1, 1, "", "set_params"]], "imblearn.datasets": [[63, 3, 1, "", "fetch_datasets"], [64, 3, 1, "", "make_imbalance"]], "imblearn.ensemble": [[65, 0, 1, "", "BalancedBaggingClassifier"], [66, 0, 1, "", "BalancedRandomForestClassifier"], [67, 0, 1, "", "EasyEnsembleClassifier"], [68, 0, 1, "", "RUSBoostClassifier"]], "imblearn.ensemble.BalancedBaggingClassifier": [[65, 4, 1, "", "base_estimator_"], [65, 1, 1, "", "decision_function"], [65, 4, 1, "", "estimators_samples_"], [65, 1, 1, "", "fit"], [65, 1, 1, "", "get_metadata_routing"], [65, 1, 1, "", "get_params"], [65, 4, 1, "", "n_features_"], [65, 1, 1, "", "predict"], [65, 1, 1, "", "predict_log_proba"], [65, 1, 1, "", "predict_proba"], [65, 1, 1, "", "score"], [65, 1, 1, "", "set_fit_request"], [65, 1, 1, "", "set_params"], [65, 1, 1, "", "set_score_request"]], "imblearn.ensemble.BalancedRandomForestClassifier": [[66, 1, 1, "", "apply"], [66, 1, 1, "", "decision_path"], [66, 4, 1, "", "estimators_samples_"], [66, 4, 1, "", "feature_importances_"], [66, 1, 1, "", "fit"], [66, 1, 1, "", "get_metadata_routing"], [66, 1, 1, "", "get_params"], [66, 4, 1, "", "n_features_"], [66, 1, 1, "", "predict"], [66, 1, 1, "", "predict_log_proba"], [66, 1, 1, "", "predict_proba"], [66, 1, 1, "", "score"], [66, 1, 1, "", "set_fit_request"], [66, 1, 1, "", "set_params"], [66, 1, 1, "", "set_score_request"]], "imblearn.ensemble.EasyEnsembleClassifier": [[67, 4, 1, "", "base_estimator_"], [67, 1, 1, "", "decision_function"], [67, 4, 1, "", "estimators_samples_"], [67, 1, 1, "", "fit"], [67, 1, 1, "", "get_metadata_routing"], [67, 1, 1, "", "get_params"], [67, 4, 1, "", "n_features_"], [67, 1, 1, "", "predict"], [67, 1, 1, "", "predict_log_proba"], [67, 1, 1, "", "predict_proba"], [67, 1, 1, "", "score"], [67, 1, 1, "", "set_fit_request"], [67, 1, 1, "", "set_params"], [67, 1, 1, "", "set_score_request"]], "imblearn.ensemble.RUSBoostClassifier": [[68, 1, 1, "", "decision_function"], [68, 4, 1, "", "feature_importances_"], [68, 1, 1, "", "fit"], [68, 1, 1, "", "get_metadata_routing"], [68, 1, 1, "", "get_params"], [68, 1, 1, "", "predict"], [68, 1, 1, "", "predict_log_proba"], [68, 1, 1, "", "predict_proba"], [68, 1, 1, "", "score"], [68, 1, 1, "", "set_fit_request"], [68, 1, 1, "", "set_params"], [68, 1, 1, "", "set_score_request"], [68, 1, 1, "", "staged_decision_function"], [68, 1, 1, "", "staged_predict"], [68, 1, 1, "", "staged_predict_proba"], [68, 1, 1, "", "staged_score"]], "imblearn.keras": [[69, 0, 1, "", "BalancedBatchGenerator"], [70, 3, 1, "", "balanced_batch_generator"]], "imblearn.keras.BalancedBatchGenerator": [[69, 1, 1, "", "on_epoch_end"]], "imblearn.metrics": [[71, 3, 1, "", "classification_report_imbalanced"], [72, 3, 1, "", "geometric_mean_score"], [73, 3, 1, "", "macro_averaged_mean_absolute_error"], [74, 3, 1, "", "make_index_balanced_accuracy"], [107, 2, 0, "-", "pairwise"], [76, 3, 1, "", "sensitivity_score"], [77, 3, 1, "", "sensitivity_specificity_support"], [78, 3, 1, "", "specificity_score"]], "imblearn.metrics.pairwise": [[75, 0, 1, "", "ValueDifferenceMetric"]], "imblearn.metrics.pairwise.ValueDifferenceMetric": [[75, 1, 1, "", "fit"], [75, 1, 1, "", "get_metadata_routing"], [75, 1, 1, "", "get_params"], [75, 1, 1, "", "pairwise"], [75, 1, 1, "", "set_params"]], "imblearn.over_sampling": [[79, 0, 1, "", "ADASYN"], [80, 0, 1, "", "BorderlineSMOTE"], [81, 0, 1, "", "KMeansSMOTE"], [82, 0, 1, "", "RandomOverSampler"], [83, 0, 1, "", "SMOTE"], [84, 0, 1, "", "SMOTEN"], [85, 0, 1, "", "SMOTENC"], [86, 0, 1, "", "SVMSMOTE"]], "imblearn.over_sampling.ADASYN": [[79, 1, 1, "", "fit"], [79, 1, 1, "", "fit_resample"], [79, 1, 1, "", "get_feature_names_out"], [79, 1, 1, "", "get_metadata_routing"], [79, 1, 1, "", "get_params"], [79, 1, 1, "", "set_params"]], "imblearn.over_sampling.BorderlineSMOTE": [[80, 1, 1, "", "fit"], [80, 1, 1, "", "fit_resample"], [80, 1, 1, "", "get_feature_names_out"], [80, 1, 1, "", "get_metadata_routing"], [80, 1, 1, "", "get_params"], [80, 1, 1, "", "set_params"]], "imblearn.over_sampling.KMeansSMOTE": [[81, 1, 1, "", "fit"], [81, 1, 1, "", "fit_resample"], [81, 1, 1, "", "get_feature_names_out"], [81, 1, 1, "", "get_metadata_routing"], [81, 1, 1, "", "get_params"], [81, 1, 1, "", "set_params"]], "imblearn.over_sampling.RandomOverSampler": [[82, 1, 1, "", "fit"], [82, 1, 1, "", "fit_resample"], [82, 1, 1, "", "get_feature_names_out"], [82, 1, 1, "", "get_metadata_routing"], [82, 1, 1, "", "get_params"], [82, 1, 1, "", "set_params"]], "imblearn.over_sampling.SMOTE": [[83, 1, 1, "", "fit"], [83, 1, 1, "", "fit_resample"], [83, 1, 1, "", "get_feature_names_out"], [83, 1, 1, "", "get_metadata_routing"], [83, 1, 1, "", "get_params"], [83, 1, 1, "", "set_params"]], "imblearn.over_sampling.SMOTEN": [[84, 1, 1, "", "fit"], [84, 1, 1, "", "fit_resample"], [84, 1, 1, "", "get_feature_names_out"], [84, 1, 1, "", "get_metadata_routing"], [84, 1, 1, "", "get_params"], [84, 1, 1, "", "set_params"]], "imblearn.over_sampling.SMOTENC": [[85, 1, 1, "", "fit"], [85, 1, 1, "", "fit_resample"], [85, 1, 1, "", "get_feature_names_out"], [85, 1, 1, "", "get_metadata_routing"], [85, 1, 1, "", "get_params"], [85, 4, 1, "", "ohe_"], [85, 1, 1, "", "set_params"]], "imblearn.over_sampling.SVMSMOTE": [[86, 1, 1, "", "fit"], [86, 1, 1, "", "fit_resample"], [86, 1, 1, "", "get_feature_names_out"], [86, 1, 1, "", "get_metadata_routing"], [86, 1, 1, "", "get_params"], [86, 1, 1, "", "set_params"]], "imblearn.pipeline": [[87, 0, 1, "", "Pipeline"], [88, 3, 1, "", "make_pipeline"]], "imblearn.pipeline.Pipeline": [[87, 4, 1, "", "classes_"], [87, 1, 1, "", "decision_function"], [87, 4, 1, "", "feature_names_in_"], [87, 1, 1, "", "fit"], [87, 1, 1, "", "fit_predict"], [87, 1, 1, "", "fit_resample"], [87, 1, 1, "", "fit_transform"], [87, 1, 1, "", "get_feature_names_out"], [87, 1, 1, "", "get_metadata_routing"], [87, 1, 1, "", "get_params"], [87, 1, 1, "", "inverse_transform"], [87, 4, 1, "", "n_features_in_"], [87, 4, 1, "", "named_steps"], [87, 1, 1, "", "predict"], [87, 1, 1, "", "predict_log_proba"], [87, 1, 1, "", "predict_proba"], [87, 1, 1, "", "score"], [87, 1, 1, "", "score_samples"], [87, 1, 1, "", "set_output"], [87, 1, 1, "", "set_params"], [87, 1, 1, "", "set_score_request"], [87, 1, 1, "", "transform"]], "imblearn.tensorflow": [[89, 3, 1, "", "balanced_batch_generator"]], "imblearn.under_sampling": [[90, 0, 1, "", "AllKNN"], [91, 0, 1, "", "ClusterCentroids"], [92, 0, 1, "", "CondensedNearestNeighbour"], [93, 0, 1, "", "EditedNearestNeighbours"], [94, 0, 1, "", "InstanceHardnessThreshold"], [95, 0, 1, "", "NearMiss"], [96, 0, 1, "", "NeighbourhoodCleaningRule"], [97, 0, 1, "", "OneSidedSelection"], [98, 0, 1, "", "RandomUnderSampler"], [99, 0, 1, "", "RepeatedEditedNearestNeighbours"], [100, 0, 1, "", "TomekLinks"], [112, 2, 0, "-", "_prototype_generation"], [112, 2, 0, "-", "_prototype_selection"]], "imblearn.under_sampling.AllKNN": [[90, 1, 1, "", "fit"], [90, 1, 1, "", "fit_resample"], [90, 1, 1, "", "get_feature_names_out"], [90, 1, 1, "", "get_metadata_routing"], [90, 1, 1, "", "get_params"], [90, 1, 1, "", "set_params"]], "imblearn.under_sampling.ClusterCentroids": [[91, 1, 1, "", "fit"], [91, 1, 1, "", "fit_resample"], [91, 1, 1, "", "get_feature_names_out"], [91, 1, 1, "", "get_metadata_routing"], [91, 1, 1, "", "get_params"], [91, 1, 1, "", "set_params"]], "imblearn.under_sampling.CondensedNearestNeighbour": [[92, 4, 1, "", "estimator_"], [92, 1, 1, "", "fit"], [92, 1, 1, "", "fit_resample"], [92, 1, 1, "", "get_feature_names_out"], [92, 1, 1, "", "get_metadata_routing"], [92, 1, 1, "", "get_params"], [92, 1, 1, "", "set_params"]], "imblearn.under_sampling.EditedNearestNeighbours": [[93, 1, 1, "", "fit"], [93, 1, 1, "", "fit_resample"], [93, 1, 1, "", "get_feature_names_out"], [93, 1, 1, "", "get_metadata_routing"], [93, 1, 1, "", "get_params"], [93, 1, 1, "", "set_params"]], "imblearn.under_sampling.InstanceHardnessThreshold": [[94, 1, 1, "", "fit"], [94, 1, 1, "", "fit_resample"], [94, 1, 1, "", "get_feature_names_out"], [94, 1, 1, "", "get_metadata_routing"], [94, 1, 1, "", "get_params"], [94, 1, 1, "", "set_params"]], "imblearn.under_sampling.NearMiss": [[95, 1, 1, "", "fit"], [95, 1, 1, "", "fit_resample"], [95, 1, 1, "", "get_feature_names_out"], [95, 1, 1, "", "get_metadata_routing"], [95, 1, 1, "", "get_params"], [95, 1, 1, "", "set_params"]], "imblearn.under_sampling.NeighbourhoodCleaningRule": [[96, 1, 1, "", "fit"], [96, 1, 1, "", "fit_resample"], [96, 1, 1, "", "get_feature_names_out"], [96, 1, 1, "", "get_metadata_routing"], [96, 1, 1, "", "get_params"], [96, 1, 1, "", "set_params"]], "imblearn.under_sampling.OneSidedSelection": [[97, 4, 1, "", "estimator_"], [97, 1, 1, "", "fit"], [97, 1, 1, "", "fit_resample"], [97, 1, 1, "", "get_feature_names_out"], [97, 1, 1, "", "get_metadata_routing"], [97, 1, 1, "", "get_params"], [97, 1, 1, "", "set_params"]], "imblearn.under_sampling.RandomUnderSampler": [[98, 1, 1, "", "fit"], [98, 1, 1, "", "fit_resample"], [98, 1, 1, "", "get_feature_names_out"], [98, 1, 1, "", "get_metadata_routing"], [98, 1, 1, "", "get_params"], [98, 1, 1, "", "set_params"]], "imblearn.under_sampling.RepeatedEditedNearestNeighbours": [[99, 1, 1, "", "fit"], [99, 1, 1, "", "fit_resample"], [99, 1, 1, "", "get_feature_names_out"], [99, 1, 1, "", "get_metadata_routing"], [99, 1, 1, "", "get_params"], [99, 1, 1, "", "set_params"]], "imblearn.under_sampling.TomekLinks": [[100, 1, 1, "", "fit"], [100, 1, 1, "", "fit_resample"], [100, 1, 1, "", "get_feature_names_out"], [100, 1, 1, "", "get_metadata_routing"], [100, 1, 1, "", "get_params"], [100, 1, 1, "", "is_tomek"], [100, 1, 1, "", "set_params"]], "imblearn.utils": [[101, 3, 1, "", "check_neighbors_object"], [102, 3, 1, "", "check_sampling_strategy"], [103, 3, 1, "", "check_target_type"], [113, 2, 0, "-", "estimator_checks"]], "imblearn.utils.estimator_checks": [[104, 3, 1, "", "parametrize_with_checks"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:module", "3": "py:function", "4": "py:property"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "module", "Python module"], "3": ["py", "function", "Python function"], "4": ["py", "property", "Python property"]}, "titleterms": {"about": 0, "u": 0, "histori": [0, 117], "develop": [0, 47, 117, 121], "lead": 0, "contributor": 0, "cite": 0, "imbalanc": [0, 1, 2, 5, 16, 19, 20, 24, 26, 46, 49, 51, 52], "learn": [0, 1, 2, 5, 9, 24, 26, 49, 50, 51], "exampl": [1, 4, 9, 12, 15, 18, 22, 26, 30, 35, 39, 44, 48, 56, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 74, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "show": [1, 26], "api": [1, 26, 51, 105, 117, 118, 122, 123, 124], "usag": [1, 26, 36], "how": [2, 5, 7], "us": [2, 5, 7, 12, 18, 19, 20, 26, 30, 31, 32, 39, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 74, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 113, 115], "sampling_strategi": 2, "creat": [2, 10, 16], "an": [2, 5, 7, 16, 19, 20], "dataset": [2, 4, 5, 8, 13, 15, 16, 19, 20, 26, 46, 52, 58, 63, 64], "resampl": [2, 5, 20], "algorithm": [2, 5, 59, 109], "float": 2, "str": 2, "dict": 2, "list": 2, "callabl": 2, "comput": [3, 10, 11, 14, 17, 21, 25, 29, 34, 37, 38, 43, 114], "time": [3, 10, 11, 14, 17, 21, 25, 29, 34, 37, 38, 43, 114], "base": [4, 26], "real": [4, 26], "world": [4, 26], "fit": 5, "model": [5, 26, 27, 117, 125, 126, 127], "fight": 5, "bia": 5, "problem": [5, 51], "definit": [5, 42], "strategi": 5, "from": [5, 50, 56], "dummi": 5, "baselin": 5, "linear": 5, "classifi": [5, 19, 20, 48], "class_weight": 5, "train": 5, "set": [5, 9, 31, 51], "dure": 5, "specif": [5, 24, 52], "balanc": [5, 9, 10, 19, 31, 48], "multiclass": 6, "classif": [6, 9, 10, 20, 23, 52, 107], "under": [6, 13, 26, 39, 40, 44, 57, 112, 115, 117, 121], "sampl": [6, 8, 10, 13, 20, 26, 30, 31, 32, 33, 39, 40, 41, 44, 56, 57, 109, 112, 115], "custom": [7, 55], "sampler": [7, 13, 19, 31, 32, 36, 40, 48, 51, 55, 113], "implement": 7, "outlier": 7, "reject": 7, "estim": 7, "toi": 7, "data": [7, 9, 10, 31, 45, 51, 115], "gener": [7, 13, 16, 19, 32, 40, 46, 55, 56, 106, 111, 112, 115], "functionsampl": [7, 60], "integr": 7, "within": 7, "pipelin": [7, 9, 10, 26, 35, 36, 87, 88, 110], "benchmark": [8, 46], "over": [8, 13, 19, 26, 30, 31, 33, 44, 56, 57, 109], "method": [8, 12, 18, 26, 30, 39, 57, 59, 109, 112, 118], "face": 8, "recognit": 8, "task": 8, "load": [8, 10, 20, 46], "compar": [8, 13, 20, 31, 40], "approach": 8, "topic": 9, "text": 9, "document": [9, 49, 117, 122, 123, 124, 125], "The": 9, "usual": 9, "scikit": [9, 50], "class": [9, 12, 18, 26, 30, 39, 56], "befor": 9, "porto": 10, "seguro": 10, "mini": 10, "batch": [10, 106, 111], "kera": [10, 55, 69, 106], "refer": [10, 19, 55, 105, 130], "defin": 10, "pre": 10, "process": 10, "neural": 10, "network": 10, "loop": 10, "plot": [10, 28], "result": 10, "combin": [12, 13, 26, 44, 57, 61, 62], "make": [16, 47], "ensembl": [18, 20, 26, 48, 59, 65, 66, 67, 68], "bag": [19, 20, 48, 59], "exactli": 19, "smote": [19, 31, 32, 56, 83, 109], "roughli": 19, "singl": 20, "decis": 20, "tree": [20, 48], "without": 20, "random": [20, 31, 33, 48, 56, 115], "forest": [20, 48], "boost": [20, 48, 59], "evalu": [22, 23, 26], "compil": 23, "report": 23, "metric": [24, 52, 71, 72, 74, 107], "select": [26, 27, 40, 41, 112, 115], "valid": [28, 47, 113], "curv": 28, "illustr": [31, 42], "influenc": 31, "ratio": 31, "more": 31, "advanc": 31, "adasyn": [31, 56, 79], "like": 32, "effect": 33, "shrinkag": 33, "factor": 33, "embed": 36, "prototyp": [40, 112, 115], "new": [40, 117, 118, 122, 123, 124, 128], "exist": 40, "nearmiss": [41, 95], "1": [41, 117, 118, 119, 120, 126, 128, 129], "2": [41, 117, 122, 124, 126], "3": [41, 117, 123], "tomek": [42, 115], "link": [42, 115], "common": 45, "pitfal": 45, "recommend": 45, "practic": [45, 56], "leakag": 45, "util": [46, 47, 113], "guidelin": 47, "tool": 47, "deprec": [47, 117, 119, 120, 121, 123, 124, 126, 127, 128], "releas": [47, 117], "major": 47, "bug": [47, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128], "fix": [47, 117, 119, 120, 121, 122, 123, 124, 126, 127, 128], "includ": 48, "inner": 48, "get": 50, "start": 50, "prerequisit": 50, "instal": 50, "pypi": 50, "conda": 50, "forg": 50, "repositori": 50, "intel": 50, "optim": 50, "via": 50, "intelex": 50, "sourc": 50, "avail": 50, "github": 50, "test": [50, 113, 123], "coverag": 50, "contribut": 50, "introduct": 51, "": [51, 115], "panda": 51, "out": 51, "spars": 51, "input": 51, "statement": 51, "regard": 51, "sensit": 52, "addit": [52, 115], "macro": 52, "averag": 52, "mean": 52, "absolut": 52, "error": 52, "ma": 52, "mae": 52, "summari": [52, 122, 123], "import": 52, "pairwis": [52, 107], "valu": 52, "differ": 52, "miscellan": [55, 108], "tensorflow": [55, 111], "A": 56, "guid": [56, 116], "naiv": 56, "ill": 56, "pose": 56, "variant": 56, "mathemat": [56, 115], "formul": [56, 115], "multi": 56, "manag": 56, "imblearn": [60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 74, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "smoteenn": 61, "smotetomek": 62, "fetch_dataset": 63, "make_imbal": 64, "balancedbaggingclassifi": 65, "balancedrandomforestclassifi": 66, "easyensembleclassifi": 67, "rusboostclassifi": 68, "balancedbatchgener": 69, "balanced_batch_gener": [70, 89], "classification_report_imbalanc": 71, "geometric_mean_scor": 72, "macro_averaged_mean_absolute_error": 73, "make_index_balanced_accuraci": 74, "valuedifferencemetr": 75, "sensitivity_scor": 76, "sensitivity_specificity_support": 77, "specificity_scor": 78, "over_sampl": [79, 80, 81, 82, 83, 84, 85, 86], "borderlinesmot": 80, "kmeanssmot": 81, "randomoversampl": 82, "smoten": 84, "smotenc": 85, "svmsmote": 86, "make_pipelin": 88, "allknn": 90, "under_sampl": [90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "clustercentroid": 91, "condensednearestneighbour": 92, "editednearestneighbour": 93, "instancehardnessthreshold": 94, "neighbourhoodcleaningrul": 96, "onesidedselect": 97, "randomundersampl": 98, "repeatededitednearestneighbour": 99, "tomeklink": 100, "check_neighbors_object": 101, "check_sampling_strategi": 102, "check_target_typ": 103, "parametrize_with_check": 104, "basic": 109, "check": 113, "compat": [113, 117, 119, 120, 121], "your": 113, "own": 113, "control": 115, "techniqu": 115, "clean": 115, "edit": 115, "nearest": 115, "neighbour": 115, "repeat": 115, "all": 115, "knn": 115, "condens": 115, "neighbor": 115, "One": 115, "side": 115, "undersampl": 115, "instanc": 115, "hard": 115, "threshold": 115, "user": 116, "version": [117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129], "0": [117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129], "12": [117, 121], "changelog": [117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129], "enhanc": [117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128], "11": [117, 120], "10": [117, 119], "9": [117, 129], "8": [117, 128], "mainten": [117, 124, 125, 126, 127, 128], "featur": [117, 122, 123, 124, 128], "7": [117, 127], "chang": [117, 122, 123, 125, 126, 127], "6": [117, 126], "5": [117, 125], "4": [117, 124], "highlight": [117, 124]}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinxcontrib.bibtex": 9, "sphinx": 57}, "alltitles": {"About us": [[0, "about-us"]], "History": [[0, "history"]], "Development lead": [[0, "development-lead"]], "Contributors": [[0, "contributors"]], "Citing imbalanced-learn": [[0, "citing-imbalanced-learn"]], "Examples showing API imbalanced-learn usage": [[1, "examples-showing-api-imbalanced-learn-usage"], [26, "examples-showing-api-imbalanced-learn-usage"]], "How to use sampling_strategy in imbalanced-learn": [[2, "how-to-use-sampling-strategy-in-imbalanced-learn"]], "Create an imbalanced dataset": [[2, "create-an-imbalanced-dataset"], [16, "create-an-imbalanced-dataset"]], "Using sampling_strategy in resampling algorithms": [[2, "using-sampling-strategy-in-resampling-algorithms"]], "sampling_strategy as a float": [[2, "sampling-strategy-as-a-float"]], "sampling_strategy as a str": [[2, "sampling-strategy-as-a-str"]], "sampling_strategy as a dict": [[2, "sampling-strategy-as-a-dict"]], "sampling_strategy as a list": [[2, "sampling-strategy-as-a-list"]], "sampling_strategy as a callable": [[2, "sampling-strategy-as-a-callable"]], "Computation times": [[3, "computation-times"], [11, "computation-times"], [14, "computation-times"], [17, "computation-times"], [21, "computation-times"], [25, "computation-times"], [29, "computation-times"], [34, "computation-times"], [37, "computation-times"], [38, "computation-times"], [43, "computation-times"], [114, "computation-times"]], "Examples based on real world datasets": [[4, "examples-based-on-real-world-datasets"], [26, "examples-based-on-real-world-datasets"]], "Fitting model on imbalanced datasets and how to fight bias": [[5, "fitting-model-on-imbalanced-datasets-and-how-to-fight-bias"]], "Problem definition": [[5, "problem-definition"]], "Strategies to learn from an imbalanced dataset": [[5, "strategies-to-learn-from-an-imbalanced-dataset"]], "Dummy baseline": [[5, "dummy-baseline"]], "Linear classifier baseline": [[5, "linear-classifier-baseline"]], "Use class_weight": [[5, "use-class-weight"]], "Resample the training set during learning": [[5, "resample-the-training-set-during-learning"]], "Use of specific balanced algorithms from imbalanced-learn": [[5, "use-of-specific-balanced-algorithms-from-imbalanced-learn"]], "Multiclass classification with under-sampling": [[6, "multiclass-classification-with-under-sampling"]], "Customized sampler to implement an outlier rejections estimator": [[7, "customized-sampler-to-implement-an-outlier-rejections-estimator"]], "Toy data generation": [[7, "toy-data-generation"]], "How to use the FunctionSampler": [[7, "how-to-use-the-functionsampler"]], "Integrate it within a pipeline": [[7, "integrate-it-within-a-pipeline"]], "Benchmark over-sampling methods in a face recognition task": [[8, "benchmark-over-sampling-methods-in-a-face-recognition-task"]], "Load the dataset": [[8, "load-the-dataset"]], "Compare over-sampling approaches": [[8, "compare-over-sampling-approaches"]], "Example of topic classification in text documents": [[9, "example-of-topic-classification-in-text-documents"]], "Setting the data set": [[9, "setting-the-data-set"]], "The usual scikit-learn pipeline": [[9, "the-usual-scikit-learn-pipeline"]], "Balancing the class before classification": [[9, "balancing-the-class-before-classification"]], "Porto Seguro: balancing samples in mini-batches with Keras": [[10, "porto-seguro-balancing-samples-in-mini-batches-with-keras"]], "References": [[10, "references"], [55, null], [130, "references"]], "Data loading": [[10, "data-loading"]], "Define the pre-processing pipeline": [[10, "define-the-pre-processing-pipeline"]], "Create a neural-network": [[10, "create-a-neural-network"]], "Classification loop": [[10, "classification-loop"]], "Plot of the results and computation time": [[10, "plot-of-the-results-and-computation-time"]], "Examples using combine class methods": [[12, "examples-using-combine-class-methods"], [26, "examples-using-combine-class-methods"]], "Compare sampler combining over- and under-sampling": [[13, "compare-sampler-combining-over-and-under-sampling"]], "Dataset generation": [[13, "dataset-generation"]], "Dataset examples": [[15, "dataset-examples"], [26, "dataset-examples"]], "Generate the dataset": [[16, "generate-the-dataset"]], "Make a dataset imbalanced": [[16, "make-a-dataset-imbalanced"]], "Example using ensemble class methods": [[18, "example-using-ensemble-class-methods"], [26, "example-using-ensemble-class-methods"]], "Bagging classifiers using sampler": [[19, "bagging-classifiers-using-sampler"]], "Generate an imbalanced dataset": [[19, "generate-an-imbalanced-dataset"]], "Exactly Balanced Bagging and Over-Bagging": [[19, "exactly-balanced-bagging-and-over-bagging"]], "SMOTE-Bagging": [[19, "smote-bagging"]], "Roughly Balanced Bagging": [[19, "roughly-balanced-bagging"]], "References:": [[19, null]], "Compare ensemble classifiers using resampling": [[20, "compare-ensemble-classifiers-using-resampling"]], "Load an imbalanced dataset": [[20, "load-an-imbalanced-dataset"]], "Classification using a single decision tree": [[20, "classification-using-a-single-decision-tree"]], "Classification using bagging classifier with and without sampling": [[20, "classification-using-bagging-classifier-with-and-without-sampling"]], "Classification using random forest classifier with and without sampling": [[20, "classification-using-random-forest-classifier-with-and-without-sampling"]], "Boosting classifier": [[20, "boosting-classifier"]], "Evaluation examples": [[22, "evaluation-examples"], [26, "evaluation-examples"]], "Evaluate classification by compiling a report": [[23, "evaluate-classification-by-compiling-a-report"]], "Metrics specific to imbalanced learning": [[24, "metrics-specific-to-imbalanced-learning"]], "Examples": [[26, "examples"], [44, null], [48, null]], "Model Selection": [[26, "model-selection"], [27, "model-selection"]], "Example using over-sampling class methods": [[26, "example-using-over-sampling-class-methods"], [30, "example-using-over-sampling-class-methods"]], "Pipeline examples": [[26, "pipeline-examples"], [35, "pipeline-examples"]], "Example using under-sampling class methods": [[26, "example-using-under-sampling-class-methods"], [39, "example-using-under-sampling-class-methods"]], "Plotting Validation Curves": [[28, "plotting-validation-curves"]], "Compare over-sampling samplers": [[31, "compare-over-sampling-samplers"]], "Illustration of the influence of the balancing ratio": [[31, "illustration-of-the-influence-of-the-balancing-ratio"]], "Random over-sampling to balance the data set": [[31, "random-over-sampling-to-balance-the-data-set"]], "More advanced over-sampling using ADASYN and SMOTE": [[31, "more-advanced-over-sampling-using-adasyn-and-smote"]], "Sample generator used in SMOTE-like samplers": [[32, "sample-generator-used-in-smote-like-samplers"]], "Effect of the shrinkage factor in random over-sampling": [[33, "effect-of-the-shrinkage-factor-in-random-over-sampling"]], "Usage of pipeline embedding samplers": [[36, "usage-of-pipeline-embedding-samplers"]], "Compare under-sampling samplers": [[40, "compare-under-sampling-samplers"]], "Prototype generation: under-sampling by generating new samples": [[40, "prototype-generation-under-sampling-by-generating-new-samples"]], "Prototype selection: under-sampling by selecting existing samples": [[40, "prototype-selection-under-sampling-by-selecting-existing-samples"]], "Sample selection in NearMiss": [[41, "sample-selection-in-nearmiss"]], "NearMiss-1": [[41, "nearmiss-1"]], "NearMiss-2": [[41, "nearmiss-2"]], "NearMiss-3": [[41, "nearmiss-3"]], "Illustration of the definition of a Tomek link": [[42, "illustration-of-the-definition-of-a-tomek-link"]], "Combination of over- and under-sampling": [[44, "combination-of-over-and-under-sampling"]], "Common pitfalls and recommended practices": [[45, "common-pitfalls-and-recommended-practices"]], "Data leakage": [[45, "data-leakage"]], "Dataset loading utilities": [[46, "dataset-loading-utilities"]], "Imbalanced datasets for benchmark": [[46, "imbalanced-datasets-for-benchmark"]], "Imbalanced generator": [[46, "imbalanced-generator"]], "Developer guideline": [[47, "developer-guideline"]], "Developer utilities": [[47, "developer-utilities"]], "Validation Tools": [[47, "validation-tools"]], "Deprecation": [[47, "deprecation"], [117, "deprecation"], [117, "id12"], [117, "id21"], [117, "id26"], [117, "id34"], [117, "id47"], [119, "deprecation"], [120, "deprecation"], [123, "deprecation"], [124, "deprecation"], [126, "deprecation"], [127, "deprecation"], [128, "deprecation"]], "Making a release": [[47, "making-a-release"]], "Major release": [[47, "major-release"]], "Bug fix release": [[47, "bug-fix-release"]], "Ensemble of samplers": [[48, "ensemble-of-samplers"]], "Classifier including inner balancing samplers": [[48, "classifier-including-inner-balancing-samplers"]], "Bagging classifier": [[48, "bagging-classifier"]], "Forest of randomized trees": [[48, "forest-of-randomized-trees"]], "Boosting": [[48, "boosting"]], "imbalanced-learn documentation": [[49, "imbalanced-learn-documentation"]], "Getting Started": [[50, "getting-started"]], "Prerequisites": [[50, "prerequisites"]], "Install": [[50, "install"]], "From PyPi or conda-forge repositories": [[50, "from-pypi-or-conda-forge-repositories"]], "Intel optimizations via scikit-learn-intelex": [[50, "intel-optimizations-via-scikit-learn-intelex"]], "From source available on GitHub": [[50, "from-source-available-on-github"]], "Test and coverage": [[50, "test-and-coverage"]], "Contribute": [[50, "contribute"]], "Introduction": [[51, "introduction"]], "API\u2019s of imbalanced-learn samplers": [[51, "api-s-of-imbalanced-learn-samplers"]], "Pandas in/out": [[51, null]], "Sparse input": [[51, null]], "Problem statement regarding imbalanced data sets": [[51, "problem-statement-regarding-imbalanced-data-sets"]], "Metrics": [[52, "metrics"], [107, "module-imblearn.metrics"]], "Classification metrics": [[52, "classification-metrics"], [107, "classification-metrics"]], "Sensitivity and specificity metrics": [[52, "sensitivity-and-specificity-metrics"]], "Additional metrics specific to imbalanced datasets": [[52, "additional-metrics-specific-to-imbalanced-datasets"]], "Macro-Averaged Mean Absolute Error (MA-MAE)": [[52, "macro-averaged-mean-absolute-error-ma-mae"]], "Summary of important metrics": [[52, "summary-of-important-metrics"]], "Pairwise metrics": [[52, "pairwise-metrics"], [107, "pairwise-metrics"]], "Value Difference Metric": [[52, "value-difference-metric"]], "Miscellaneous samplers": [[55, "miscellaneous-samplers"]], "Custom samplers": [[55, "custom-samplers"]], "Custom generators": [[55, "custom-generators"]], "TensorFlow generator": [[55, "tensorflow-generator"]], "Keras generator": [[55, "keras-generator"]], "Over-sampling": [[56, "over-sampling"]], "A practical guide": [[56, "a-practical-guide"]], "Naive random over-sampling": [[56, "naive-random-over-sampling"]], "From random over-sampling to SMOTE and ADASYN": [[56, "from-random-over-sampling-to-smote-and-adasyn"]], "Ill-posed examples": [[56, "ill-posed-examples"]], "SMOTE variants": [[56, "smote-variants"]], "Mathematical formulation": [[56, "mathematical-formulation"], [115, "mathematical-formulation"]], "Sample generation": [[56, "sample-generation"]], "Multi-class management": [[56, "multi-class-management"]], "Combination of over- and under-sampling methods": [[57, "module-imblearn.combine"]], "Datasets": [[58, "module-imblearn.datasets"]], "Ensemble methods": [[59, "module-imblearn.ensemble"]], "Boosting algorithms": [[59, "boosting-algorithms"]], "Bagging algorithms": [[59, "bagging-algorithms"]], "FunctionSampler": [[60, "functionsampler"]], "Examples using imblearn.FunctionSampler": [[60, "examples-using-imblearn-functionsampler"]], "SMOTEENN": [[61, "smoteenn"]], "Examples using imblearn.combine.SMOTEENN": [[61, "examples-using-imblearn-combine-smoteenn"]], "SMOTETomek": [[62, "smotetomek"]], "Examples using imblearn.combine.SMOTETomek": [[62, "examples-using-imblearn-combine-smotetomek"]], "fetch_datasets": [[63, "fetch-datasets"]], "Examples using imblearn.datasets.fetch_datasets": [[63, "examples-using-imblearn-datasets-fetch-datasets"]], "make_imbalance": [[64, "make-imbalance"]], "Examples using imblearn.datasets.make_imbalance": [[64, "examples-using-imblearn-datasets-make-imbalance"]], "BalancedBaggingClassifier": [[65, "balancedbaggingclassifier"]], "Examples using imblearn.ensemble.BalancedBaggingClassifier": [[65, "examples-using-imblearn-ensemble-balancedbaggingclassifier"]], "BalancedRandomForestClassifier": [[66, "balancedrandomforestclassifier"]], "Examples using imblearn.ensemble.BalancedRandomForestClassifier": [[66, "examples-using-imblearn-ensemble-balancedrandomforestclassifier"]], "EasyEnsembleClassifier": [[67, "easyensembleclassifier"]], "Examples using imblearn.ensemble.EasyEnsembleClassifier": [[67, "examples-using-imblearn-ensemble-easyensembleclassifier"]], "RUSBoostClassifier": [[68, "rusboostclassifier"]], "Examples using imblearn.ensemble.RUSBoostClassifier": [[68, "examples-using-imblearn-ensemble-rusboostclassifier"]], "BalancedBatchGenerator": [[69, "balancedbatchgenerator"]], "Examples using imblearn.keras.BalancedBatchGenerator": [[69, "examples-using-imblearn-keras-balancedbatchgenerator"]], "balanced_batch_generator": [[70, "balanced-batch-generator"], [89, "balanced-batch-generator"]], "classification_report_imbalanced": [[71, "classification-report-imbalanced"]], "Examples using imblearn.metrics.classification_report_imbalanced": [[71, "examples-using-imblearn-metrics-classification-report-imbalanced"]], "geometric_mean_score": [[72, "geometric-mean-score"]], "Examples using imblearn.metrics.geometric_mean_score": [[72, "examples-using-imblearn-metrics-geometric-mean-score"]], "macro_averaged_mean_absolute_error": [[73, "macro-averaged-mean-absolute-error"]], "make_index_balanced_accuracy": [[74, "make-index-balanced-accuracy"]], "Examples using imblearn.metrics.make_index_balanced_accuracy": [[74, "examples-using-imblearn-metrics-make-index-balanced-accuracy"]], "ValueDifferenceMetric": [[75, "valuedifferencemetric"]], "sensitivity_score": [[76, "sensitivity-score"]], "sensitivity_specificity_support": [[77, "sensitivity-specificity-support"]], "specificity_score": [[78, "specificity-score"]], "ADASYN": [[79, "adasyn"]], "Examples using imblearn.over_sampling.ADASYN": [[79, "examples-using-imblearn-over-sampling-adasyn"]], "BorderlineSMOTE": [[80, "borderlinesmote"]], "Examples using imblearn.over_sampling.BorderlineSMOTE": [[80, "examples-using-imblearn-over-sampling-borderlinesmote"]], "KMeansSMOTE": [[81, "kmeanssmote"]], "Examples using imblearn.over_sampling.KMeansSMOTE": [[81, "examples-using-imblearn-over-sampling-kmeanssmote"]], "RandomOverSampler": [[82, "randomoversampler"]], "Examples using imblearn.over_sampling.RandomOverSampler": [[82, "examples-using-imblearn-over-sampling-randomoversampler"]], "SMOTE": [[83, "smote"]], "Examples using imblearn.over_sampling.SMOTE": [[83, "examples-using-imblearn-over-sampling-smote"]], "SMOTEN": [[84, "smoten"]], "Examples using imblearn.over_sampling.SMOTEN": [[84, "examples-using-imblearn-over-sampling-smoten"]], "SMOTENC": [[85, "smotenc"]], "Examples using imblearn.over_sampling.SMOTENC": [[85, "examples-using-imblearn-over-sampling-smotenc"]], "SVMSMOTE": [[86, "svmsmote"]], "Examples using imblearn.over_sampling.SVMSMOTE": [[86, "examples-using-imblearn-over-sampling-svmsmote"]], "Pipeline": [[87, "pipeline"], [110, "module-imblearn.pipeline"]], "Examples using imblearn.pipeline.Pipeline": [[87, "examples-using-imblearn-pipeline-pipeline"]], "make_pipeline": [[88, "make-pipeline"]], "Examples using imblearn.pipeline.make_pipeline": [[88, "examples-using-imblearn-pipeline-make-pipeline"]], "AllKNN": [[90, "allknn"]], "Examples using imblearn.under_sampling.AllKNN": [[90, "examples-using-imblearn-under-sampling-allknn"]], "ClusterCentroids": [[91, "clustercentroids"]], "Examples using imblearn.under_sampling.ClusterCentroids": [[91, "examples-using-imblearn-under-sampling-clustercentroids"]], "CondensedNearestNeighbour": [[92, "condensednearestneighbour"]], "Examples using imblearn.under_sampling.CondensedNearestNeighbour": [[92, "examples-using-imblearn-under-sampling-condensednearestneighbour"]], "EditedNearestNeighbours": [[93, "editednearestneighbours"]], "Examples using imblearn.under_sampling.EditedNearestNeighbours": [[93, "examples-using-imblearn-under-sampling-editednearestneighbours"]], "InstanceHardnessThreshold": [[94, "instancehardnessthreshold"]], "Examples using imblearn.under_sampling.InstanceHardnessThreshold": [[94, "examples-using-imblearn-under-sampling-instancehardnessthreshold"]], "NearMiss": [[95, "nearmiss"]], "Examples using imblearn.under_sampling.NearMiss": [[95, "examples-using-imblearn-under-sampling-nearmiss"]], "NeighbourhoodCleaningRule": [[96, "neighbourhoodcleaningrule"]], "Examples using imblearn.under_sampling.NeighbourhoodCleaningRule": [[96, "examples-using-imblearn-under-sampling-neighbourhoodcleaningrule"]], "OneSidedSelection": [[97, "onesidedselection"]], "Examples using imblearn.under_sampling.OneSidedSelection": [[97, "examples-using-imblearn-under-sampling-onesidedselection"]], "RandomUnderSampler": [[98, "randomundersampler"]], "Examples using imblearn.under_sampling.RandomUnderSampler": [[98, "examples-using-imblearn-under-sampling-randomundersampler"]], "RepeatedEditedNearestNeighbours": [[99, "repeatededitednearestneighbours"]], "Examples using imblearn.under_sampling.RepeatedEditedNearestNeighbours": [[99, "examples-using-imblearn-under-sampling-repeatededitednearestneighbours"]], "TomekLinks": [[100, "tomeklinks"]], "Examples using imblearn.under_sampling.TomekLinks": [[100, "examples-using-imblearn-under-sampling-tomeklinks"]], "check_neighbors_object": [[101, "check-neighbors-object"]], "check_sampling_strategy": [[102, "check-sampling-strategy"]], "check_target_type": [[103, "check-target-type"]], "parametrize_with_checks": [[104, "parametrize-with-checks"]], "API reference": [[105, "api-reference"]], "Batch generator for Keras": [[106, "module-imblearn.keras"]], "Miscellaneous": [[108, "miscellaneous"]], "Over-sampling methods": [[109, "module-imblearn.over_sampling"]], "Basic over-sampling": [[109, "basic-over-sampling"]], "SMOTE algorithms": [[109, "smote-algorithms"]], "Batch generator for TensorFlow": [[111, "module-imblearn.tensorflow"]], "Under-sampling methods": [[112, "module-imblearn.under_sampling"]], "Prototype generation": [[112, "module-imblearn.under_sampling._prototype_generation"], [115, "prototype-generation"]], "Prototype selection": [[112, "module-imblearn.under_sampling._prototype_selection"], [115, "prototype-selection"]], "Utilities": [[113, "module-imblearn.utils"]], "Validation checks used in samplers": [[113, "validation-checks-used-in-samplers"]], "Testing compatibility of your own sampler": [[113, "module-imblearn.utils.estimator_checks"]], "Under-sampling": [[115, "under-sampling"]], "Controlled under-sampling techniques": [[115, "controlled-under-sampling-techniques"]], "Random under-sampling": [[115, "random-under-sampling"]], "Cleaning under-sampling techniques": [[115, "cleaning-under-sampling-techniques"]], "Tomek\u2019s links": [[115, "tomek-s-links"]], "Editing data using nearest neighbours": [[115, "editing-data-using-nearest-neighbours"]], "Edited nearest neighbours": [[115, "edited-nearest-neighbours"]], "Repeated Edited Nearest Neighbours": [[115, "repeated-edited-nearest-neighbours"]], "All KNN": [[115, "all-knn"]], "Condensed nearest neighbors": [[115, "condensed-nearest-neighbors"]], "One Sided Selection": [[115, "one-sided-selection"]], "Additional undersampling techniques": [[115, "additional-undersampling-techniques"]], "Instance hardness threshold": [[115, "id11"]], "User Guide": [[116, "user-guide"]], "Release history": [[117, "release-history"]], "Version 0.12.0 (Under development)": [[117, "version-0-12-0-under-development"], [121, "version-0-12-0-under-development"]], "Changelog": [[117, "changelog"], [117, "id1"], [117, "id3"], [117, "id7"], [117, "id9"], [117, "id14"], [117, "id15"], [117, "id16"], [117, "id17"], [117, "id22"], [117, "id27"], [117, "id28"], [117, "id30"], [117, "id35"], [117, "id39"], [117, "id41"], [117, "id48"], [117, "id49"], [117, "id50"], [118, "changelog"], [119, "changelog"], [119, "id1"], [120, "changelog"], [120, "id1"], [121, "changelog"], [122, "changelog"], [123, "changelog"], [124, "changelog"], [124, "id1"], [125, "changelog"], [126, "changelog"], [126, "id1"], [126, "id2"], [127, "changelog"], [128, "changelog"], [128, "id1"], [129, "changelog"], [129, "id1"]], "Bug fixes": [[117, "bug-fixes"], [117, "id2"], [117, "id4"], [117, "id8"], [117, "id10"], [117, "id19"], [117, "id24"], [117, "id29"], [117, "id32"], [117, "id40"], [117, "id44"], [119, "bug-fixes"], [119, "id2"], [120, "bug-fixes"], [120, "id2"], [121, "bug-fixes"], [122, "bug-fixes"], [123, "bug-fixes"], [124, "bug-fixes"], [124, "id2"], [126, "bug-fixes"], [126, "id3"], [127, "bug-fixes"], [128, "bug-fixes"]], "Compatibility": [[117, "compatibility"], [117, "id5"], [117, "id11"], [119, "compatibility"], [120, "compatibility"], [121, "compatibility"]], "Deprecations": [[117, "deprecations"], [121, "deprecations"]], "Enhancements": [[117, "enhancements"], [117, "id6"], [117, "id13"], [117, "id18"], [117, "id25"], [119, "enhancements"], [120, "enhancements"], [121, "enhancements"], [127, "enhancements"], [128, "enhancements"]], "Version 0.11.1": [[117, "version-0-11-1"], [120, "version-0-11-1"]], "Version 0.11.0": [[117, "version-0-11-0"], [120, "version-0-11-0"]], "Version 0.10.1": [[117, "version-0-10-1"], [119, "version-0-10-1"]], "Version 0.10.0": [[117, "version-0-10-0"], [119, "version-0-10-0"]], "Version 0.9.1": [[117, "version-0-9-1"], [129, "version-0-9-1"]], "Version 0.9.0": [[117, "version-0-9-0"], [129, "version-0-9-0"]], "Version 0.8.1": [[117, "version-0-8-1"], [128, "version-0-8-1"]], "Maintenance": [[117, "maintenance"], [117, "id20"], [117, "id23"], [117, "id33"], [117, "id38"], [117, "id45"], [124, "maintenance"], [125, "maintenance"], [126, "maintenance"], [127, "maintenance"], [128, "maintenance"], [128, "id2"]], "Version 0.8.0": [[117, "version-0-8-0"], [128, "version-0-8-0"]], "New features": [[117, "new-features"], [117, "id42"], [122, "new-features"], [123, "new-features"], [124, "new-features"], [128, "new-features"]], "Version 0.7.0": [[117, "version-0-7-0"], [127, "version-0-7-0"]], "Changed models": [[117, "changed-models"], [117, "id31"], [117, "id36"], [125, "changed-models"], [126, "changed-models"], [127, "changed-models"]], "Version 0.6.2": [[117, "version-0-6-2"], [126, "version-0-6-2"]], "Version 0.6.1": [[117, "version-0-6-1"], [126, "version-0-6-1"]], "Version 0.6.0": [[117, "version-0-6-0"], [126, "version-0-6-0"]], "Enhancement": [[117, "enhancement"], [117, "id37"], [117, "id43"], [122, "enhancement"], [123, "enhancement"], [124, "enhancement"], [125, "enhancement"], [126, "enhancement"]], "Version 0.5.0": [[117, "version-0-5-0"], [125, "version-0-5-0"]], "Documentation": [[117, "documentation"], [117, "id46"], [123, "documentation"], [124, "documentation"], [125, "documentation"]], "Bug": [[117, "bug"], [125, "bug"]], "Version 0.4.2": [[117, "version-0-4-2"], [124, "version-0-4-2"]], "Version 0.4": [[117, "version-0-4"], [124, "version-0-4"]], "Highlights": [[117, "highlights"], [124, "highlights"]], "API": [[117, "api"], [118, "api"], [124, "api"]], "Version 0.3": [[117, "version-0-3"], [123, "version-0-3"]], "Version 0.2": [[117, "version-0-2"], [122, "version-0-2"]], "Version 0.1": [[117, "version-0-1"], [118, "version-0-1"]], "New methods": [[118, "new-methods"]], "API changes summary": [[122, "api-changes-summary"], [123, "api-changes-summary"]], "Documentation changes": [[122, "documentation-changes"]], "Testing": [[123, "testing"]]}, "indexentries": {"imblearn.combine": [[57, "module-imblearn.combine"]], "module": [[57, "module-imblearn.combine"], [58, "module-imblearn.datasets"], [59, "module-imblearn.ensemble"], [106, "module-imblearn.keras"], [107, "module-imblearn.metrics"], [107, "module-imblearn.metrics.pairwise"], [109, "module-imblearn.over_sampling"], [110, "module-imblearn.pipeline"], [111, "module-imblearn.tensorflow"], [112, "module-imblearn.under_sampling"], [112, "module-imblearn.under_sampling._prototype_generation"], [112, "module-imblearn.under_sampling._prototype_selection"], [113, "module-imblearn.utils"], [113, "module-imblearn.utils.estimator_checks"]], "imblearn.datasets": [[58, "module-imblearn.datasets"]], "imblearn.ensemble": [[59, "module-imblearn.ensemble"]], "functionsampler (class in imblearn)": [[60, "imblearn.FunctionSampler"]], "fit() (imblearn.functionsampler method)": [[60, "imblearn.FunctionSampler.fit"]], "fit_resample() (imblearn.functionsampler method)": [[60, "imblearn.FunctionSampler.fit_resample"]], "get_feature_names_out() (imblearn.functionsampler method)": [[60, "imblearn.FunctionSampler.get_feature_names_out"]], "get_metadata_routing() (imblearn.functionsampler method)": [[60, "imblearn.FunctionSampler.get_metadata_routing"]], "get_params() (imblearn.functionsampler method)": [[60, "imblearn.FunctionSampler.get_params"]], "set_params() (imblearn.functionsampler method)": [[60, "imblearn.FunctionSampler.set_params"]], "smoteenn (class in imblearn.combine)": [[61, "imblearn.combine.SMOTEENN"]], "fit() (imblearn.combine.smoteenn method)": [[61, "imblearn.combine.SMOTEENN.fit"]], "fit_resample() (imblearn.combine.smoteenn method)": [[61, "imblearn.combine.SMOTEENN.fit_resample"]], "get_feature_names_out() (imblearn.combine.smoteenn method)": [[61, "imblearn.combine.SMOTEENN.get_feature_names_out"]], "get_metadata_routing() (imblearn.combine.smoteenn method)": [[61, "imblearn.combine.SMOTEENN.get_metadata_routing"]], "get_params() (imblearn.combine.smoteenn method)": [[61, "imblearn.combine.SMOTEENN.get_params"]], "set_params() (imblearn.combine.smoteenn method)": [[61, "imblearn.combine.SMOTEENN.set_params"]], "smotetomek (class in imblearn.combine)": [[62, "imblearn.combine.SMOTETomek"]], "fit() (imblearn.combine.smotetomek method)": [[62, "imblearn.combine.SMOTETomek.fit"]], "fit_resample() (imblearn.combine.smotetomek method)": [[62, "imblearn.combine.SMOTETomek.fit_resample"]], "get_feature_names_out() (imblearn.combine.smotetomek method)": [[62, "imblearn.combine.SMOTETomek.get_feature_names_out"]], "get_metadata_routing() (imblearn.combine.smotetomek method)": [[62, "imblearn.combine.SMOTETomek.get_metadata_routing"]], "get_params() (imblearn.combine.smotetomek method)": [[62, "imblearn.combine.SMOTETomek.get_params"]], "set_params() (imblearn.combine.smotetomek method)": [[62, "imblearn.combine.SMOTETomek.set_params"]], "fetch_datasets() (in module imblearn.datasets)": [[63, "imblearn.datasets.fetch_datasets"]], "make_imbalance() (in module imblearn.datasets)": [[64, "imblearn.datasets.make_imbalance"]], "balancedbaggingclassifier (class in imblearn.ensemble)": [[65, "imblearn.ensemble.BalancedBaggingClassifier"]], "base_estimator_ (imblearn.ensemble.balancedbaggingclassifier property)": [[65, "imblearn.ensemble.BalancedBaggingClassifier.base_estimator_"]], "decision_function() (imblearn.ensemble.balancedbaggingclassifier method)": [[65, "imblearn.ensemble.BalancedBaggingClassifier.decision_function"]], "estimators_samples_ (imblearn.ensemble.balancedbaggingclassifier property)": [[65, "imblearn.ensemble.BalancedBaggingClassifier.estimators_samples_"]], "fit() (imblearn.ensemble.balancedbaggingclassifier method)": [[65, "imblearn.ensemble.BalancedBaggingClassifier.fit"]], "get_metadata_routing() (imblearn.ensemble.balancedbaggingclassifier method)": [[65, "imblearn.ensemble.BalancedBaggingClassifier.get_metadata_routing"]], "get_params() (imblearn.ensemble.balancedbaggingclassifier method)": [[65, "imblearn.ensemble.BalancedBaggingClassifier.get_params"]], "n_features_ (imblearn.ensemble.balancedbaggingclassifier property)": [[65, "imblearn.ensemble.BalancedBaggingClassifier.n_features_"]], "predict() (imblearn.ensemble.balancedbaggingclassifier method)": [[65, "imblearn.ensemble.BalancedBaggingClassifier.predict"]], "predict_log_proba() (imblearn.ensemble.balancedbaggingclassifier method)": [[65, "imblearn.ensemble.BalancedBaggingClassifier.predict_log_proba"]], "predict_proba() (imblearn.ensemble.balancedbaggingclassifier method)": [[65, "imblearn.ensemble.BalancedBaggingClassifier.predict_proba"]], "score() (imblearn.ensemble.balancedbaggingclassifier method)": [[65, "imblearn.ensemble.BalancedBaggingClassifier.score"]], "set_fit_request() (imblearn.ensemble.balancedbaggingclassifier method)": [[65, "imblearn.ensemble.BalancedBaggingClassifier.set_fit_request"]], "set_params() (imblearn.ensemble.balancedbaggingclassifier method)": [[65, "imblearn.ensemble.BalancedBaggingClassifier.set_params"]], "set_score_request() (imblearn.ensemble.balancedbaggingclassifier method)": [[65, "imblearn.ensemble.BalancedBaggingClassifier.set_score_request"]], "balancedrandomforestclassifier (class in imblearn.ensemble)": [[66, "imblearn.ensemble.BalancedRandomForestClassifier"]], "apply() (imblearn.ensemble.balancedrandomforestclassifier method)": [[66, "imblearn.ensemble.BalancedRandomForestClassifier.apply"]], "decision_path() (imblearn.ensemble.balancedrandomforestclassifier method)": [[66, "imblearn.ensemble.BalancedRandomForestClassifier.decision_path"]], "estimators_samples_ (imblearn.ensemble.balancedrandomforestclassifier property)": [[66, "imblearn.ensemble.BalancedRandomForestClassifier.estimators_samples_"]], "feature_importances_ (imblearn.ensemble.balancedrandomforestclassifier property)": [[66, "imblearn.ensemble.BalancedRandomForestClassifier.feature_importances_"]], "fit() (imblearn.ensemble.balancedrandomforestclassifier method)": [[66, "imblearn.ensemble.BalancedRandomForestClassifier.fit"]], "get_metadata_routing() (imblearn.ensemble.balancedrandomforestclassifier method)": [[66, "imblearn.ensemble.BalancedRandomForestClassifier.get_metadata_routing"]], "get_params() (imblearn.ensemble.balancedrandomforestclassifier method)": [[66, "imblearn.ensemble.BalancedRandomForestClassifier.get_params"]], "n_features_ (imblearn.ensemble.balancedrandomforestclassifier property)": [[66, "imblearn.ensemble.BalancedRandomForestClassifier.n_features_"]], "predict() (imblearn.ensemble.balancedrandomforestclassifier method)": [[66, "imblearn.ensemble.BalancedRandomForestClassifier.predict"]], "predict_log_proba() (imblearn.ensemble.balancedrandomforestclassifier method)": [[66, "imblearn.ensemble.BalancedRandomForestClassifier.predict_log_proba"]], "predict_proba() (imblearn.ensemble.balancedrandomforestclassifier method)": [[66, "imblearn.ensemble.BalancedRandomForestClassifier.predict_proba"]], "score() (imblearn.ensemble.balancedrandomforestclassifier method)": [[66, "imblearn.ensemble.BalancedRandomForestClassifier.score"]], "set_fit_request() (imblearn.ensemble.balancedrandomforestclassifier method)": [[66, "imblearn.ensemble.BalancedRandomForestClassifier.set_fit_request"]], "set_params() (imblearn.ensemble.balancedrandomforestclassifier method)": [[66, "imblearn.ensemble.BalancedRandomForestClassifier.set_params"]], "set_score_request() (imblearn.ensemble.balancedrandomforestclassifier method)": [[66, "imblearn.ensemble.BalancedRandomForestClassifier.set_score_request"]], "easyensembleclassifier (class in imblearn.ensemble)": [[67, "imblearn.ensemble.EasyEnsembleClassifier"]], "base_estimator_ (imblearn.ensemble.easyensembleclassifier property)": [[67, "imblearn.ensemble.EasyEnsembleClassifier.base_estimator_"]], "decision_function() (imblearn.ensemble.easyensembleclassifier method)": [[67, "imblearn.ensemble.EasyEnsembleClassifier.decision_function"]], "estimators_samples_ (imblearn.ensemble.easyensembleclassifier property)": [[67, "imblearn.ensemble.EasyEnsembleClassifier.estimators_samples_"]], "fit() (imblearn.ensemble.easyensembleclassifier method)": [[67, "imblearn.ensemble.EasyEnsembleClassifier.fit"]], "get_metadata_routing() (imblearn.ensemble.easyensembleclassifier method)": [[67, "imblearn.ensemble.EasyEnsembleClassifier.get_metadata_routing"]], "get_params() (imblearn.ensemble.easyensembleclassifier method)": [[67, "imblearn.ensemble.EasyEnsembleClassifier.get_params"]], "n_features_ (imblearn.ensemble.easyensembleclassifier property)": [[67, "imblearn.ensemble.EasyEnsembleClassifier.n_features_"]], "predict() (imblearn.ensemble.easyensembleclassifier method)": [[67, "imblearn.ensemble.EasyEnsembleClassifier.predict"]], "predict_log_proba() (imblearn.ensemble.easyensembleclassifier method)": [[67, "imblearn.ensemble.EasyEnsembleClassifier.predict_log_proba"]], "predict_proba() (imblearn.ensemble.easyensembleclassifier method)": [[67, "imblearn.ensemble.EasyEnsembleClassifier.predict_proba"]], "score() (imblearn.ensemble.easyensembleclassifier method)": [[67, "imblearn.ensemble.EasyEnsembleClassifier.score"]], "set_fit_request() (imblearn.ensemble.easyensembleclassifier method)": [[67, "imblearn.ensemble.EasyEnsembleClassifier.set_fit_request"]], "set_params() (imblearn.ensemble.easyensembleclassifier method)": [[67, "imblearn.ensemble.EasyEnsembleClassifier.set_params"]], "set_score_request() (imblearn.ensemble.easyensembleclassifier method)": [[67, "imblearn.ensemble.EasyEnsembleClassifier.set_score_request"]], "rusboostclassifier (class in imblearn.ensemble)": [[68, "imblearn.ensemble.RUSBoostClassifier"]], "decision_function() (imblearn.ensemble.rusboostclassifier method)": [[68, "imblearn.ensemble.RUSBoostClassifier.decision_function"]], "feature_importances_ (imblearn.ensemble.rusboostclassifier property)": [[68, "imblearn.ensemble.RUSBoostClassifier.feature_importances_"]], "fit() (imblearn.ensemble.rusboostclassifier method)": [[68, "imblearn.ensemble.RUSBoostClassifier.fit"]], "get_metadata_routing() (imblearn.ensemble.rusboostclassifier method)": [[68, "imblearn.ensemble.RUSBoostClassifier.get_metadata_routing"]], "get_params() (imblearn.ensemble.rusboostclassifier method)": [[68, "imblearn.ensemble.RUSBoostClassifier.get_params"]], "predict() (imblearn.ensemble.rusboostclassifier method)": [[68, "imblearn.ensemble.RUSBoostClassifier.predict"]], "predict_log_proba() (imblearn.ensemble.rusboostclassifier method)": [[68, "imblearn.ensemble.RUSBoostClassifier.predict_log_proba"]], "predict_proba() (imblearn.ensemble.rusboostclassifier method)": [[68, "imblearn.ensemble.RUSBoostClassifier.predict_proba"]], "score() (imblearn.ensemble.rusboostclassifier method)": [[68, "imblearn.ensemble.RUSBoostClassifier.score"]], "set_fit_request() (imblearn.ensemble.rusboostclassifier method)": [[68, "imblearn.ensemble.RUSBoostClassifier.set_fit_request"]], "set_params() (imblearn.ensemble.rusboostclassifier method)": [[68, "imblearn.ensemble.RUSBoostClassifier.set_params"]], "set_score_request() (imblearn.ensemble.rusboostclassifier method)": [[68, "imblearn.ensemble.RUSBoostClassifier.set_score_request"]], "staged_decision_function() (imblearn.ensemble.rusboostclassifier method)": [[68, "imblearn.ensemble.RUSBoostClassifier.staged_decision_function"]], "staged_predict() (imblearn.ensemble.rusboostclassifier method)": [[68, "imblearn.ensemble.RUSBoostClassifier.staged_predict"]], "staged_predict_proba() (imblearn.ensemble.rusboostclassifier method)": [[68, "imblearn.ensemble.RUSBoostClassifier.staged_predict_proba"]], "staged_score() (imblearn.ensemble.rusboostclassifier method)": [[68, "imblearn.ensemble.RUSBoostClassifier.staged_score"]], "balancedbatchgenerator (class in imblearn.keras)": [[69, "imblearn.keras.BalancedBatchGenerator"]], "on_epoch_end() (imblearn.keras.balancedbatchgenerator method)": [[69, "imblearn.keras.BalancedBatchGenerator.on_epoch_end"]], "balanced_batch_generator() (in module imblearn.keras)": [[70, "imblearn.keras.balanced_batch_generator"]], "classification_report_imbalanced() (in module imblearn.metrics)": [[71, "imblearn.metrics.classification_report_imbalanced"]], "geometric_mean_score() (in module imblearn.metrics)": [[72, "imblearn.metrics.geometric_mean_score"]], "macro_averaged_mean_absolute_error() (in module imblearn.metrics)": [[73, "imblearn.metrics.macro_averaged_mean_absolute_error"]], "make_index_balanced_accuracy() (in module imblearn.metrics)": [[74, "imblearn.metrics.make_index_balanced_accuracy"]], "valuedifferencemetric (class in imblearn.metrics.pairwise)": [[75, "imblearn.metrics.pairwise.ValueDifferenceMetric"]], "fit() (imblearn.metrics.pairwise.valuedifferencemetric method)": [[75, "imblearn.metrics.pairwise.ValueDifferenceMetric.fit"]], "get_metadata_routing() (imblearn.metrics.pairwise.valuedifferencemetric method)": [[75, "imblearn.metrics.pairwise.ValueDifferenceMetric.get_metadata_routing"]], "get_params() (imblearn.metrics.pairwise.valuedifferencemetric method)": [[75, "imblearn.metrics.pairwise.ValueDifferenceMetric.get_params"]], "pairwise() (imblearn.metrics.pairwise.valuedifferencemetric method)": [[75, "imblearn.metrics.pairwise.ValueDifferenceMetric.pairwise"]], "set_params() (imblearn.metrics.pairwise.valuedifferencemetric method)": [[75, "imblearn.metrics.pairwise.ValueDifferenceMetric.set_params"]], "sensitivity_score() (in module imblearn.metrics)": [[76, "imblearn.metrics.sensitivity_score"]], "sensitivity_specificity_support() (in module imblearn.metrics)": [[77, "imblearn.metrics.sensitivity_specificity_support"]], "specificity_score() (in module imblearn.metrics)": [[78, "imblearn.metrics.specificity_score"]], "adasyn (class in imblearn.over_sampling)": [[79, "imblearn.over_sampling.ADASYN"]], "fit() (imblearn.over_sampling.adasyn method)": [[79, "imblearn.over_sampling.ADASYN.fit"]], "fit_resample() (imblearn.over_sampling.adasyn method)": [[79, "imblearn.over_sampling.ADASYN.fit_resample"]], "get_feature_names_out() (imblearn.over_sampling.adasyn method)": [[79, "imblearn.over_sampling.ADASYN.get_feature_names_out"]], "get_metadata_routing() (imblearn.over_sampling.adasyn method)": [[79, "imblearn.over_sampling.ADASYN.get_metadata_routing"]], "get_params() (imblearn.over_sampling.adasyn method)": [[79, "imblearn.over_sampling.ADASYN.get_params"]], "set_params() (imblearn.over_sampling.adasyn method)": [[79, "imblearn.over_sampling.ADASYN.set_params"]], "borderlinesmote (class in imblearn.over_sampling)": [[80, "imblearn.over_sampling.BorderlineSMOTE"]], "fit() (imblearn.over_sampling.borderlinesmote method)": [[80, "imblearn.over_sampling.BorderlineSMOTE.fit"]], "fit_resample() (imblearn.over_sampling.borderlinesmote method)": [[80, "imblearn.over_sampling.BorderlineSMOTE.fit_resample"]], "get_feature_names_out() (imblearn.over_sampling.borderlinesmote method)": [[80, "imblearn.over_sampling.BorderlineSMOTE.get_feature_names_out"]], "get_metadata_routing() (imblearn.over_sampling.borderlinesmote method)": [[80, "imblearn.over_sampling.BorderlineSMOTE.get_metadata_routing"]], "get_params() (imblearn.over_sampling.borderlinesmote method)": [[80, "imblearn.over_sampling.BorderlineSMOTE.get_params"]], "set_params() (imblearn.over_sampling.borderlinesmote method)": [[80, "imblearn.over_sampling.BorderlineSMOTE.set_params"]], "kmeanssmote (class in imblearn.over_sampling)": [[81, "imblearn.over_sampling.KMeansSMOTE"]], "fit() (imblearn.over_sampling.kmeanssmote method)": [[81, "imblearn.over_sampling.KMeansSMOTE.fit"]], "fit_resample() (imblearn.over_sampling.kmeanssmote method)": [[81, "imblearn.over_sampling.KMeansSMOTE.fit_resample"]], "get_feature_names_out() (imblearn.over_sampling.kmeanssmote method)": [[81, "imblearn.over_sampling.KMeansSMOTE.get_feature_names_out"]], "get_metadata_routing() (imblearn.over_sampling.kmeanssmote method)": [[81, "imblearn.over_sampling.KMeansSMOTE.get_metadata_routing"]], "get_params() (imblearn.over_sampling.kmeanssmote method)": [[81, "imblearn.over_sampling.KMeansSMOTE.get_params"]], "set_params() (imblearn.over_sampling.kmeanssmote method)": [[81, "imblearn.over_sampling.KMeansSMOTE.set_params"]], "randomoversampler (class in imblearn.over_sampling)": [[82, "imblearn.over_sampling.RandomOverSampler"]], "fit() (imblearn.over_sampling.randomoversampler method)": [[82, "imblearn.over_sampling.RandomOverSampler.fit"]], "fit_resample() (imblearn.over_sampling.randomoversampler method)": [[82, "imblearn.over_sampling.RandomOverSampler.fit_resample"]], "get_feature_names_out() (imblearn.over_sampling.randomoversampler method)": [[82, "imblearn.over_sampling.RandomOverSampler.get_feature_names_out"]], "get_metadata_routing() (imblearn.over_sampling.randomoversampler method)": [[82, "imblearn.over_sampling.RandomOverSampler.get_metadata_routing"]], "get_params() (imblearn.over_sampling.randomoversampler method)": [[82, "imblearn.over_sampling.RandomOverSampler.get_params"]], "set_params() (imblearn.over_sampling.randomoversampler method)": [[82, "imblearn.over_sampling.RandomOverSampler.set_params"]], "smote (class in imblearn.over_sampling)": [[83, "imblearn.over_sampling.SMOTE"]], "fit() (imblearn.over_sampling.smote method)": [[83, "imblearn.over_sampling.SMOTE.fit"]], "fit_resample() (imblearn.over_sampling.smote method)": [[83, "imblearn.over_sampling.SMOTE.fit_resample"]], "get_feature_names_out() (imblearn.over_sampling.smote method)": [[83, "imblearn.over_sampling.SMOTE.get_feature_names_out"]], "get_metadata_routing() (imblearn.over_sampling.smote method)": [[83, "imblearn.over_sampling.SMOTE.get_metadata_routing"]], "get_params() (imblearn.over_sampling.smote method)": [[83, "imblearn.over_sampling.SMOTE.get_params"]], "set_params() (imblearn.over_sampling.smote method)": [[83, "imblearn.over_sampling.SMOTE.set_params"]], "smoten (class in imblearn.over_sampling)": [[84, "imblearn.over_sampling.SMOTEN"]], "fit() (imblearn.over_sampling.smoten method)": [[84, "imblearn.over_sampling.SMOTEN.fit"]], "fit_resample() (imblearn.over_sampling.smoten method)": [[84, "imblearn.over_sampling.SMOTEN.fit_resample"]], "get_feature_names_out() (imblearn.over_sampling.smoten method)": [[84, "imblearn.over_sampling.SMOTEN.get_feature_names_out"]], "get_metadata_routing() (imblearn.over_sampling.smoten method)": [[84, "imblearn.over_sampling.SMOTEN.get_metadata_routing"]], "get_params() (imblearn.over_sampling.smoten method)": [[84, "imblearn.over_sampling.SMOTEN.get_params"]], "set_params() (imblearn.over_sampling.smoten method)": [[84, "imblearn.over_sampling.SMOTEN.set_params"]], "smotenc (class in imblearn.over_sampling)": [[85, "imblearn.over_sampling.SMOTENC"]], "fit() (imblearn.over_sampling.smotenc method)": [[85, "imblearn.over_sampling.SMOTENC.fit"]], "fit_resample() (imblearn.over_sampling.smotenc method)": [[85, "imblearn.over_sampling.SMOTENC.fit_resample"]], "get_feature_names_out() (imblearn.over_sampling.smotenc method)": [[85, "imblearn.over_sampling.SMOTENC.get_feature_names_out"]], "get_metadata_routing() (imblearn.over_sampling.smotenc method)": [[85, "imblearn.over_sampling.SMOTENC.get_metadata_routing"]], "get_params() (imblearn.over_sampling.smotenc method)": [[85, "imblearn.over_sampling.SMOTENC.get_params"]], "ohe_ (imblearn.over_sampling.smotenc property)": [[85, "imblearn.over_sampling.SMOTENC.ohe_"]], "set_params() (imblearn.over_sampling.smotenc method)": [[85, "imblearn.over_sampling.SMOTENC.set_params"]], "svmsmote (class in imblearn.over_sampling)": [[86, "imblearn.over_sampling.SVMSMOTE"]], "fit() (imblearn.over_sampling.svmsmote method)": [[86, "imblearn.over_sampling.SVMSMOTE.fit"]], "fit_resample() (imblearn.over_sampling.svmsmote method)": [[86, "imblearn.over_sampling.SVMSMOTE.fit_resample"]], "get_feature_names_out() (imblearn.over_sampling.svmsmote method)": [[86, "imblearn.over_sampling.SVMSMOTE.get_feature_names_out"]], "get_metadata_routing() (imblearn.over_sampling.svmsmote method)": [[86, "imblearn.over_sampling.SVMSMOTE.get_metadata_routing"]], "get_params() (imblearn.over_sampling.svmsmote method)": [[86, "imblearn.over_sampling.SVMSMOTE.get_params"]], "set_params() (imblearn.over_sampling.svmsmote method)": [[86, "imblearn.over_sampling.SVMSMOTE.set_params"]], "pipeline (class in imblearn.pipeline)": [[87, "imblearn.pipeline.Pipeline"]], "classes_ (imblearn.pipeline.pipeline property)": [[87, "imblearn.pipeline.Pipeline.classes_"]], "decision_function() (imblearn.pipeline.pipeline method)": [[87, "imblearn.pipeline.Pipeline.decision_function"]], "feature_names_in_ (imblearn.pipeline.pipeline property)": [[87, "imblearn.pipeline.Pipeline.feature_names_in_"]], "fit() (imblearn.pipeline.pipeline method)": [[87, "imblearn.pipeline.Pipeline.fit"]], "fit_predict() (imblearn.pipeline.pipeline method)": [[87, "imblearn.pipeline.Pipeline.fit_predict"]], "fit_resample() (imblearn.pipeline.pipeline method)": [[87, "imblearn.pipeline.Pipeline.fit_resample"]], "fit_transform() (imblearn.pipeline.pipeline method)": [[87, "imblearn.pipeline.Pipeline.fit_transform"]], "get_feature_names_out() (imblearn.pipeline.pipeline method)": [[87, "imblearn.pipeline.Pipeline.get_feature_names_out"]], "get_metadata_routing() (imblearn.pipeline.pipeline method)": [[87, "imblearn.pipeline.Pipeline.get_metadata_routing"]], "get_params() (imblearn.pipeline.pipeline method)": [[87, "imblearn.pipeline.Pipeline.get_params"]], "inverse_transform() (imblearn.pipeline.pipeline method)": [[87, "imblearn.pipeline.Pipeline.inverse_transform"]], "n_features_in_ (imblearn.pipeline.pipeline property)": [[87, "imblearn.pipeline.Pipeline.n_features_in_"]], "named_steps (imblearn.pipeline.pipeline property)": [[87, "imblearn.pipeline.Pipeline.named_steps"]], "predict() (imblearn.pipeline.pipeline method)": [[87, "imblearn.pipeline.Pipeline.predict"]], "predict_log_proba() (imblearn.pipeline.pipeline method)": [[87, "imblearn.pipeline.Pipeline.predict_log_proba"]], "predict_proba() (imblearn.pipeline.pipeline method)": [[87, "imblearn.pipeline.Pipeline.predict_proba"]], "score() (imblearn.pipeline.pipeline method)": [[87, "imblearn.pipeline.Pipeline.score"]], "score_samples() (imblearn.pipeline.pipeline method)": [[87, "imblearn.pipeline.Pipeline.score_samples"]], "set_output() (imblearn.pipeline.pipeline method)": [[87, "imblearn.pipeline.Pipeline.set_output"]], "set_params() (imblearn.pipeline.pipeline method)": [[87, "imblearn.pipeline.Pipeline.set_params"]], "set_score_request() (imblearn.pipeline.pipeline method)": [[87, "imblearn.pipeline.Pipeline.set_score_request"]], "transform() (imblearn.pipeline.pipeline method)": [[87, "imblearn.pipeline.Pipeline.transform"]], "make_pipeline() (in module imblearn.pipeline)": [[88, "imblearn.pipeline.make_pipeline"]], "balanced_batch_generator() (in module imblearn.tensorflow)": [[89, "imblearn.tensorflow.balanced_batch_generator"]], "allknn (class in imblearn.under_sampling)": [[90, "imblearn.under_sampling.AllKNN"]], "fit() (imblearn.under_sampling.allknn method)": [[90, "imblearn.under_sampling.AllKNN.fit"]], "fit_resample() (imblearn.under_sampling.allknn method)": [[90, "imblearn.under_sampling.AllKNN.fit_resample"]], "get_feature_names_out() (imblearn.under_sampling.allknn method)": [[90, "imblearn.under_sampling.AllKNN.get_feature_names_out"]], "get_metadata_routing() (imblearn.under_sampling.allknn method)": [[90, "imblearn.under_sampling.AllKNN.get_metadata_routing"]], "get_params() (imblearn.under_sampling.allknn method)": [[90, "imblearn.under_sampling.AllKNN.get_params"]], "set_params() (imblearn.under_sampling.allknn method)": [[90, "imblearn.under_sampling.AllKNN.set_params"]], "clustercentroids (class in imblearn.under_sampling)": [[91, "imblearn.under_sampling.ClusterCentroids"]], "fit() (imblearn.under_sampling.clustercentroids method)": [[91, "imblearn.under_sampling.ClusterCentroids.fit"]], "fit_resample() (imblearn.under_sampling.clustercentroids method)": [[91, "imblearn.under_sampling.ClusterCentroids.fit_resample"]], "get_feature_names_out() (imblearn.under_sampling.clustercentroids method)": [[91, "imblearn.under_sampling.ClusterCentroids.get_feature_names_out"]], "get_metadata_routing() (imblearn.under_sampling.clustercentroids method)": [[91, "imblearn.under_sampling.ClusterCentroids.get_metadata_routing"]], "get_params() (imblearn.under_sampling.clustercentroids method)": [[91, "imblearn.under_sampling.ClusterCentroids.get_params"]], "set_params() (imblearn.under_sampling.clustercentroids method)": [[91, "imblearn.under_sampling.ClusterCentroids.set_params"]], "condensednearestneighbour (class in imblearn.under_sampling)": [[92, "imblearn.under_sampling.CondensedNearestNeighbour"]], "estimator_ (imblearn.under_sampling.condensednearestneighbour property)": [[92, "imblearn.under_sampling.CondensedNearestNeighbour.estimator_"]], "fit() (imblearn.under_sampling.condensednearestneighbour method)": [[92, "imblearn.under_sampling.CondensedNearestNeighbour.fit"]], "fit_resample() (imblearn.under_sampling.condensednearestneighbour method)": [[92, "imblearn.under_sampling.CondensedNearestNeighbour.fit_resample"]], "get_feature_names_out() (imblearn.under_sampling.condensednearestneighbour method)": [[92, "imblearn.under_sampling.CondensedNearestNeighbour.get_feature_names_out"]], "get_metadata_routing() (imblearn.under_sampling.condensednearestneighbour method)": [[92, "imblearn.under_sampling.CondensedNearestNeighbour.get_metadata_routing"]], "get_params() (imblearn.under_sampling.condensednearestneighbour method)": [[92, "imblearn.under_sampling.CondensedNearestNeighbour.get_params"]], "set_params() (imblearn.under_sampling.condensednearestneighbour method)": [[92, "imblearn.under_sampling.CondensedNearestNeighbour.set_params"]], "editednearestneighbours (class in imblearn.under_sampling)": [[93, "imblearn.under_sampling.EditedNearestNeighbours"]], "fit() (imblearn.under_sampling.editednearestneighbours method)": [[93, "imblearn.under_sampling.EditedNearestNeighbours.fit"]], "fit_resample() (imblearn.under_sampling.editednearestneighbours method)": [[93, "imblearn.under_sampling.EditedNearestNeighbours.fit_resample"]], "get_feature_names_out() (imblearn.under_sampling.editednearestneighbours method)": [[93, "imblearn.under_sampling.EditedNearestNeighbours.get_feature_names_out"]], "get_metadata_routing() (imblearn.under_sampling.editednearestneighbours method)": [[93, "imblearn.under_sampling.EditedNearestNeighbours.get_metadata_routing"]], "get_params() (imblearn.under_sampling.editednearestneighbours method)": [[93, "imblearn.under_sampling.EditedNearestNeighbours.get_params"]], "set_params() (imblearn.under_sampling.editednearestneighbours method)": [[93, "imblearn.under_sampling.EditedNearestNeighbours.set_params"]], "instancehardnessthreshold (class in imblearn.under_sampling)": [[94, "imblearn.under_sampling.InstanceHardnessThreshold"]], "fit() (imblearn.under_sampling.instancehardnessthreshold method)": [[94, "imblearn.under_sampling.InstanceHardnessThreshold.fit"]], "fit_resample() (imblearn.under_sampling.instancehardnessthreshold method)": [[94, "imblearn.under_sampling.InstanceHardnessThreshold.fit_resample"]], "get_feature_names_out() (imblearn.under_sampling.instancehardnessthreshold method)": [[94, "imblearn.under_sampling.InstanceHardnessThreshold.get_feature_names_out"]], "get_metadata_routing() (imblearn.under_sampling.instancehardnessthreshold method)": [[94, "imblearn.under_sampling.InstanceHardnessThreshold.get_metadata_routing"]], "get_params() (imblearn.under_sampling.instancehardnessthreshold method)": [[94, "imblearn.under_sampling.InstanceHardnessThreshold.get_params"]], "set_params() (imblearn.under_sampling.instancehardnessthreshold method)": [[94, "imblearn.under_sampling.InstanceHardnessThreshold.set_params"]], "nearmiss (class in imblearn.under_sampling)": [[95, "imblearn.under_sampling.NearMiss"]], "fit() (imblearn.under_sampling.nearmiss method)": [[95, "imblearn.under_sampling.NearMiss.fit"]], "fit_resample() (imblearn.under_sampling.nearmiss method)": [[95, "imblearn.under_sampling.NearMiss.fit_resample"]], "get_feature_names_out() (imblearn.under_sampling.nearmiss method)": [[95, "imblearn.under_sampling.NearMiss.get_feature_names_out"]], "get_metadata_routing() (imblearn.under_sampling.nearmiss method)": [[95, "imblearn.under_sampling.NearMiss.get_metadata_routing"]], "get_params() (imblearn.under_sampling.nearmiss method)": [[95, "imblearn.under_sampling.NearMiss.get_params"]], "set_params() (imblearn.under_sampling.nearmiss method)": [[95, "imblearn.under_sampling.NearMiss.set_params"]], "neighbourhoodcleaningrule (class in imblearn.under_sampling)": [[96, "imblearn.under_sampling.NeighbourhoodCleaningRule"]], "fit() (imblearn.under_sampling.neighbourhoodcleaningrule method)": [[96, "imblearn.under_sampling.NeighbourhoodCleaningRule.fit"]], "fit_resample() (imblearn.under_sampling.neighbourhoodcleaningrule method)": [[96, "imblearn.under_sampling.NeighbourhoodCleaningRule.fit_resample"]], "get_feature_names_out() (imblearn.under_sampling.neighbourhoodcleaningrule method)": [[96, "imblearn.under_sampling.NeighbourhoodCleaningRule.get_feature_names_out"]], "get_metadata_routing() (imblearn.under_sampling.neighbourhoodcleaningrule method)": [[96, "imblearn.under_sampling.NeighbourhoodCleaningRule.get_metadata_routing"]], "get_params() (imblearn.under_sampling.neighbourhoodcleaningrule method)": [[96, "imblearn.under_sampling.NeighbourhoodCleaningRule.get_params"]], "set_params() (imblearn.under_sampling.neighbourhoodcleaningrule method)": [[96, "imblearn.under_sampling.NeighbourhoodCleaningRule.set_params"]], "onesidedselection (class in imblearn.under_sampling)": [[97, "imblearn.under_sampling.OneSidedSelection"]], "estimator_ (imblearn.under_sampling.onesidedselection property)": [[97, "imblearn.under_sampling.OneSidedSelection.estimator_"]], "fit() (imblearn.under_sampling.onesidedselection method)": [[97, "imblearn.under_sampling.OneSidedSelection.fit"]], "fit_resample() (imblearn.under_sampling.onesidedselection method)": [[97, "imblearn.under_sampling.OneSidedSelection.fit_resample"]], "get_feature_names_out() (imblearn.under_sampling.onesidedselection method)": [[97, "imblearn.under_sampling.OneSidedSelection.get_feature_names_out"]], "get_metadata_routing() (imblearn.under_sampling.onesidedselection method)": [[97, "imblearn.under_sampling.OneSidedSelection.get_metadata_routing"]], "get_params() (imblearn.under_sampling.onesidedselection method)": [[97, "imblearn.under_sampling.OneSidedSelection.get_params"]], "set_params() (imblearn.under_sampling.onesidedselection method)": [[97, "imblearn.under_sampling.OneSidedSelection.set_params"]], "randomundersampler (class in imblearn.under_sampling)": [[98, "imblearn.under_sampling.RandomUnderSampler"]], "fit() (imblearn.under_sampling.randomundersampler method)": [[98, "imblearn.under_sampling.RandomUnderSampler.fit"]], "fit_resample() (imblearn.under_sampling.randomundersampler method)": [[98, "imblearn.under_sampling.RandomUnderSampler.fit_resample"]], "get_feature_names_out() (imblearn.under_sampling.randomundersampler method)": [[98, "imblearn.under_sampling.RandomUnderSampler.get_feature_names_out"]], "get_metadata_routing() (imblearn.under_sampling.randomundersampler method)": [[98, "imblearn.under_sampling.RandomUnderSampler.get_metadata_routing"]], "get_params() (imblearn.under_sampling.randomundersampler method)": [[98, "imblearn.under_sampling.RandomUnderSampler.get_params"]], "set_params() (imblearn.under_sampling.randomundersampler method)": [[98, "imblearn.under_sampling.RandomUnderSampler.set_params"]], "repeatededitednearestneighbours (class in imblearn.under_sampling)": [[99, "imblearn.under_sampling.RepeatedEditedNearestNeighbours"]], "fit() (imblearn.under_sampling.repeatededitednearestneighbours method)": [[99, "imblearn.under_sampling.RepeatedEditedNearestNeighbours.fit"]], "fit_resample() (imblearn.under_sampling.repeatededitednearestneighbours method)": [[99, "imblearn.under_sampling.RepeatedEditedNearestNeighbours.fit_resample"]], "get_feature_names_out() (imblearn.under_sampling.repeatededitednearestneighbours method)": [[99, "imblearn.under_sampling.RepeatedEditedNearestNeighbours.get_feature_names_out"]], "get_metadata_routing() (imblearn.under_sampling.repeatededitednearestneighbours method)": [[99, "imblearn.under_sampling.RepeatedEditedNearestNeighbours.get_metadata_routing"]], "get_params() (imblearn.under_sampling.repeatededitednearestneighbours method)": [[99, "imblearn.under_sampling.RepeatedEditedNearestNeighbours.get_params"]], "set_params() (imblearn.under_sampling.repeatededitednearestneighbours method)": [[99, "imblearn.under_sampling.RepeatedEditedNearestNeighbours.set_params"]], "tomeklinks (class in imblearn.under_sampling)": [[100, "imblearn.under_sampling.TomekLinks"]], "fit() (imblearn.under_sampling.tomeklinks method)": [[100, "imblearn.under_sampling.TomekLinks.fit"]], "fit_resample() (imblearn.under_sampling.tomeklinks method)": [[100, "imblearn.under_sampling.TomekLinks.fit_resample"]], "get_feature_names_out() (imblearn.under_sampling.tomeklinks method)": [[100, "imblearn.under_sampling.TomekLinks.get_feature_names_out"]], "get_metadata_routing() (imblearn.under_sampling.tomeklinks method)": [[100, "imblearn.under_sampling.TomekLinks.get_metadata_routing"]], "get_params() (imblearn.under_sampling.tomeklinks method)": [[100, "imblearn.under_sampling.TomekLinks.get_params"]], "is_tomek() (imblearn.under_sampling.tomeklinks static method)": [[100, "imblearn.under_sampling.TomekLinks.is_tomek"]], "set_params() (imblearn.under_sampling.tomeklinks method)": [[100, "imblearn.under_sampling.TomekLinks.set_params"]], "check_neighbors_object() (in module imblearn.utils)": [[101, "imblearn.utils.check_neighbors_object"]], "check_sampling_strategy() (in module imblearn.utils)": [[102, "imblearn.utils.check_sampling_strategy"]], "check_target_type() (in module imblearn.utils)": [[103, "imblearn.utils.check_target_type"]], "parametrize_with_checks() (in module imblearn.utils.estimator_checks)": [[104, "imblearn.utils.estimator_checks.parametrize_with_checks"]], "imblearn.keras": [[106, "module-imblearn.keras"]], "imblearn.metrics": [[107, "module-imblearn.metrics"]], "imblearn.metrics.pairwise": [[107, "module-imblearn.metrics.pairwise"]], "imblearn.over_sampling": [[109, "module-imblearn.over_sampling"]], "imblearn.pipeline": [[110, "module-imblearn.pipeline"]], "imblearn.tensorflow": [[111, "module-imblearn.tensorflow"]], "imblearn.under_sampling": [[112, "module-imblearn.under_sampling"]], "imblearn.under_sampling._prototype_generation": [[112, "module-imblearn.under_sampling._prototype_generation"]], "imblearn.under_sampling._prototype_selection": [[112, "module-imblearn.under_sampling._prototype_selection"]], "imblearn.utils": [[113, "module-imblearn.utils"]], "imblearn.utils.estimator_checks": [[113, "module-imblearn.utils.estimator_checks"]]}})