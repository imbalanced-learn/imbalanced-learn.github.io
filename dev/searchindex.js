Search.setIndex({"alltitles": {"A practical guide": [[56, "a-practical-guide"]], "ADASYN": [[79, null]], "API": [[117, "api"], [119, "api"], [125, "api"]], "API changes summary": [[123, "api-changes-summary"], [124, "api-changes-summary"]], "API reference": [[105, null]], "API\u2019s of imbalanced-learn samplers": [[51, "api-s-of-imbalanced-learn-samplers"]], "About us": [[0, null]], "Additional metrics specific to imbalanced datasets": [[52, "additional-metrics-specific-to-imbalanced-datasets"]], "Additional undersampling techniques": [[115, "additional-undersampling-techniques"]], "All KNN": [[115, "all-knn"]], "AllKNN": [[90, null]], "Bagging algorithms": [[59, "bagging-algorithms"]], "Bagging classifier": [[48, "bagging-classifier"]], "Bagging classifiers using sampler": [[19, null]], "BalancedBaggingClassifier": [[65, null]], "BalancedBatchGenerator": [[69, null]], "BalancedRandomForestClassifier": [[66, null]], "Balancing the class before classification": [[9, "balancing-the-class-before-classification"]], "Basic over-sampling": [[109, "basic-over-sampling"]], "Batch generator for Keras": [[106, null]], "Batch generator for TensorFlow": [[111, null]], "Benchmark over-sampling methods in a face recognition task": [[8, null]], "Boosting": [[48, "boosting"]], "Boosting algorithms": [[59, "boosting-algorithms"]], "Boosting classifier": [[20, "boosting-classifier"]], "BorderlineSMOTE": [[80, null]], "Bug": [[117, "bug"], [126, "bug"]], "Bug fix release": [[47, "bug-fix-release"]], "Bug fixes": [[117, "bug-fixes"], [117, "id5"], [117, "id8"], [117, "id11"], [117, "id15"], [117, "id17"], [117, "id26"], [117, "id31"], [117, "id36"], [117, "id39"], [117, "id47"], [117, "id51"], [118, "bug-fixes"], [120, "bug-fixes"], [120, "id2"], [121, "bug-fixes"], [122, "bug-fixes"], [122, "id5"], [122, "id8"], [123, "bug-fixes"], [124, "bug-fixes"], [125, "bug-fixes"], [125, "id2"], [127, "bug-fixes"], [127, "id3"], [128, "bug-fixes"], [129, "bug-fixes"]], "Changed models": [[117, "changed-models"], [117, "id38"], [117, "id43"], [126, "changed-models"], [127, "changed-models"], [128, "changed-models"]], "Changelog": [[117, "changelog"], [117, "id1"], [117, "id3"], [117, "id4"], [117, "id7"], [117, "id10"], [117, "id14"], [117, "id16"], [117, "id21"], [117, "id22"], [117, "id23"], [117, "id24"], [117, "id29"], [117, "id34"], [117, "id35"], [117, "id37"], [117, "id42"], [117, "id46"], [117, "id48"], [117, "id55"], [117, "id56"], [117, "id57"], [118, "changelog"], [119, "changelog"], [120, "changelog"], [120, "id1"], [121, "changelog"], [122, "changelog"], [122, "id1"], [122, "id3"], [122, "id4"], [122, "id7"], [123, "changelog"], [124, "changelog"], [125, "changelog"], [125, "id1"], [126, "changelog"], [127, "changelog"], [127, "id1"], [127, "id2"], [128, "changelog"], [129, "changelog"], [129, "id1"], [130, "changelog"], [130, "id1"]], "Citing imbalanced-learn": [[0, "citing-imbalanced-learn"]], "Classification loop": [[10, "classification-loop"]], "Classification metrics": [[52, "classification-metrics"], [107, "classification-metrics"]], "Classification using a single decision tree": [[20, "classification-using-a-single-decision-tree"]], "Classification using bagging classifier with and without sampling": [[20, "classification-using-bagging-classifier-with-and-without-sampling"]], "Classification using random forest classifier with and without sampling": [[20, "classification-using-random-forest-classifier-with-and-without-sampling"]], "Classifier including inner balancing samplers": [[48, "classifier-including-inner-balancing-samplers"]], "Cleaning under-sampling techniques": [[115, "cleaning-under-sampling-techniques"]], "ClusterCentroids": [[91, null]], "Combination of over- and under-sampling": [[44, null]], "Combination of over- and under-sampling methods": [[57, null]], "Common pitfalls and recommended practices": [[45, null]], "Compare ensemble classifiers using resampling": [[20, null]], "Compare over-sampling approaches": [[8, "compare-over-sampling-approaches"]], "Compare over-sampling samplers": [[31, null]], "Compare sampler combining over- and under-sampling": [[13, null]], "Compare under-sampling samplers": [[40, null]], "Compatibility": [[117, "compatibility"], [117, "id2"], [117, "id6"], [117, "id9"], [117, "id12"], [117, "id18"], [118, "compatibility"], [120, "compatibility"], [121, "compatibility"], [122, "compatibility"], [122, "id2"], [122, "id6"], [122, "id9"]], "Computation times": [[3, null], [11, null], [14, null], [17, null], [21, null], [25, null], [29, null], [34, null], [37, null], [38, null], [43, null], [114, null]], "Condensed nearest neighbors": [[115, "condensed-nearest-neighbors"]], "CondensedNearestNeighbour": [[92, null]], "Contribute": [[50, "contribute"]], "Contributors": [[0, "contributors"]], "Controlled under-sampling techniques": [[115, "controlled-under-sampling-techniques"]], "Create a neural-network": [[10, "create-a-neural-network"]], "Create an imbalanced dataset": [[2, "create-an-imbalanced-dataset"], [16, null]], "Custom generators": [[55, "custom-generators"]], "Custom samplers": [[55, "custom-samplers"]], "Customized sampler to implement an outlier rejections estimator": [[7, null]], "Data leakage": [[45, "data-leakage"]], "Data loading": [[10, "data-loading"]], "Dataset examples": [[15, null], [26, "dataset-examples"]], "Dataset generation": [[13, "dataset-generation"]], "Dataset loading utilities": [[46, null]], "Datasets": [[58, null]], "Define the pre-processing pipeline": [[10, "define-the-pre-processing-pipeline"]], "Deprecation": [[47, "deprecation"], [117, "deprecation"], [117, "id19"], [117, "id28"], [117, "id33"], [117, "id41"], [117, "id54"], [120, "deprecation"], [121, "deprecation"], [124, "deprecation"], [125, "deprecation"], [127, "deprecation"], [128, "deprecation"], [129, "deprecation"]], "Deprecations": [[117, "deprecations"], [118, "deprecations"], [122, "deprecations"]], "Developer guideline": [[47, null]], "Developer utilities": [[47, "developer-utilities"]], "Development lead": [[0, "development-lead"]], "Documentation": [[117, "documentation"], [117, "id53"], [124, "documentation"], [125, "documentation"], [126, "documentation"]], "Documentation changes": [[123, "documentation-changes"]], "Dummy baseline": [[5, "dummy-baseline"]], "EasyEnsembleClassifier": [[67, null]], "Edited nearest neighbours": [[115, "edited-nearest-neighbours"]], "EditedNearestNeighbours": [[93, null]], "Editing data using nearest neighbours": [[115, "editing-data-using-nearest-neighbours"]], "Effect of the shrinkage factor in random over-sampling": [[33, null]], "Enhancement": [[117, "enhancement"], [117, "id44"], [117, "id50"], [123, "enhancement"], [124, "enhancement"], [125, "enhancement"], [126, "enhancement"], [127, "enhancement"]], "Enhancements": [[117, "enhancements"], [117, "id13"], [117, "id20"], [117, "id25"], [117, "id32"], [120, "enhancements"], [121, "enhancements"], [122, "enhancements"], [128, "enhancements"], [129, "enhancements"]], "Ensemble methods": [[59, null]], "Ensemble of samplers": [[48, null]], "Evaluate classification by compiling a report": [[23, null]], "Evaluation examples": [[22, null], [26, "evaluation-examples"]], "Exactly Balanced Bagging and Over-Bagging": [[19, "exactly-balanced-bagging-and-over-bagging"]], "Example of topic classification in text documents": [[9, null]], "Example using ensemble class methods": [[18, null], [26, "example-using-ensemble-class-methods"]], "Example using over-sampling class methods": [[26, "example-using-over-sampling-class-methods"], [30, null]], "Example using under-sampling class methods": [[26, "example-using-under-sampling-class-methods"], [39, null]], "Examples": [[26, null], [44, null], [48, null]], "Examples based on real world datasets": [[4, null], [26, "examples-based-on-real-world-datasets"]], "Examples showing API imbalanced-learn usage": [[1, null], [26, "examples-showing-api-imbalanced-learn-usage"]], "Examples using combine class methods": [[12, null], [26, "examples-using-combine-class-methods"]], "Examples using imblearn.FunctionSampler": [[60, "examples-using-imblearn-functionsampler"]], "Examples using imblearn.combine.SMOTEENN": [[61, "examples-using-imblearn-combine-smoteenn"]], "Examples using imblearn.combine.SMOTETomek": [[62, "examples-using-imblearn-combine-smotetomek"]], "Examples using imblearn.datasets.fetch_datasets": [[63, "examples-using-imblearn-datasets-fetch-datasets"]], "Examples using imblearn.datasets.make_imbalance": [[64, "examples-using-imblearn-datasets-make-imbalance"]], "Examples using imblearn.ensemble.BalancedBaggingClassifier": [[65, "examples-using-imblearn-ensemble-balancedbaggingclassifier"]], "Examples using imblearn.ensemble.BalancedRandomForestClassifier": [[66, "examples-using-imblearn-ensemble-balancedrandomforestclassifier"]], "Examples using imblearn.ensemble.EasyEnsembleClassifier": [[67, "examples-using-imblearn-ensemble-easyensembleclassifier"]], "Examples using imblearn.ensemble.RUSBoostClassifier": [[68, "examples-using-imblearn-ensemble-rusboostclassifier"]], "Examples using imblearn.keras.BalancedBatchGenerator": [[69, "examples-using-imblearn-keras-balancedbatchgenerator"]], "Examples using imblearn.metrics.classification_report_imbalanced": [[71, "examples-using-imblearn-metrics-classification-report-imbalanced"]], "Examples using imblearn.metrics.geometric_mean_score": [[72, "examples-using-imblearn-metrics-geometric-mean-score"]], "Examples using imblearn.metrics.make_index_balanced_accuracy": [[74, "examples-using-imblearn-metrics-make-index-balanced-accuracy"]], "Examples using imblearn.over_sampling.ADASYN": [[79, "examples-using-imblearn-over-sampling-adasyn"]], "Examples using imblearn.over_sampling.BorderlineSMOTE": [[80, "examples-using-imblearn-over-sampling-borderlinesmote"]], "Examples using imblearn.over_sampling.KMeansSMOTE": [[81, "examples-using-imblearn-over-sampling-kmeanssmote"]], "Examples using imblearn.over_sampling.RandomOverSampler": [[82, "examples-using-imblearn-over-sampling-randomoversampler"]], "Examples using imblearn.over_sampling.SMOTE": [[83, "examples-using-imblearn-over-sampling-smote"]], "Examples using imblearn.over_sampling.SMOTEN": [[84, "examples-using-imblearn-over-sampling-smoten"]], "Examples using imblearn.over_sampling.SMOTENC": [[85, "examples-using-imblearn-over-sampling-smotenc"]], "Examples using imblearn.over_sampling.SVMSMOTE": [[86, "examples-using-imblearn-over-sampling-svmsmote"]], "Examples using imblearn.pipeline.Pipeline": [[87, "examples-using-imblearn-pipeline-pipeline"]], "Examples using imblearn.pipeline.make_pipeline": [[88, "examples-using-imblearn-pipeline-make-pipeline"]], "Examples using imblearn.under_sampling.AllKNN": [[90, "examples-using-imblearn-under-sampling-allknn"]], "Examples using imblearn.under_sampling.ClusterCentroids": [[91, "examples-using-imblearn-under-sampling-clustercentroids"]], "Examples using imblearn.under_sampling.CondensedNearestNeighbour": [[92, "examples-using-imblearn-under-sampling-condensednearestneighbour"]], "Examples using imblearn.under_sampling.EditedNearestNeighbours": [[93, "examples-using-imblearn-under-sampling-editednearestneighbours"]], "Examples using imblearn.under_sampling.InstanceHardnessThreshold": [[94, "examples-using-imblearn-under-sampling-instancehardnessthreshold"]], "Examples using imblearn.under_sampling.NearMiss": [[95, "examples-using-imblearn-under-sampling-nearmiss"]], "Examples using imblearn.under_sampling.NeighbourhoodCleaningRule": [[96, "examples-using-imblearn-under-sampling-neighbourhoodcleaningrule"]], "Examples using imblearn.under_sampling.OneSidedSelection": [[97, "examples-using-imblearn-under-sampling-onesidedselection"]], "Examples using imblearn.under_sampling.RandomUnderSampler": [[98, "examples-using-imblearn-under-sampling-randomundersampler"]], "Examples using imblearn.under_sampling.RepeatedEditedNearestNeighbours": [[99, "examples-using-imblearn-under-sampling-repeatededitednearestneighbours"]], "Examples using imblearn.under_sampling.TomekLinks": [[100, "examples-using-imblearn-under-sampling-tomeklinks"]], "Fitting model on imbalanced datasets and how to fight bias": [[5, null]], "Forest of randomized trees": [[48, "forest-of-randomized-trees"]], "From PyPi or conda-forge repositories": [[50, "from-pypi-or-conda-forge-repositories"]], "From random over-sampling to SMOTE and ADASYN": [[56, "from-random-over-sampling-to-smote-and-adasyn"]], "From source available on GitHub": [[50, "from-source-available-on-github"]], "FunctionSampler": [[60, null]], "Generate an imbalanced dataset": [[19, "generate-an-imbalanced-dataset"]], "Generate the dataset": [[16, "generate-the-dataset"]], "Getting Started": [[50, null]], "Highlights": [[117, "highlights"], [125, "highlights"]], "History": [[0, "history"]], "How to use sampling_strategy in imbalanced-learn": [[2, null]], "How to use the FunctionSampler": [[7, "how-to-use-the-functionsampler"]], "Ill-posed examples": [[56, "ill-posed-examples"]], "Illustration of the definition of a Tomek link": [[42, null]], "Illustration of the influence of the balancing ratio": [[31, "illustration-of-the-influence-of-the-balancing-ratio"]], "Imbalanced datasets for benchmark": [[46, "imbalanced-datasets-for-benchmark"]], "Imbalanced generator": [[46, "imbalanced-generator"]], "Install": [[50, "install"]], "Instance hardness threshold": [[115, "id11"]], "InstanceHardnessThreshold": [[94, null]], "Integrate it within a pipeline": [[7, "integrate-it-within-a-pipeline"]], "Intel optimizations via scikit-learn-intelex": [[50, "intel-optimizations-via-scikit-learn-intelex"]], "Introduction": [[51, null]], "KMeansSMOTE": [[81, null]], "Keras generator": [[55, "keras-generator"]], "Linear classifier baseline": [[5, "linear-classifier-baseline"]], "Load an imbalanced dataset": [[20, "load-an-imbalanced-dataset"]], "Load the dataset": [[8, "load-the-dataset"]], "Macro-Averaged Mean Absolute Error (MA-MAE)": [[52, "macro-averaged-mean-absolute-error-ma-mae"]], "Maintenance": [[117, "maintenance"], [117, "id27"], [117, "id30"], [117, "id40"], [117, "id45"], [117, "id52"], [125, "maintenance"], [126, "maintenance"], [127, "maintenance"], [128, "maintenance"], [129, "maintenance"], [129, "id2"]], "Major release": [[47, "major-release"]], "Make a dataset imbalanced": [[16, "make-a-dataset-imbalanced"]], "Making a release": [[47, "making-a-release"]], "Mathematical formulation": [[56, "mathematical-formulation"], [115, "mathematical-formulation"]], "Metrics": [[52, null], [107, null]], "Metrics specific to imbalanced learning": [[24, null]], "Miscellaneous": [[108, null]], "Miscellaneous samplers": [[55, null]], "Model Selection": [[26, "model-selection"], [27, null]], "More advanced over-sampling using ADASYN and SMOTE": [[31, "more-advanced-over-sampling-using-adasyn-and-smote"]], "Multi-class management": [[56, "multi-class-management"]], "Multiclass classification with under-sampling": [[6, null]], "Naive random over-sampling": [[56, "naive-random-over-sampling"]], "NearMiss": [[95, null]], "NearMiss-1": [[41, "nearmiss-1"]], "NearMiss-2": [[41, "nearmiss-2"]], "NearMiss-3": [[41, "nearmiss-3"]], "NeighbourhoodCleaningRule": [[96, null]], "New features": [[117, "new-features"], [117, "id49"], [123, "new-features"], [124, "new-features"], [125, "new-features"], [129, "new-features"]], "New methods": [[119, "new-methods"]], "One Sided Selection": [[115, "one-sided-selection"]], "OneSidedSelection": [[97, null]], "Over-sampling": [[56, null]], "Over-sampling methods": [[109, null]], "Pairwise metrics": [[52, "pairwise-metrics"], [107, "pairwise-metrics"]], "Pandas in/out": [[51, null]], "Pipeline": [[87, null], [110, null]], "Pipeline examples": [[26, "pipeline-examples"], [35, null]], "Plot of the results and computation time": [[10, "plot-of-the-results-and-computation-time"]], "Plotting Validation Curves": [[28, null]], "Porto Seguro: balancing samples in mini-batches with Keras": [[10, null]], "Prerequisites": [[50, "prerequisites"]], "Problem definition": [[5, "problem-definition"]], "Problem statement regarding imbalanced data sets": [[51, "problem-statement-regarding-imbalanced-data-sets"]], "Prototype generation": [[112, "module-imblearn.under_sampling._prototype_generation"], [115, "prototype-generation"]], "Prototype generation: under-sampling by generating new samples": [[40, "prototype-generation-under-sampling-by-generating-new-samples"]], "Prototype selection": [[112, "module-imblearn.under_sampling._prototype_selection"], [115, "prototype-selection"]], "Prototype selection: under-sampling by selecting existing samples": [[40, "prototype-selection-under-sampling-by-selecting-existing-samples"]], "RUSBoostClassifier": [[68, null]], "Random over-sampling to balance the data set": [[31, "random-over-sampling-to-balance-the-data-set"]], "Random under-sampling": [[115, "random-under-sampling"]], "RandomOverSampler": [[82, null]], "RandomUnderSampler": [[98, null]], "References": [[10, "references"], [55, null], [131, null]], "References:": [[19, null]], "Release history": [[117, null]], "Repeated Edited Nearest Neighbours": [[115, "repeated-edited-nearest-neighbours"]], "RepeatedEditedNearestNeighbours": [[99, null]], "Resample the training set during learning": [[5, "resample-the-training-set-during-learning"]], "Roughly Balanced Bagging": [[19, "roughly-balanced-bagging"]], "SMOTE": [[83, null]], "SMOTE algorithms": [[109, "smote-algorithms"]], "SMOTE variants": [[56, "smote-variants"]], "SMOTE-Bagging": [[19, "smote-bagging"]], "SMOTEENN": [[61, null]], "SMOTEN": [[84, null]], "SMOTENC": [[85, null]], "SMOTETomek": [[62, null]], "SVMSMOTE": [[86, null]], "Sample generation": [[56, "sample-generation"]], "Sample generator used in SMOTE-like samplers": [[32, null]], "Sample selection in NearMiss": [[41, null]], "Sensitivity and specificity metrics": [[52, "sensitivity-and-specificity-metrics"]], "Setting the data set": [[9, "setting-the-data-set"]], "Sparse input": [[51, null]], "Strategies to learn from an imbalanced dataset": [[5, "strategies-to-learn-from-an-imbalanced-dataset"]], "Summary of important metrics": [[52, "summary-of-important-metrics"]], "TensorFlow generator": [[55, "tensorflow-generator"]], "Test and coverage": [[50, "test-and-coverage"]], "Testing": [[124, "testing"]], "Testing compatibility of your own sampler": [[113, "module-imblearn.utils.estimator_checks"]], "The usual scikit-learn pipeline": [[9, "the-usual-scikit-learn-pipeline"]], "TomekLinks": [[100, null]], "Tomek\u2019s links": [[115, "tomek-s-links"]], "Toy data generation": [[7, "toy-data-generation"]], "Under-sampling": [[115, null]], "Under-sampling methods": [[112, null]], "Usage of pipeline embedding samplers": [[36, null]], "Use class_weight": [[5, "use-class-weight"]], "Use of specific balanced algorithms from imbalanced-learn": [[5, "use-of-specific-balanced-algorithms-from-imbalanced-learn"]], "User Guide": [[116, null]], "Using sampling_strategy in resampling algorithms": [[2, "using-sampling-strategy-in-resampling-algorithms"]], "Utilities": [[113, null]], "Validation Tools": [[47, "validation-tools"]], "Validation checks used in samplers": [[113, "validation-checks-used-in-samplers"]], "Value Difference Metric": [[52, "value-difference-metric"]], "ValueDifferenceMetric": [[75, null]], "Version 0.1": [[117, "version-0-1"], [119, null]], "Version 0.10.0": [[117, "version-0-10-0"], [120, "version-0-10-0"]], "Version 0.10.1": [[117, "version-0-10-1"], [120, null]], "Version 0.11.0": [[117, "version-0-11-0"], [121, null]], "Version 0.12.0": [[117, "version-0-12-0"], [122, "version-0-12-0"]], "Version 0.12.1": [[117, "version-0-12-1"], [122, "version-0-12-1"]], "Version 0.12.2": [[117, "version-0-12-2"], [122, "version-0-12-2"]], "Version 0.12.3": [[117, "version-0-12-3"], [122, "version-0-12-3"]], "Version 0.12.4": [[117, "version-0-12-4"], [122, null]], "Version 0.13.0": [[118, null]], "Version 0.2": [[117, "version-0-2"], [123, null]], "Version 0.3": [[117, "version-0-3"], [124, null]], "Version 0.4": [[117, "version-0-4"], [125, "version-0-4"]], "Version 0.4.2": [[117, "version-0-4-2"], [125, null]], "Version 0.5.0": [[117, "version-0-5-0"], [126, null]], "Version 0.6.0": [[117, "version-0-6-0"], [127, "version-0-6-0"]], "Version 0.6.1": [[117, "version-0-6-1"], [127, "version-0-6-1"]], "Version 0.6.2": [[117, "version-0-6-2"], [127, null]], "Version 0.7.0": [[117, "version-0-7-0"], [128, null]], "Version 0.8.0": [[117, "version-0-8-0"], [129, "version-0-8-0"]], "Version 0.8.1": [[117, "version-0-8-1"], [129, null]], "Version 0.9.0": [[117, "version-0-9-0"], [130, "version-0-9-0"]], "Version 0.9.1": [[117, "version-0-9-1"], [130, null]], "balanced_batch_generator": [[70, null], [89, null]], "check_neighbors_object": [[101, null]], "check_sampling_strategy": [[102, null]], "check_target_type": [[103, null]], "classification_report_imbalanced": [[71, null]], "fetch_datasets": [[63, null]], "geometric_mean_score": [[72, null]], "imbalanced-learn documentation": [[49, null]], "macro_averaged_mean_absolute_error": [[73, null]], "make_imbalance": [[64, null]], "make_index_balanced_accuracy": [[74, null]], "make_pipeline": [[88, null]], "parametrize_with_checks": [[104, null]], "sampling_strategy as a callable": [[2, "sampling-strategy-as-a-callable"]], "sampling_strategy as a dict": [[2, "sampling-strategy-as-a-dict"]], "sampling_strategy as a float": [[2, "sampling-strategy-as-a-float"]], "sampling_strategy as a list": [[2, "sampling-strategy-as-a-list"]], "sampling_strategy as a str": [[2, "sampling-strategy-as-a-str"]], "sensitivity_score": [[76, null]], "sensitivity_specificity_support": [[77, null]], "specificity_score": [[78, null]]}, "docnames": ["about", "auto_examples/api/index", "auto_examples/api/plot_sampling_strategy_usage", "auto_examples/api/sg_execution_times", "auto_examples/applications/index", "auto_examples/applications/plot_impact_imbalanced_classes", "auto_examples/applications/plot_multi_class_under_sampling", "auto_examples/applications/plot_outlier_rejections", "auto_examples/applications/plot_over_sampling_benchmark_lfw", "auto_examples/applications/plot_topic_classication", "auto_examples/applications/porto_seguro_keras_under_sampling", "auto_examples/applications/sg_execution_times", "auto_examples/combine/index", "auto_examples/combine/plot_comparison_combine", "auto_examples/combine/sg_execution_times", "auto_examples/datasets/index", "auto_examples/datasets/plot_make_imbalance", "auto_examples/datasets/sg_execution_times", "auto_examples/ensemble/index", "auto_examples/ensemble/plot_bagging_classifier", "auto_examples/ensemble/plot_comparison_ensemble_classifier", "auto_examples/ensemble/sg_execution_times", "auto_examples/evaluation/index", "auto_examples/evaluation/plot_classification_report", "auto_examples/evaluation/plot_metrics", "auto_examples/evaluation/sg_execution_times", "auto_examples/index", "auto_examples/model_selection/index", "auto_examples/model_selection/plot_validation_curve", "auto_examples/model_selection/sg_execution_times", "auto_examples/over-sampling/index", "auto_examples/over-sampling/plot_comparison_over_sampling", "auto_examples/over-sampling/plot_illustration_generation_sample", "auto_examples/over-sampling/plot_shrinkage_effect", "auto_examples/over-sampling/sg_execution_times", "auto_examples/pipeline/index", "auto_examples/pipeline/plot_pipeline_classification", "auto_examples/pipeline/sg_execution_times", "auto_examples/sg_execution_times", "auto_examples/under-sampling/index", "auto_examples/under-sampling/plot_comparison_under_sampling", "auto_examples/under-sampling/plot_illustration_nearmiss", "auto_examples/under-sampling/plot_illustration_tomek_links", "auto_examples/under-sampling/sg_execution_times", "combine", "common_pitfalls", "datasets/index", "developers_utils", "ensemble", "index", "install", "introduction", "metrics", "min_dependency_substitutions", "min_dependency_table", "miscellaneous", "over_sampling", "references/combine", "references/datasets", "references/ensemble", "references/generated/imblearn.FunctionSampler", "references/generated/imblearn.combine.SMOTEENN", "references/generated/imblearn.combine.SMOTETomek", "references/generated/imblearn.datasets.fetch_datasets", "references/generated/imblearn.datasets.make_imbalance", "references/generated/imblearn.ensemble.BalancedBaggingClassifier", "references/generated/imblearn.ensemble.BalancedRandomForestClassifier", "references/generated/imblearn.ensemble.EasyEnsembleClassifier", "references/generated/imblearn.ensemble.RUSBoostClassifier", "references/generated/imblearn.keras.BalancedBatchGenerator", "references/generated/imblearn.keras.balanced_batch_generator", "references/generated/imblearn.metrics.classification_report_imbalanced", "references/generated/imblearn.metrics.geometric_mean_score", "references/generated/imblearn.metrics.macro_averaged_mean_absolute_error", "references/generated/imblearn.metrics.make_index_balanced_accuracy", "references/generated/imblearn.metrics.pairwise.ValueDifferenceMetric", "references/generated/imblearn.metrics.sensitivity_score", "references/generated/imblearn.metrics.sensitivity_specificity_support", "references/generated/imblearn.metrics.specificity_score", "references/generated/imblearn.over_sampling.ADASYN", "references/generated/imblearn.over_sampling.BorderlineSMOTE", "references/generated/imblearn.over_sampling.KMeansSMOTE", "references/generated/imblearn.over_sampling.RandomOverSampler", "references/generated/imblearn.over_sampling.SMOTE", "references/generated/imblearn.over_sampling.SMOTEN", "references/generated/imblearn.over_sampling.SMOTENC", "references/generated/imblearn.over_sampling.SVMSMOTE", "references/generated/imblearn.pipeline.Pipeline", "references/generated/imblearn.pipeline.make_pipeline", "references/generated/imblearn.tensorflow.balanced_batch_generator", "references/generated/imblearn.under_sampling.AllKNN", "references/generated/imblearn.under_sampling.ClusterCentroids", "references/generated/imblearn.under_sampling.CondensedNearestNeighbour", "references/generated/imblearn.under_sampling.EditedNearestNeighbours", "references/generated/imblearn.under_sampling.InstanceHardnessThreshold", "references/generated/imblearn.under_sampling.NearMiss", "references/generated/imblearn.under_sampling.NeighbourhoodCleaningRule", "references/generated/imblearn.under_sampling.OneSidedSelection", "references/generated/imblearn.under_sampling.RandomUnderSampler", "references/generated/imblearn.under_sampling.RepeatedEditedNearestNeighbours", "references/generated/imblearn.under_sampling.TomekLinks", "references/generated/imblearn.utils.check_neighbors_object", "references/generated/imblearn.utils.check_sampling_strategy", "references/generated/imblearn.utils.check_target_type", "references/generated/imblearn.utils.estimator_checks.parametrize_with_checks", "references/index", "references/keras", "references/metrics", "references/miscellaneous", "references/over_sampling", "references/pipeline", "references/tensorflow", "references/under_sampling", "references/utils", "sg_execution_times", "under_sampling", "user_guide", "whats_new", "whats_new/0.13", "whats_new/v0.1", "whats_new/v0.10", "whats_new/v0.11", "whats_new/v0.12", "whats_new/v0.2", "whats_new/v0.3", "whats_new/v0.4", "whats_new/v0.5", "whats_new/v0.6", "whats_new/v0.7", "whats_new/v0.8", "whats_new/v0.9", "zzz_references"], "envversion": {"sphinx": 64, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinxcontrib.bibtex": 9}, "filenames": ["about.rst", "auto_examples/api/index.rst", "auto_examples/api/plot_sampling_strategy_usage.rst", "auto_examples/api/sg_execution_times.rst", "auto_examples/applications/index.rst", "auto_examples/applications/plot_impact_imbalanced_classes.rst", "auto_examples/applications/plot_multi_class_under_sampling.rst", "auto_examples/applications/plot_outlier_rejections.rst", "auto_examples/applications/plot_over_sampling_benchmark_lfw.rst", "auto_examples/applications/plot_topic_classication.rst", "auto_examples/applications/porto_seguro_keras_under_sampling.rst", "auto_examples/applications/sg_execution_times.rst", "auto_examples/combine/index.rst", "auto_examples/combine/plot_comparison_combine.rst", "auto_examples/combine/sg_execution_times.rst", "auto_examples/datasets/index.rst", "auto_examples/datasets/plot_make_imbalance.rst", "auto_examples/datasets/sg_execution_times.rst", "auto_examples/ensemble/index.rst", "auto_examples/ensemble/plot_bagging_classifier.rst", "auto_examples/ensemble/plot_comparison_ensemble_classifier.rst", "auto_examples/ensemble/sg_execution_times.rst", "auto_examples/evaluation/index.rst", "auto_examples/evaluation/plot_classification_report.rst", "auto_examples/evaluation/plot_metrics.rst", "auto_examples/evaluation/sg_execution_times.rst", "auto_examples/index.rst", "auto_examples/model_selection/index.rst", "auto_examples/model_selection/plot_validation_curve.rst", "auto_examples/model_selection/sg_execution_times.rst", "auto_examples/over-sampling/index.rst", "auto_examples/over-sampling/plot_comparison_over_sampling.rst", "auto_examples/over-sampling/plot_illustration_generation_sample.rst", "auto_examples/over-sampling/plot_shrinkage_effect.rst", "auto_examples/over-sampling/sg_execution_times.rst", "auto_examples/pipeline/index.rst", "auto_examples/pipeline/plot_pipeline_classification.rst", "auto_examples/pipeline/sg_execution_times.rst", "auto_examples/sg_execution_times.rst", "auto_examples/under-sampling/index.rst", "auto_examples/under-sampling/plot_comparison_under_sampling.rst", "auto_examples/under-sampling/plot_illustration_nearmiss.rst", "auto_examples/under-sampling/plot_illustration_tomek_links.rst", "auto_examples/under-sampling/sg_execution_times.rst", "combine.rst", "common_pitfalls.rst", "datasets/index.rst", "developers_utils.rst", "ensemble.rst", "index.rst", "install.rst", "introduction.rst", "metrics.rst", "min_dependency_substitutions.rst", "min_dependency_table.rst", "miscellaneous.rst", "over_sampling.rst", "references/combine.rst", "references/datasets.rst", "references/ensemble.rst", "references/generated/imblearn.FunctionSampler.rst", "references/generated/imblearn.combine.SMOTEENN.rst", "references/generated/imblearn.combine.SMOTETomek.rst", "references/generated/imblearn.datasets.fetch_datasets.rst", "references/generated/imblearn.datasets.make_imbalance.rst", "references/generated/imblearn.ensemble.BalancedBaggingClassifier.rst", "references/generated/imblearn.ensemble.BalancedRandomForestClassifier.rst", "references/generated/imblearn.ensemble.EasyEnsembleClassifier.rst", "references/generated/imblearn.ensemble.RUSBoostClassifier.rst", "references/generated/imblearn.keras.BalancedBatchGenerator.rst", "references/generated/imblearn.keras.balanced_batch_generator.rst", "references/generated/imblearn.metrics.classification_report_imbalanced.rst", "references/generated/imblearn.metrics.geometric_mean_score.rst", "references/generated/imblearn.metrics.macro_averaged_mean_absolute_error.rst", "references/generated/imblearn.metrics.make_index_balanced_accuracy.rst", "references/generated/imblearn.metrics.pairwise.ValueDifferenceMetric.rst", "references/generated/imblearn.metrics.sensitivity_score.rst", "references/generated/imblearn.metrics.sensitivity_specificity_support.rst", "references/generated/imblearn.metrics.specificity_score.rst", "references/generated/imblearn.over_sampling.ADASYN.rst", "references/generated/imblearn.over_sampling.BorderlineSMOTE.rst", "references/generated/imblearn.over_sampling.KMeansSMOTE.rst", "references/generated/imblearn.over_sampling.RandomOverSampler.rst", "references/generated/imblearn.over_sampling.SMOTE.rst", "references/generated/imblearn.over_sampling.SMOTEN.rst", "references/generated/imblearn.over_sampling.SMOTENC.rst", "references/generated/imblearn.over_sampling.SVMSMOTE.rst", "references/generated/imblearn.pipeline.Pipeline.rst", "references/generated/imblearn.pipeline.make_pipeline.rst", "references/generated/imblearn.tensorflow.balanced_batch_generator.rst", "references/generated/imblearn.under_sampling.AllKNN.rst", "references/generated/imblearn.under_sampling.ClusterCentroids.rst", "references/generated/imblearn.under_sampling.CondensedNearestNeighbour.rst", "references/generated/imblearn.under_sampling.EditedNearestNeighbours.rst", "references/generated/imblearn.under_sampling.InstanceHardnessThreshold.rst", "references/generated/imblearn.under_sampling.NearMiss.rst", "references/generated/imblearn.under_sampling.NeighbourhoodCleaningRule.rst", "references/generated/imblearn.under_sampling.OneSidedSelection.rst", "references/generated/imblearn.under_sampling.RandomUnderSampler.rst", "references/generated/imblearn.under_sampling.RepeatedEditedNearestNeighbours.rst", "references/generated/imblearn.under_sampling.TomekLinks.rst", "references/generated/imblearn.utils.check_neighbors_object.rst", "references/generated/imblearn.utils.check_sampling_strategy.rst", "references/generated/imblearn.utils.check_target_type.rst", "references/generated/imblearn.utils.estimator_checks.parametrize_with_checks.rst", "references/index.rst", "references/keras.rst", "references/metrics.rst", "references/miscellaneous.rst", "references/over_sampling.rst", "references/pipeline.rst", "references/tensorflow.rst", "references/under_sampling.rst", "references/utils.rst", "sg_execution_times.rst", "under_sampling.rst", "user_guide.rst", "whats_new.rst", "whats_new/0.13.rst", "whats_new/v0.1.rst", "whats_new/v0.10.rst", "whats_new/v0.11.rst", "whats_new/v0.12.rst", "whats_new/v0.2.rst", "whats_new/v0.3.rst", "whats_new/v0.4.rst", "whats_new/v0.5.rst", "whats_new/v0.6.rst", "whats_new/v0.7.rst", "whats_new/v0.8.rst", "whats_new/v0.9.rst", "zzz_references.rst"], "indexentries": {"adasyn (class in imblearn.over_sampling)": [[79, "imblearn.over_sampling.ADASYN", false]], "allknn (class in imblearn.under_sampling)": [[90, "imblearn.under_sampling.AllKNN", false]], "apply() (imblearn.ensemble.balancedrandomforestclassifier method)": [[66, "imblearn.ensemble.BalancedRandomForestClassifier.apply", false]], "balanced_batch_generator() (in module imblearn.keras)": [[70, "imblearn.keras.balanced_batch_generator", false]], "balanced_batch_generator() (in module imblearn.tensorflow)": [[89, "imblearn.tensorflow.balanced_batch_generator", false]], "balancedbaggingclassifier (class in imblearn.ensemble)": [[65, "imblearn.ensemble.BalancedBaggingClassifier", false]], "balancedbatchgenerator (class in imblearn.keras)": [[69, "imblearn.keras.BalancedBatchGenerator", false]], "balancedrandomforestclassifier (class in imblearn.ensemble)": [[66, "imblearn.ensemble.BalancedRandomForestClassifier", false]], "base_estimator_ (imblearn.ensemble.balancedbaggingclassifier property)": [[65, "imblearn.ensemble.BalancedBaggingClassifier.base_estimator_", false]], "base_estimator_ (imblearn.ensemble.easyensembleclassifier property)": [[67, "imblearn.ensemble.EasyEnsembleClassifier.base_estimator_", false]], "borderlinesmote (class in imblearn.over_sampling)": [[80, "imblearn.over_sampling.BorderlineSMOTE", false]], "check_neighbors_object() (in module imblearn.utils)": [[101, "imblearn.utils.check_neighbors_object", false]], "check_sampling_strategy() (in module imblearn.utils)": [[102, "imblearn.utils.check_sampling_strategy", false]], "check_target_type() (in module imblearn.utils)": [[103, "imblearn.utils.check_target_type", false]], "classes_ (imblearn.pipeline.pipeline property)": [[87, "imblearn.pipeline.Pipeline.classes_", false]], "classification_report_imbalanced() (in module imblearn.metrics)": [[71, "imblearn.metrics.classification_report_imbalanced", false]], "clustercentroids (class in imblearn.under_sampling)": [[91, "imblearn.under_sampling.ClusterCentroids", false]], "condensednearestneighbour (class in imblearn.under_sampling)": [[92, "imblearn.under_sampling.CondensedNearestNeighbour", false]], "decision_function() (imblearn.ensemble.balancedbaggingclassifier method)": [[65, "imblearn.ensemble.BalancedBaggingClassifier.decision_function", false]], "decision_function() (imblearn.ensemble.easyensembleclassifier method)": [[67, "imblearn.ensemble.EasyEnsembleClassifier.decision_function", false]], "decision_function() (imblearn.ensemble.rusboostclassifier method)": [[68, "imblearn.ensemble.RUSBoostClassifier.decision_function", false]], "decision_function() (imblearn.pipeline.pipeline method)": [[87, "imblearn.pipeline.Pipeline.decision_function", false]], "decision_path() (imblearn.ensemble.balancedrandomforestclassifier method)": [[66, "imblearn.ensemble.BalancedRandomForestClassifier.decision_path", false]], "easyensembleclassifier (class in imblearn.ensemble)": [[67, "imblearn.ensemble.EasyEnsembleClassifier", false]], "editednearestneighbours (class in imblearn.under_sampling)": [[93, "imblearn.under_sampling.EditedNearestNeighbours", false]], "estimator_ (imblearn.under_sampling.condensednearestneighbour property)": [[92, "imblearn.under_sampling.CondensedNearestNeighbour.estimator_", false]], "estimator_ (imblearn.under_sampling.onesidedselection property)": [[97, "imblearn.under_sampling.OneSidedSelection.estimator_", false]], "estimators_samples_ (imblearn.ensemble.balancedbaggingclassifier property)": [[65, "imblearn.ensemble.BalancedBaggingClassifier.estimators_samples_", false]], "estimators_samples_ (imblearn.ensemble.balancedrandomforestclassifier property)": [[66, "imblearn.ensemble.BalancedRandomForestClassifier.estimators_samples_", false]], "estimators_samples_ (imblearn.ensemble.easyensembleclassifier property)": [[67, "imblearn.ensemble.EasyEnsembleClassifier.estimators_samples_", false]], "feature_importances_ (imblearn.ensemble.balancedrandomforestclassifier property)": [[66, "imblearn.ensemble.BalancedRandomForestClassifier.feature_importances_", false]], "feature_importances_ (imblearn.ensemble.rusboostclassifier property)": [[68, "imblearn.ensemble.RUSBoostClassifier.feature_importances_", false]], "feature_names_in_ (imblearn.pipeline.pipeline property)": [[87, "imblearn.pipeline.Pipeline.feature_names_in_", false]], "fetch_datasets() (in module imblearn.datasets)": [[63, "imblearn.datasets.fetch_datasets", false]], "fit() (imblearn.combine.smoteenn method)": [[61, "imblearn.combine.SMOTEENN.fit", false]], "fit() (imblearn.combine.smotetomek method)": [[62, "imblearn.combine.SMOTETomek.fit", false]], "fit() (imblearn.ensemble.balancedbaggingclassifier method)": [[65, "imblearn.ensemble.BalancedBaggingClassifier.fit", false]], "fit() (imblearn.ensemble.balancedrandomforestclassifier method)": [[66, "imblearn.ensemble.BalancedRandomForestClassifier.fit", false]], "fit() (imblearn.ensemble.easyensembleclassifier method)": [[67, "imblearn.ensemble.EasyEnsembleClassifier.fit", false]], "fit() (imblearn.ensemble.rusboostclassifier method)": [[68, "imblearn.ensemble.RUSBoostClassifier.fit", false]], "fit() (imblearn.functionsampler method)": [[60, "imblearn.FunctionSampler.fit", false]], "fit() (imblearn.metrics.pairwise.valuedifferencemetric method)": [[75, "imblearn.metrics.pairwise.ValueDifferenceMetric.fit", false]], "fit() (imblearn.over_sampling.adasyn method)": [[79, "imblearn.over_sampling.ADASYN.fit", false]], "fit() (imblearn.over_sampling.borderlinesmote method)": [[80, "imblearn.over_sampling.BorderlineSMOTE.fit", false]], "fit() (imblearn.over_sampling.kmeanssmote method)": [[81, "imblearn.over_sampling.KMeansSMOTE.fit", false]], "fit() (imblearn.over_sampling.randomoversampler method)": [[82, "imblearn.over_sampling.RandomOverSampler.fit", false]], "fit() (imblearn.over_sampling.smote method)": [[83, "imblearn.over_sampling.SMOTE.fit", false]], "fit() (imblearn.over_sampling.smoten method)": [[84, "imblearn.over_sampling.SMOTEN.fit", false]], "fit() (imblearn.over_sampling.smotenc method)": [[85, "imblearn.over_sampling.SMOTENC.fit", false]], "fit() (imblearn.over_sampling.svmsmote method)": [[86, "imblearn.over_sampling.SVMSMOTE.fit", false]], "fit() (imblearn.pipeline.pipeline method)": [[87, "imblearn.pipeline.Pipeline.fit", false]], "fit() (imblearn.under_sampling.allknn method)": [[90, "imblearn.under_sampling.AllKNN.fit", false]], "fit() (imblearn.under_sampling.clustercentroids method)": [[91, "imblearn.under_sampling.ClusterCentroids.fit", false]], "fit() (imblearn.under_sampling.condensednearestneighbour method)": [[92, "imblearn.under_sampling.CondensedNearestNeighbour.fit", false]], "fit() (imblearn.under_sampling.editednearestneighbours method)": [[93, "imblearn.under_sampling.EditedNearestNeighbours.fit", false]], "fit() (imblearn.under_sampling.instancehardnessthreshold method)": [[94, "imblearn.under_sampling.InstanceHardnessThreshold.fit", false]], "fit() (imblearn.under_sampling.nearmiss method)": [[95, "imblearn.under_sampling.NearMiss.fit", false]], "fit() (imblearn.under_sampling.neighbourhoodcleaningrule method)": [[96, "imblearn.under_sampling.NeighbourhoodCleaningRule.fit", false]], "fit() (imblearn.under_sampling.onesidedselection method)": [[97, "imblearn.under_sampling.OneSidedSelection.fit", false]], "fit() (imblearn.under_sampling.randomundersampler method)": [[98, "imblearn.under_sampling.RandomUnderSampler.fit", false]], "fit() (imblearn.under_sampling.repeatededitednearestneighbours method)": [[99, "imblearn.under_sampling.RepeatedEditedNearestNeighbours.fit", false]], "fit() (imblearn.under_sampling.tomeklinks method)": [[100, "imblearn.under_sampling.TomekLinks.fit", false]], "fit_predict() (imblearn.pipeline.pipeline method)": [[87, "imblearn.pipeline.Pipeline.fit_predict", false]], "fit_resample() (imblearn.combine.smoteenn method)": [[61, "imblearn.combine.SMOTEENN.fit_resample", false]], "fit_resample() (imblearn.combine.smotetomek method)": [[62, "imblearn.combine.SMOTETomek.fit_resample", false]], "fit_resample() (imblearn.functionsampler method)": [[60, "imblearn.FunctionSampler.fit_resample", false]], "fit_resample() (imblearn.over_sampling.adasyn method)": [[79, "imblearn.over_sampling.ADASYN.fit_resample", false]], "fit_resample() (imblearn.over_sampling.borderlinesmote method)": [[80, "imblearn.over_sampling.BorderlineSMOTE.fit_resample", false]], "fit_resample() (imblearn.over_sampling.kmeanssmote method)": [[81, "imblearn.over_sampling.KMeansSMOTE.fit_resample", false]], "fit_resample() (imblearn.over_sampling.randomoversampler method)": [[82, "imblearn.over_sampling.RandomOverSampler.fit_resample", false]], "fit_resample() (imblearn.over_sampling.smote method)": [[83, "imblearn.over_sampling.SMOTE.fit_resample", false]], "fit_resample() (imblearn.over_sampling.smoten method)": [[84, "imblearn.over_sampling.SMOTEN.fit_resample", false]], "fit_resample() (imblearn.over_sampling.smotenc method)": [[85, "imblearn.over_sampling.SMOTENC.fit_resample", false]], "fit_resample() (imblearn.over_sampling.svmsmote method)": [[86, "imblearn.over_sampling.SVMSMOTE.fit_resample", false]], "fit_resample() (imblearn.pipeline.pipeline method)": [[87, "imblearn.pipeline.Pipeline.fit_resample", false]], "fit_resample() (imblearn.under_sampling.allknn method)": [[90, "imblearn.under_sampling.AllKNN.fit_resample", false]], "fit_resample() (imblearn.under_sampling.clustercentroids method)": [[91, "imblearn.under_sampling.ClusterCentroids.fit_resample", false]], "fit_resample() (imblearn.under_sampling.condensednearestneighbour method)": [[92, "imblearn.under_sampling.CondensedNearestNeighbour.fit_resample", false]], "fit_resample() (imblearn.under_sampling.editednearestneighbours method)": [[93, "imblearn.under_sampling.EditedNearestNeighbours.fit_resample", false]], "fit_resample() (imblearn.under_sampling.instancehardnessthreshold method)": [[94, "imblearn.under_sampling.InstanceHardnessThreshold.fit_resample", false]], "fit_resample() (imblearn.under_sampling.nearmiss method)": [[95, "imblearn.under_sampling.NearMiss.fit_resample", false]], "fit_resample() (imblearn.under_sampling.neighbourhoodcleaningrule method)": [[96, "imblearn.under_sampling.NeighbourhoodCleaningRule.fit_resample", false]], "fit_resample() (imblearn.under_sampling.onesidedselection method)": [[97, "imblearn.under_sampling.OneSidedSelection.fit_resample", false]], "fit_resample() (imblearn.under_sampling.randomundersampler method)": [[98, "imblearn.under_sampling.RandomUnderSampler.fit_resample", false]], "fit_resample() (imblearn.under_sampling.repeatededitednearestneighbours method)": [[99, "imblearn.under_sampling.RepeatedEditedNearestNeighbours.fit_resample", false]], "fit_resample() (imblearn.under_sampling.tomeklinks method)": [[100, "imblearn.under_sampling.TomekLinks.fit_resample", false]], "fit_transform() (imblearn.pipeline.pipeline method)": [[87, "imblearn.pipeline.Pipeline.fit_transform", false]], "functionsampler (class in imblearn)": [[60, "imblearn.FunctionSampler", false]], "geometric_mean_score() (in module imblearn.metrics)": [[72, "imblearn.metrics.geometric_mean_score", false]], "get_feature_names_out() (imblearn.combine.smoteenn method)": [[61, "imblearn.combine.SMOTEENN.get_feature_names_out", false]], "get_feature_names_out() (imblearn.combine.smotetomek method)": [[62, "imblearn.combine.SMOTETomek.get_feature_names_out", false]], "get_feature_names_out() (imblearn.functionsampler method)": [[60, "imblearn.FunctionSampler.get_feature_names_out", false]], "get_feature_names_out() (imblearn.over_sampling.adasyn method)": [[79, "imblearn.over_sampling.ADASYN.get_feature_names_out", false]], "get_feature_names_out() (imblearn.over_sampling.borderlinesmote method)": [[80, "imblearn.over_sampling.BorderlineSMOTE.get_feature_names_out", false]], "get_feature_names_out() (imblearn.over_sampling.kmeanssmote method)": [[81, "imblearn.over_sampling.KMeansSMOTE.get_feature_names_out", false]], "get_feature_names_out() (imblearn.over_sampling.randomoversampler method)": [[82, "imblearn.over_sampling.RandomOverSampler.get_feature_names_out", false]], "get_feature_names_out() (imblearn.over_sampling.smote method)": [[83, "imblearn.over_sampling.SMOTE.get_feature_names_out", false]], "get_feature_names_out() (imblearn.over_sampling.smoten method)": [[84, "imblearn.over_sampling.SMOTEN.get_feature_names_out", false]], "get_feature_names_out() (imblearn.over_sampling.smotenc method)": [[85, "imblearn.over_sampling.SMOTENC.get_feature_names_out", false]], "get_feature_names_out() (imblearn.over_sampling.svmsmote method)": [[86, "imblearn.over_sampling.SVMSMOTE.get_feature_names_out", false]], "get_feature_names_out() (imblearn.pipeline.pipeline method)": [[87, "imblearn.pipeline.Pipeline.get_feature_names_out", false]], "get_feature_names_out() (imblearn.under_sampling.allknn method)": [[90, "imblearn.under_sampling.AllKNN.get_feature_names_out", false]], "get_feature_names_out() (imblearn.under_sampling.clustercentroids method)": [[91, "imblearn.under_sampling.ClusterCentroids.get_feature_names_out", false]], "get_feature_names_out() (imblearn.under_sampling.condensednearestneighbour method)": [[92, "imblearn.under_sampling.CondensedNearestNeighbour.get_feature_names_out", false]], "get_feature_names_out() (imblearn.under_sampling.editednearestneighbours method)": [[93, "imblearn.under_sampling.EditedNearestNeighbours.get_feature_names_out", false]], "get_feature_names_out() (imblearn.under_sampling.instancehardnessthreshold method)": [[94, "imblearn.under_sampling.InstanceHardnessThreshold.get_feature_names_out", false]], "get_feature_names_out() (imblearn.under_sampling.nearmiss method)": [[95, "imblearn.under_sampling.NearMiss.get_feature_names_out", false]], "get_feature_names_out() (imblearn.under_sampling.neighbourhoodcleaningrule method)": [[96, "imblearn.under_sampling.NeighbourhoodCleaningRule.get_feature_names_out", false]], "get_feature_names_out() (imblearn.under_sampling.onesidedselection method)": [[97, "imblearn.under_sampling.OneSidedSelection.get_feature_names_out", false]], "get_feature_names_out() (imblearn.under_sampling.randomundersampler method)": [[98, "imblearn.under_sampling.RandomUnderSampler.get_feature_names_out", false]], "get_feature_names_out() (imblearn.under_sampling.repeatededitednearestneighbours method)": [[99, "imblearn.under_sampling.RepeatedEditedNearestNeighbours.get_feature_names_out", false]], "get_feature_names_out() (imblearn.under_sampling.tomeklinks method)": [[100, "imblearn.under_sampling.TomekLinks.get_feature_names_out", false]], "get_metadata_routing() (imblearn.combine.smoteenn method)": [[61, "imblearn.combine.SMOTEENN.get_metadata_routing", false]], "get_metadata_routing() (imblearn.combine.smotetomek method)": [[62, "imblearn.combine.SMOTETomek.get_metadata_routing", false]], "get_metadata_routing() (imblearn.ensemble.balancedbaggingclassifier method)": [[65, "imblearn.ensemble.BalancedBaggingClassifier.get_metadata_routing", false]], "get_metadata_routing() (imblearn.ensemble.balancedrandomforestclassifier method)": [[66, "imblearn.ensemble.BalancedRandomForestClassifier.get_metadata_routing", false]], "get_metadata_routing() (imblearn.ensemble.easyensembleclassifier method)": [[67, "imblearn.ensemble.EasyEnsembleClassifier.get_metadata_routing", false]], "get_metadata_routing() (imblearn.ensemble.rusboostclassifier method)": [[68, "imblearn.ensemble.RUSBoostClassifier.get_metadata_routing", false]], "get_metadata_routing() (imblearn.functionsampler method)": [[60, "imblearn.FunctionSampler.get_metadata_routing", false]], "get_metadata_routing() (imblearn.metrics.pairwise.valuedifferencemetric method)": [[75, "imblearn.metrics.pairwise.ValueDifferenceMetric.get_metadata_routing", false]], "get_metadata_routing() (imblearn.over_sampling.adasyn method)": [[79, "imblearn.over_sampling.ADASYN.get_metadata_routing", false]], "get_metadata_routing() (imblearn.over_sampling.borderlinesmote method)": [[80, "imblearn.over_sampling.BorderlineSMOTE.get_metadata_routing", false]], "get_metadata_routing() (imblearn.over_sampling.kmeanssmote method)": [[81, "imblearn.over_sampling.KMeansSMOTE.get_metadata_routing", false]], "get_metadata_routing() (imblearn.over_sampling.randomoversampler method)": [[82, "imblearn.over_sampling.RandomOverSampler.get_metadata_routing", false]], "get_metadata_routing() (imblearn.over_sampling.smote method)": [[83, "imblearn.over_sampling.SMOTE.get_metadata_routing", false]], "get_metadata_routing() (imblearn.over_sampling.smoten method)": [[84, "imblearn.over_sampling.SMOTEN.get_metadata_routing", false]], "get_metadata_routing() (imblearn.over_sampling.smotenc method)": [[85, "imblearn.over_sampling.SMOTENC.get_metadata_routing", false]], "get_metadata_routing() (imblearn.over_sampling.svmsmote method)": [[86, "imblearn.over_sampling.SVMSMOTE.get_metadata_routing", false]], "get_metadata_routing() (imblearn.pipeline.pipeline method)": [[87, "imblearn.pipeline.Pipeline.get_metadata_routing", false]], "get_metadata_routing() (imblearn.under_sampling.allknn method)": [[90, "imblearn.under_sampling.AllKNN.get_metadata_routing", false]], "get_metadata_routing() (imblearn.under_sampling.clustercentroids method)": [[91, "imblearn.under_sampling.ClusterCentroids.get_metadata_routing", false]], "get_metadata_routing() (imblearn.under_sampling.condensednearestneighbour method)": [[92, "imblearn.under_sampling.CondensedNearestNeighbour.get_metadata_routing", false]], "get_metadata_routing() (imblearn.under_sampling.editednearestneighbours method)": [[93, "imblearn.under_sampling.EditedNearestNeighbours.get_metadata_routing", false]], "get_metadata_routing() (imblearn.under_sampling.instancehardnessthreshold method)": [[94, "imblearn.under_sampling.InstanceHardnessThreshold.get_metadata_routing", false]], "get_metadata_routing() (imblearn.under_sampling.nearmiss method)": [[95, "imblearn.under_sampling.NearMiss.get_metadata_routing", false]], "get_metadata_routing() (imblearn.under_sampling.neighbourhoodcleaningrule method)": [[96, "imblearn.under_sampling.NeighbourhoodCleaningRule.get_metadata_routing", false]], "get_metadata_routing() (imblearn.under_sampling.onesidedselection method)": [[97, "imblearn.under_sampling.OneSidedSelection.get_metadata_routing", false]], "get_metadata_routing() (imblearn.under_sampling.randomundersampler method)": [[98, "imblearn.under_sampling.RandomUnderSampler.get_metadata_routing", false]], "get_metadata_routing() (imblearn.under_sampling.repeatededitednearestneighbours method)": [[99, "imblearn.under_sampling.RepeatedEditedNearestNeighbours.get_metadata_routing", false]], "get_metadata_routing() (imblearn.under_sampling.tomeklinks method)": [[100, "imblearn.under_sampling.TomekLinks.get_metadata_routing", false]], "get_params() (imblearn.combine.smoteenn method)": [[61, "imblearn.combine.SMOTEENN.get_params", false]], "get_params() (imblearn.combine.smotetomek method)": [[62, "imblearn.combine.SMOTETomek.get_params", false]], "get_params() (imblearn.ensemble.balancedbaggingclassifier method)": [[65, "imblearn.ensemble.BalancedBaggingClassifier.get_params", false]], "get_params() (imblearn.ensemble.balancedrandomforestclassifier method)": [[66, "imblearn.ensemble.BalancedRandomForestClassifier.get_params", false]], "get_params() (imblearn.ensemble.easyensembleclassifier method)": [[67, "imblearn.ensemble.EasyEnsembleClassifier.get_params", false]], "get_params() (imblearn.ensemble.rusboostclassifier method)": [[68, "imblearn.ensemble.RUSBoostClassifier.get_params", false]], "get_params() (imblearn.functionsampler method)": [[60, "imblearn.FunctionSampler.get_params", false]], "get_params() (imblearn.metrics.pairwise.valuedifferencemetric method)": [[75, "imblearn.metrics.pairwise.ValueDifferenceMetric.get_params", false]], "get_params() (imblearn.over_sampling.adasyn method)": [[79, "imblearn.over_sampling.ADASYN.get_params", false]], "get_params() (imblearn.over_sampling.borderlinesmote method)": [[80, "imblearn.over_sampling.BorderlineSMOTE.get_params", false]], "get_params() (imblearn.over_sampling.kmeanssmote method)": [[81, "imblearn.over_sampling.KMeansSMOTE.get_params", false]], "get_params() (imblearn.over_sampling.randomoversampler method)": [[82, "imblearn.over_sampling.RandomOverSampler.get_params", false]], "get_params() (imblearn.over_sampling.smote method)": [[83, "imblearn.over_sampling.SMOTE.get_params", false]], "get_params() (imblearn.over_sampling.smoten method)": [[84, "imblearn.over_sampling.SMOTEN.get_params", false]], "get_params() (imblearn.over_sampling.smotenc method)": [[85, "imblearn.over_sampling.SMOTENC.get_params", false]], "get_params() (imblearn.over_sampling.svmsmote method)": [[86, "imblearn.over_sampling.SVMSMOTE.get_params", false]], "get_params() (imblearn.pipeline.pipeline method)": [[87, "imblearn.pipeline.Pipeline.get_params", false]], "get_params() (imblearn.under_sampling.allknn method)": [[90, "imblearn.under_sampling.AllKNN.get_params", false]], "get_params() (imblearn.under_sampling.clustercentroids method)": [[91, "imblearn.under_sampling.ClusterCentroids.get_params", false]], "get_params() (imblearn.under_sampling.condensednearestneighbour method)": [[92, "imblearn.under_sampling.CondensedNearestNeighbour.get_params", false]], "get_params() (imblearn.under_sampling.editednearestneighbours method)": [[93, "imblearn.under_sampling.EditedNearestNeighbours.get_params", false]], "get_params() (imblearn.under_sampling.instancehardnessthreshold method)": [[94, "imblearn.under_sampling.InstanceHardnessThreshold.get_params", false]], "get_params() (imblearn.under_sampling.nearmiss method)": [[95, "imblearn.under_sampling.NearMiss.get_params", false]], "get_params() (imblearn.under_sampling.neighbourhoodcleaningrule method)": [[96, "imblearn.under_sampling.NeighbourhoodCleaningRule.get_params", false]], "get_params() (imblearn.under_sampling.onesidedselection method)": [[97, "imblearn.under_sampling.OneSidedSelection.get_params", false]], "get_params() (imblearn.under_sampling.randomundersampler method)": [[98, "imblearn.under_sampling.RandomUnderSampler.get_params", false]], "get_params() (imblearn.under_sampling.repeatededitednearestneighbours method)": [[99, "imblearn.under_sampling.RepeatedEditedNearestNeighbours.get_params", false]], "get_params() (imblearn.under_sampling.tomeklinks method)": [[100, "imblearn.under_sampling.TomekLinks.get_params", false]], "imblearn.combine": [[57, "module-imblearn.combine", false]], "imblearn.datasets": [[58, "module-imblearn.datasets", false]], "imblearn.ensemble": [[59, "module-imblearn.ensemble", false]], "imblearn.keras": [[106, "module-imblearn.keras", false]], "imblearn.metrics": [[107, "module-imblearn.metrics", false]], "imblearn.metrics.pairwise": [[107, "module-imblearn.metrics.pairwise", false]], "imblearn.over_sampling": [[109, "module-imblearn.over_sampling", false]], "imblearn.pipeline": [[110, "module-imblearn.pipeline", false]], "imblearn.tensorflow": [[111, "module-imblearn.tensorflow", false]], "imblearn.under_sampling": [[112, "module-imblearn.under_sampling", false]], "imblearn.under_sampling._prototype_generation": [[112, "module-imblearn.under_sampling._prototype_generation", false]], "imblearn.under_sampling._prototype_selection": [[112, "module-imblearn.under_sampling._prototype_selection", false]], "imblearn.utils": [[113, "module-imblearn.utils", false]], "imblearn.utils.estimator_checks": [[113, "module-imblearn.utils.estimator_checks", false]], "instancehardnessthreshold (class in imblearn.under_sampling)": [[94, "imblearn.under_sampling.InstanceHardnessThreshold", false]], "inverse_transform() (imblearn.pipeline.pipeline method)": [[87, "imblearn.pipeline.Pipeline.inverse_transform", false]], "is_tomek() (imblearn.under_sampling.tomeklinks static method)": [[100, "imblearn.under_sampling.TomekLinks.is_tomek", false]], "kmeanssmote (class in imblearn.over_sampling)": [[81, "imblearn.over_sampling.KMeansSMOTE", false]], "macro_averaged_mean_absolute_error() (in module imblearn.metrics)": [[73, "imblearn.metrics.macro_averaged_mean_absolute_error", false]], "make_imbalance() (in module imblearn.datasets)": [[64, "imblearn.datasets.make_imbalance", false]], "make_index_balanced_accuracy() (in module imblearn.metrics)": [[74, "imblearn.metrics.make_index_balanced_accuracy", false]], "make_pipeline() (in module imblearn.pipeline)": [[88, "imblearn.pipeline.make_pipeline", false]], "module": [[57, "module-imblearn.combine", false], [58, "module-imblearn.datasets", false], [59, "module-imblearn.ensemble", false], [106, "module-imblearn.keras", false], [107, "module-imblearn.metrics", false], [107, "module-imblearn.metrics.pairwise", false], [109, "module-imblearn.over_sampling", false], [110, "module-imblearn.pipeline", false], [111, "module-imblearn.tensorflow", false], [112, "module-imblearn.under_sampling", false], [112, "module-imblearn.under_sampling._prototype_generation", false], [112, "module-imblearn.under_sampling._prototype_selection", false], [113, "module-imblearn.utils", false], [113, "module-imblearn.utils.estimator_checks", false]], "n_features_in_ (imblearn.pipeline.pipeline property)": [[87, "imblearn.pipeline.Pipeline.n_features_in_", false]], "named_steps (imblearn.pipeline.pipeline property)": [[87, "imblearn.pipeline.Pipeline.named_steps", false]], "nearmiss (class in imblearn.under_sampling)": [[95, "imblearn.under_sampling.NearMiss", false]], "neighbourhoodcleaningrule (class in imblearn.under_sampling)": [[96, "imblearn.under_sampling.NeighbourhoodCleaningRule", false]], "num_batches (imblearn.keras.balancedbatchgenerator property)": [[69, "imblearn.keras.BalancedBatchGenerator.num_batches", false]], "on_epoch_begin() (imblearn.keras.balancedbatchgenerator method)": [[69, "imblearn.keras.BalancedBatchGenerator.on_epoch_begin", false]], "on_epoch_end() (imblearn.keras.balancedbatchgenerator method)": [[69, "imblearn.keras.BalancedBatchGenerator.on_epoch_end", false]], "onesidedselection (class in imblearn.under_sampling)": [[97, "imblearn.under_sampling.OneSidedSelection", false]], "pairwise() (imblearn.metrics.pairwise.valuedifferencemetric method)": [[75, "imblearn.metrics.pairwise.ValueDifferenceMetric.pairwise", false]], "parametrize_with_checks() (in module imblearn.utils.estimator_checks)": [[104, "imblearn.utils.estimator_checks.parametrize_with_checks", false]], "pipeline (class in imblearn.pipeline)": [[87, "imblearn.pipeline.Pipeline", false]], "predict() (imblearn.ensemble.balancedbaggingclassifier method)": [[65, "imblearn.ensemble.BalancedBaggingClassifier.predict", false]], "predict() (imblearn.ensemble.balancedrandomforestclassifier method)": [[66, "imblearn.ensemble.BalancedRandomForestClassifier.predict", false]], "predict() (imblearn.ensemble.easyensembleclassifier method)": [[67, "imblearn.ensemble.EasyEnsembleClassifier.predict", false]], "predict() (imblearn.ensemble.rusboostclassifier method)": [[68, "imblearn.ensemble.RUSBoostClassifier.predict", false]], "predict() (imblearn.pipeline.pipeline method)": [[87, "imblearn.pipeline.Pipeline.predict", false]], "predict_log_proba() (imblearn.ensemble.balancedbaggingclassifier method)": [[65, "imblearn.ensemble.BalancedBaggingClassifier.predict_log_proba", false]], "predict_log_proba() (imblearn.ensemble.balancedrandomforestclassifier method)": [[66, "imblearn.ensemble.BalancedRandomForestClassifier.predict_log_proba", false]], "predict_log_proba() (imblearn.ensemble.easyensembleclassifier method)": [[67, "imblearn.ensemble.EasyEnsembleClassifier.predict_log_proba", false]], "predict_log_proba() (imblearn.ensemble.rusboostclassifier method)": [[68, "imblearn.ensemble.RUSBoostClassifier.predict_log_proba", false]], "predict_log_proba() (imblearn.pipeline.pipeline method)": [[87, "imblearn.pipeline.Pipeline.predict_log_proba", false]], "predict_proba() (imblearn.ensemble.balancedbaggingclassifier method)": [[65, "imblearn.ensemble.BalancedBaggingClassifier.predict_proba", false]], "predict_proba() (imblearn.ensemble.balancedrandomforestclassifier method)": [[66, "imblearn.ensemble.BalancedRandomForestClassifier.predict_proba", false]], "predict_proba() (imblearn.ensemble.easyensembleclassifier method)": [[67, "imblearn.ensemble.EasyEnsembleClassifier.predict_proba", false]], "predict_proba() (imblearn.ensemble.rusboostclassifier method)": [[68, "imblearn.ensemble.RUSBoostClassifier.predict_proba", false]], "predict_proba() (imblearn.pipeline.pipeline method)": [[87, "imblearn.pipeline.Pipeline.predict_proba", false]], "randomoversampler (class in imblearn.over_sampling)": [[82, "imblearn.over_sampling.RandomOverSampler", false]], "randomundersampler (class in imblearn.under_sampling)": [[98, "imblearn.under_sampling.RandomUnderSampler", false]], "repeatededitednearestneighbours (class in imblearn.under_sampling)": [[99, "imblearn.under_sampling.RepeatedEditedNearestNeighbours", false]], "rusboostclassifier (class in imblearn.ensemble)": [[68, "imblearn.ensemble.RUSBoostClassifier", false]], "score() (imblearn.ensemble.balancedbaggingclassifier method)": [[65, "imblearn.ensemble.BalancedBaggingClassifier.score", false]], "score() (imblearn.ensemble.balancedrandomforestclassifier method)": [[66, "imblearn.ensemble.BalancedRandomForestClassifier.score", false]], "score() (imblearn.ensemble.easyensembleclassifier method)": [[67, "imblearn.ensemble.EasyEnsembleClassifier.score", false]], "score() (imblearn.ensemble.rusboostclassifier method)": [[68, "imblearn.ensemble.RUSBoostClassifier.score", false]], "score() (imblearn.pipeline.pipeline method)": [[87, "imblearn.pipeline.Pipeline.score", false]], "score_samples() (imblearn.pipeline.pipeline method)": [[87, "imblearn.pipeline.Pipeline.score_samples", false]], "sensitivity_score() (in module imblearn.metrics)": [[76, "imblearn.metrics.sensitivity_score", false]], "sensitivity_specificity_support() (in module imblearn.metrics)": [[77, "imblearn.metrics.sensitivity_specificity_support", false]], "set_fit_request() (imblearn.ensemble.balancedbaggingclassifier method)": [[65, "imblearn.ensemble.BalancedBaggingClassifier.set_fit_request", false]], "set_fit_request() (imblearn.ensemble.balancedrandomforestclassifier method)": [[66, "imblearn.ensemble.BalancedRandomForestClassifier.set_fit_request", false]], "set_fit_request() (imblearn.ensemble.easyensembleclassifier method)": [[67, "imblearn.ensemble.EasyEnsembleClassifier.set_fit_request", false]], "set_fit_request() (imblearn.ensemble.rusboostclassifier method)": [[68, "imblearn.ensemble.RUSBoostClassifier.set_fit_request", false]], "set_output() (imblearn.pipeline.pipeline method)": [[87, "imblearn.pipeline.Pipeline.set_output", false]], "set_params() (imblearn.combine.smoteenn method)": [[61, "imblearn.combine.SMOTEENN.set_params", false]], "set_params() (imblearn.combine.smotetomek method)": [[62, "imblearn.combine.SMOTETomek.set_params", false]], "set_params() (imblearn.ensemble.balancedbaggingclassifier method)": [[65, "imblearn.ensemble.BalancedBaggingClassifier.set_params", false]], "set_params() (imblearn.ensemble.balancedrandomforestclassifier method)": [[66, "imblearn.ensemble.BalancedRandomForestClassifier.set_params", false]], "set_params() (imblearn.ensemble.easyensembleclassifier method)": [[67, "imblearn.ensemble.EasyEnsembleClassifier.set_params", false]], "set_params() (imblearn.ensemble.rusboostclassifier method)": [[68, "imblearn.ensemble.RUSBoostClassifier.set_params", false]], "set_params() (imblearn.functionsampler method)": [[60, "imblearn.FunctionSampler.set_params", false]], "set_params() (imblearn.metrics.pairwise.valuedifferencemetric method)": [[75, "imblearn.metrics.pairwise.ValueDifferenceMetric.set_params", false]], "set_params() (imblearn.over_sampling.adasyn method)": [[79, "imblearn.over_sampling.ADASYN.set_params", false]], "set_params() (imblearn.over_sampling.borderlinesmote method)": [[80, "imblearn.over_sampling.BorderlineSMOTE.set_params", false]], "set_params() (imblearn.over_sampling.kmeanssmote method)": [[81, "imblearn.over_sampling.KMeansSMOTE.set_params", false]], "set_params() (imblearn.over_sampling.randomoversampler method)": [[82, "imblearn.over_sampling.RandomOverSampler.set_params", false]], "set_params() (imblearn.over_sampling.smote method)": [[83, "imblearn.over_sampling.SMOTE.set_params", false]], "set_params() (imblearn.over_sampling.smoten method)": [[84, "imblearn.over_sampling.SMOTEN.set_params", false]], "set_params() (imblearn.over_sampling.smotenc method)": [[85, "imblearn.over_sampling.SMOTENC.set_params", false]], "set_params() (imblearn.over_sampling.svmsmote method)": [[86, "imblearn.over_sampling.SVMSMOTE.set_params", false]], "set_params() (imblearn.pipeline.pipeline method)": [[87, "imblearn.pipeline.Pipeline.set_params", false]], "set_params() (imblearn.under_sampling.allknn method)": [[90, "imblearn.under_sampling.AllKNN.set_params", false]], "set_params() (imblearn.under_sampling.clustercentroids method)": [[91, "imblearn.under_sampling.ClusterCentroids.set_params", false]], "set_params() (imblearn.under_sampling.condensednearestneighbour method)": [[92, "imblearn.under_sampling.CondensedNearestNeighbour.set_params", false]], "set_params() (imblearn.under_sampling.editednearestneighbours method)": [[93, "imblearn.under_sampling.EditedNearestNeighbours.set_params", false]], "set_params() (imblearn.under_sampling.instancehardnessthreshold method)": [[94, "imblearn.under_sampling.InstanceHardnessThreshold.set_params", false]], "set_params() (imblearn.under_sampling.nearmiss method)": [[95, "imblearn.under_sampling.NearMiss.set_params", false]], "set_params() (imblearn.under_sampling.neighbourhoodcleaningrule method)": [[96, "imblearn.under_sampling.NeighbourhoodCleaningRule.set_params", false]], "set_params() (imblearn.under_sampling.onesidedselection method)": [[97, "imblearn.under_sampling.OneSidedSelection.set_params", false]], "set_params() (imblearn.under_sampling.randomundersampler method)": [[98, "imblearn.under_sampling.RandomUnderSampler.set_params", false]], "set_params() (imblearn.under_sampling.repeatededitednearestneighbours method)": [[99, "imblearn.under_sampling.RepeatedEditedNearestNeighbours.set_params", false]], "set_params() (imblearn.under_sampling.tomeklinks method)": [[100, "imblearn.under_sampling.TomekLinks.set_params", false]], "set_score_request() (imblearn.ensemble.balancedbaggingclassifier method)": [[65, "imblearn.ensemble.BalancedBaggingClassifier.set_score_request", false]], "set_score_request() (imblearn.ensemble.balancedrandomforestclassifier method)": [[66, "imblearn.ensemble.BalancedRandomForestClassifier.set_score_request", false]], "set_score_request() (imblearn.ensemble.easyensembleclassifier method)": [[67, "imblearn.ensemble.EasyEnsembleClassifier.set_score_request", false]], "set_score_request() (imblearn.ensemble.rusboostclassifier method)": [[68, "imblearn.ensemble.RUSBoostClassifier.set_score_request", false]], "set_score_request() (imblearn.pipeline.pipeline method)": [[87, "imblearn.pipeline.Pipeline.set_score_request", false]], "smote (class in imblearn.over_sampling)": [[83, "imblearn.over_sampling.SMOTE", false]], "smoteenn (class in imblearn.combine)": [[61, "imblearn.combine.SMOTEENN", false]], "smoten (class in imblearn.over_sampling)": [[84, "imblearn.over_sampling.SMOTEN", false]], "smotenc (class in imblearn.over_sampling)": [[85, "imblearn.over_sampling.SMOTENC", false]], "smotetomek (class in imblearn.combine)": [[62, "imblearn.combine.SMOTETomek", false]], "specificity_score() (in module imblearn.metrics)": [[78, "imblearn.metrics.specificity_score", false]], "staged_decision_function() (imblearn.ensemble.rusboostclassifier method)": [[68, "imblearn.ensemble.RUSBoostClassifier.staged_decision_function", false]], "staged_predict() (imblearn.ensemble.rusboostclassifier method)": [[68, "imblearn.ensemble.RUSBoostClassifier.staged_predict", false]], "staged_predict_proba() (imblearn.ensemble.rusboostclassifier method)": [[68, "imblearn.ensemble.RUSBoostClassifier.staged_predict_proba", false]], "staged_score() (imblearn.ensemble.rusboostclassifier method)": [[68, "imblearn.ensemble.RUSBoostClassifier.staged_score", false]], "svmsmote (class in imblearn.over_sampling)": [[86, "imblearn.over_sampling.SVMSMOTE", false]], "tomeklinks (class in imblearn.under_sampling)": [[100, "imblearn.under_sampling.TomekLinks", false]], "transform() (imblearn.pipeline.pipeline method)": [[87, "imblearn.pipeline.Pipeline.transform", false]], "valuedifferencemetric (class in imblearn.metrics.pairwise)": [[75, "imblearn.metrics.pairwise.ValueDifferenceMetric", false]]}, "objects": {"imblearn": [[60, 0, 1, "", "FunctionSampler"], [57, 2, 0, "-", "combine"], [58, 2, 0, "-", "datasets"], [59, 2, 0, "-", "ensemble"], [106, 2, 0, "-", "keras"], [107, 2, 0, "-", "metrics"], [109, 2, 0, "-", "over_sampling"], [110, 2, 0, "-", "pipeline"], [111, 2, 0, "-", "tensorflow"], [112, 2, 0, "-", "under_sampling"], [113, 2, 0, "-", "utils"]], "imblearn.FunctionSampler": [[60, 1, 1, "", "fit"], [60, 1, 1, "", "fit_resample"], [60, 1, 1, "", "get_feature_names_out"], [60, 1, 1, "", "get_metadata_routing"], [60, 1, 1, "", "get_params"], [60, 1, 1, "", "set_params"]], "imblearn.combine": [[61, 0, 1, "", "SMOTEENN"], [62, 0, 1, "", "SMOTETomek"]], "imblearn.combine.SMOTEENN": [[61, 1, 1, "", "fit"], [61, 1, 1, "", "fit_resample"], [61, 1, 1, "", "get_feature_names_out"], [61, 1, 1, "", "get_metadata_routing"], [61, 1, 1, "", "get_params"], [61, 1, 1, "", "set_params"]], "imblearn.combine.SMOTETomek": [[62, 1, 1, "", "fit"], [62, 1, 1, "", "fit_resample"], [62, 1, 1, "", "get_feature_names_out"], [62, 1, 1, "", "get_metadata_routing"], [62, 1, 1, "", "get_params"], [62, 1, 1, "", "set_params"]], "imblearn.datasets": [[63, 3, 1, "", "fetch_datasets"], [64, 3, 1, "", "make_imbalance"]], "imblearn.ensemble": [[65, 0, 1, "", "BalancedBaggingClassifier"], [66, 0, 1, "", "BalancedRandomForestClassifier"], [67, 0, 1, "", "EasyEnsembleClassifier"], [68, 0, 1, "", "RUSBoostClassifier"]], "imblearn.ensemble.BalancedBaggingClassifier": [[65, 4, 1, "", "base_estimator_"], [65, 1, 1, "", "decision_function"], [65, 4, 1, "", "estimators_samples_"], [65, 1, 1, "", "fit"], [65, 1, 1, "", "get_metadata_routing"], [65, 1, 1, "", "get_params"], [65, 1, 1, "", "predict"], [65, 1, 1, "", "predict_log_proba"], [65, 1, 1, "", "predict_proba"], [65, 1, 1, "", "score"], [65, 1, 1, "", "set_fit_request"], [65, 1, 1, "", "set_params"], [65, 1, 1, "", "set_score_request"]], "imblearn.ensemble.BalancedRandomForestClassifier": [[66, 1, 1, "", "apply"], [66, 1, 1, "", "decision_path"], [66, 4, 1, "", "estimators_samples_"], [66, 4, 1, "", "feature_importances_"], [66, 1, 1, "", "fit"], [66, 1, 1, "", "get_metadata_routing"], [66, 1, 1, "", "get_params"], [66, 1, 1, "", "predict"], [66, 1, 1, "", "predict_log_proba"], [66, 1, 1, "", "predict_proba"], [66, 1, 1, "", "score"], [66, 1, 1, "", "set_fit_request"], [66, 1, 1, "", "set_params"], [66, 1, 1, "", "set_score_request"]], "imblearn.ensemble.EasyEnsembleClassifier": [[67, 4, 1, "", "base_estimator_"], [67, 1, 1, "", "decision_function"], [67, 4, 1, "", "estimators_samples_"], [67, 1, 1, "", "fit"], [67, 1, 1, "", "get_metadata_routing"], [67, 1, 1, "", "get_params"], [67, 1, 1, "", "predict"], [67, 1, 1, "", "predict_log_proba"], [67, 1, 1, "", "predict_proba"], [67, 1, 1, "", "score"], [67, 1, 1, "", "set_fit_request"], [67, 1, 1, "", "set_params"], [67, 1, 1, "", "set_score_request"]], "imblearn.ensemble.RUSBoostClassifier": [[68, 1, 1, "", "decision_function"], [68, 4, 1, "", "feature_importances_"], [68, 1, 1, "", "fit"], [68, 1, 1, "", "get_metadata_routing"], [68, 1, 1, "", "get_params"], [68, 1, 1, "", "predict"], [68, 1, 1, "", "predict_log_proba"], [68, 1, 1, "", "predict_proba"], [68, 1, 1, "", "score"], [68, 1, 1, "", "set_fit_request"], [68, 1, 1, "", "set_params"], [68, 1, 1, "", "set_score_request"], [68, 1, 1, "", "staged_decision_function"], [68, 1, 1, "", "staged_predict"], [68, 1, 1, "", "staged_predict_proba"], [68, 1, 1, "", "staged_score"]], "imblearn.keras": [[69, 0, 1, "", "BalancedBatchGenerator"], [70, 3, 1, "", "balanced_batch_generator"]], "imblearn.keras.BalancedBatchGenerator": [[69, 4, 1, "", "num_batches"], [69, 1, 1, "", "on_epoch_begin"], [69, 1, 1, "", "on_epoch_end"]], "imblearn.metrics": [[71, 3, 1, "", "classification_report_imbalanced"], [72, 3, 1, "", "geometric_mean_score"], [73, 3, 1, "", "macro_averaged_mean_absolute_error"], [74, 3, 1, "", "make_index_balanced_accuracy"], [107, 2, 0, "-", "pairwise"], [76, 3, 1, "", "sensitivity_score"], [77, 3, 1, "", "sensitivity_specificity_support"], [78, 3, 1, "", "specificity_score"]], "imblearn.metrics.pairwise": [[75, 0, 1, "", "ValueDifferenceMetric"]], "imblearn.metrics.pairwise.ValueDifferenceMetric": [[75, 1, 1, "", "fit"], [75, 1, 1, "", "get_metadata_routing"], [75, 1, 1, "", "get_params"], [75, 1, 1, "", "pairwise"], [75, 1, 1, "", "set_params"]], "imblearn.over_sampling": [[79, 0, 1, "", "ADASYN"], [80, 0, 1, "", "BorderlineSMOTE"], [81, 0, 1, "", "KMeansSMOTE"], [82, 0, 1, "", "RandomOverSampler"], [83, 0, 1, "", "SMOTE"], [84, 0, 1, "", "SMOTEN"], [85, 0, 1, "", "SMOTENC"], [86, 0, 1, "", "SVMSMOTE"]], "imblearn.over_sampling.ADASYN": [[79, 1, 1, "", "fit"], [79, 1, 1, "", "fit_resample"], [79, 1, 1, "", "get_feature_names_out"], [79, 1, 1, "", "get_metadata_routing"], [79, 1, 1, "", "get_params"], [79, 1, 1, "", "set_params"]], "imblearn.over_sampling.BorderlineSMOTE": [[80, 1, 1, "", "fit"], [80, 1, 1, "", "fit_resample"], [80, 1, 1, "", "get_feature_names_out"], [80, 1, 1, "", "get_metadata_routing"], [80, 1, 1, "", "get_params"], [80, 1, 1, "", "set_params"]], "imblearn.over_sampling.KMeansSMOTE": [[81, 1, 1, "", "fit"], [81, 1, 1, "", "fit_resample"], [81, 1, 1, "", "get_feature_names_out"], [81, 1, 1, "", "get_metadata_routing"], [81, 1, 1, "", "get_params"], [81, 1, 1, "", "set_params"]], "imblearn.over_sampling.RandomOverSampler": [[82, 1, 1, "", "fit"], [82, 1, 1, "", "fit_resample"], [82, 1, 1, "", "get_feature_names_out"], [82, 1, 1, "", "get_metadata_routing"], [82, 1, 1, "", "get_params"], [82, 1, 1, "", "set_params"]], "imblearn.over_sampling.SMOTE": [[83, 1, 1, "", "fit"], [83, 1, 1, "", "fit_resample"], [83, 1, 1, "", "get_feature_names_out"], [83, 1, 1, "", "get_metadata_routing"], [83, 1, 1, "", "get_params"], [83, 1, 1, "", "set_params"]], "imblearn.over_sampling.SMOTEN": [[84, 1, 1, "", "fit"], [84, 1, 1, "", "fit_resample"], [84, 1, 1, "", "get_feature_names_out"], [84, 1, 1, "", "get_metadata_routing"], [84, 1, 1, "", "get_params"], [84, 1, 1, "", "set_params"]], "imblearn.over_sampling.SMOTENC": [[85, 1, 1, "", "fit"], [85, 1, 1, "", "fit_resample"], [85, 1, 1, "", "get_feature_names_out"], [85, 1, 1, "", "get_metadata_routing"], [85, 1, 1, "", "get_params"], [85, 1, 1, "", "set_params"]], "imblearn.over_sampling.SVMSMOTE": [[86, 1, 1, "", "fit"], [86, 1, 1, "", "fit_resample"], [86, 1, 1, "", "get_feature_names_out"], [86, 1, 1, "", "get_metadata_routing"], [86, 1, 1, "", "get_params"], [86, 1, 1, "", "set_params"]], "imblearn.pipeline": [[87, 0, 1, "", "Pipeline"], [88, 3, 1, "", "make_pipeline"]], "imblearn.pipeline.Pipeline": [[87, 4, 1, "", "classes_"], [87, 1, 1, "", "decision_function"], [87, 4, 1, "", "feature_names_in_"], [87, 1, 1, "", "fit"], [87, 1, 1, "", "fit_predict"], [87, 1, 1, "", "fit_resample"], [87, 1, 1, "", "fit_transform"], [87, 1, 1, "", "get_feature_names_out"], [87, 1, 1, "", "get_metadata_routing"], [87, 1, 1, "", "get_params"], [87, 1, 1, "", "inverse_transform"], [87, 4, 1, "", "n_features_in_"], [87, 4, 1, "", "named_steps"], [87, 1, 1, "", "predict"], [87, 1, 1, "", "predict_log_proba"], [87, 1, 1, "", "predict_proba"], [87, 1, 1, "", "score"], [87, 1, 1, "", "score_samples"], [87, 1, 1, "", "set_output"], [87, 1, 1, "", "set_params"], [87, 1, 1, "", "set_score_request"], [87, 1, 1, "", "transform"]], "imblearn.tensorflow": [[89, 3, 1, "", "balanced_batch_generator"]], "imblearn.under_sampling": [[90, 0, 1, "", "AllKNN"], [91, 0, 1, "", "ClusterCentroids"], [92, 0, 1, "", "CondensedNearestNeighbour"], [93, 0, 1, "", "EditedNearestNeighbours"], [94, 0, 1, "", "InstanceHardnessThreshold"], [95, 0, 1, "", "NearMiss"], [96, 0, 1, "", "NeighbourhoodCleaningRule"], [97, 0, 1, "", "OneSidedSelection"], [98, 0, 1, "", "RandomUnderSampler"], [99, 0, 1, "", "RepeatedEditedNearestNeighbours"], [100, 0, 1, "", "TomekLinks"], [112, 2, 0, "-", "_prototype_generation"], [112, 2, 0, "-", "_prototype_selection"]], "imblearn.under_sampling.AllKNN": [[90, 1, 1, "", "fit"], [90, 1, 1, "", "fit_resample"], [90, 1, 1, "", "get_feature_names_out"], [90, 1, 1, "", "get_metadata_routing"], [90, 1, 1, "", "get_params"], [90, 1, 1, "", "set_params"]], "imblearn.under_sampling.ClusterCentroids": [[91, 1, 1, "", "fit"], [91, 1, 1, "", "fit_resample"], [91, 1, 1, "", "get_feature_names_out"], [91, 1, 1, "", "get_metadata_routing"], [91, 1, 1, "", "get_params"], [91, 1, 1, "", "set_params"]], "imblearn.under_sampling.CondensedNearestNeighbour": [[92, 4, 1, "", "estimator_"], [92, 1, 1, "", "fit"], [92, 1, 1, "", "fit_resample"], [92, 1, 1, "", "get_feature_names_out"], [92, 1, 1, "", "get_metadata_routing"], [92, 1, 1, "", "get_params"], [92, 1, 1, "", "set_params"]], "imblearn.under_sampling.EditedNearestNeighbours": [[93, 1, 1, "", "fit"], [93, 1, 1, "", "fit_resample"], [93, 1, 1, "", "get_feature_names_out"], [93, 1, 1, "", "get_metadata_routing"], [93, 1, 1, "", "get_params"], [93, 1, 1, "", "set_params"]], "imblearn.under_sampling.InstanceHardnessThreshold": [[94, 1, 1, "", "fit"], [94, 1, 1, "", "fit_resample"], [94, 1, 1, "", "get_feature_names_out"], [94, 1, 1, "", "get_metadata_routing"], [94, 1, 1, "", "get_params"], [94, 1, 1, "", "set_params"]], "imblearn.under_sampling.NearMiss": [[95, 1, 1, "", "fit"], [95, 1, 1, "", "fit_resample"], [95, 1, 1, "", "get_feature_names_out"], [95, 1, 1, "", "get_metadata_routing"], [95, 1, 1, "", "get_params"], [95, 1, 1, "", "set_params"]], "imblearn.under_sampling.NeighbourhoodCleaningRule": [[96, 1, 1, "", "fit"], [96, 1, 1, "", "fit_resample"], [96, 1, 1, "", "get_feature_names_out"], [96, 1, 1, "", "get_metadata_routing"], [96, 1, 1, "", "get_params"], [96, 1, 1, "", "set_params"]], "imblearn.under_sampling.OneSidedSelection": [[97, 4, 1, "", "estimator_"], [97, 1, 1, "", "fit"], [97, 1, 1, "", "fit_resample"], [97, 1, 1, "", "get_feature_names_out"], [97, 1, 1, "", "get_metadata_routing"], [97, 1, 1, "", "get_params"], [97, 1, 1, "", "set_params"]], "imblearn.under_sampling.RandomUnderSampler": [[98, 1, 1, "", "fit"], [98, 1, 1, "", "fit_resample"], [98, 1, 1, "", "get_feature_names_out"], [98, 1, 1, "", "get_metadata_routing"], [98, 1, 1, "", "get_params"], [98, 1, 1, "", "set_params"]], "imblearn.under_sampling.RepeatedEditedNearestNeighbours": [[99, 1, 1, "", "fit"], [99, 1, 1, "", "fit_resample"], [99, 1, 1, "", "get_feature_names_out"], [99, 1, 1, "", "get_metadata_routing"], [99, 1, 1, "", "get_params"], [99, 1, 1, "", "set_params"]], "imblearn.under_sampling.TomekLinks": [[100, 1, 1, "", "fit"], [100, 1, 1, "", "fit_resample"], [100, 1, 1, "", "get_feature_names_out"], [100, 1, 1, "", "get_metadata_routing"], [100, 1, 1, "", "get_params"], [100, 1, 1, "", "is_tomek"], [100, 1, 1, "", "set_params"]], "imblearn.utils": [[101, 3, 1, "", "check_neighbors_object"], [102, 3, 1, "", "check_sampling_strategy"], [103, 3, 1, "", "check_target_type"], [113, 2, 0, "-", "estimator_checks"]], "imblearn.utils.estimator_checks": [[104, 3, 1, "", "parametrize_with_checks"]]}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "module", "Python module"], "3": ["py", "function", "Python function"], "4": ["py", "property", "Python property"]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:module", "3": "py:function", "4": "py:property"}, "terms": {"": [8, 10, 13, 19, 28, 32, 33, 36, 41, 42, 44, 45, 46, 47, 50, 52, 55, 56, 60, 61, 62, 63, 65, 66, 67, 68, 72, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 116, 131], "0": [2, 5, 6, 7, 8, 9, 10, 11, 13, 16, 19, 20, 23, 24, 28, 31, 32, 33, 36, 38, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104, 114, 115], "00": [3, 6, 7, 9, 11, 14, 17, 21, 25, 29, 34, 36, 37, 38, 43, 71, 87, 114], "000": [11, 38, 46, 63, 114], "001": 72, "005": 32, "008": 45, "00837": [81, 131], "009": 45, "01": [11, 31, 32, 37, 40, 44, 48, 55, 56, 114, 115], "010": 72, "011": 45, "012": [19, 131], "014": [19, 45], "015": 19, "016": 19, "019": 45, "02": [3, 13, 14, 17, 25, 31, 40, 43, 114], "024": 45, "025": [19, 21, 114], "0295": 131, "03": 114, "033193400066544886": 31, "037": [16, 17, 114], "04": [34, 48, 52, 75, 114, 131], "042": 45, "05": [7, 31, 40, 44, 48, 55, 56, 115], "06": [29, 46, 63, 114], "075": [24, 25, 114], "09": [43, 114], "1": [0, 2, 3, 5, 6, 7, 8, 9, 10, 13, 14, 16, 17, 19, 20, 23, 24, 28, 29, 31, 32, 33, 36, 37, 40, 42, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 115, 118, 121, 123, 126, 131], "10": [2, 5, 8, 10, 13, 16, 19, 20, 23, 24, 28, 31, 32, 33, 36, 40, 41, 42, 46, 50, 52, 53, 54, 55, 56, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 131], "100": [7, 8, 10, 13, 31, 32, 33, 46, 48, 55, 60, 61, 62, 63, 65, 66, 67, 79, 80, 81, 82, 83, 85, 86, 87, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100], "1000": [5, 10, 31, 40, 60, 61, 62, 65, 66, 67, 68, 79, 80, 82, 83, 85, 86, 87, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 117, 121], "10000": 48, "1001": [117, 121], "1002": [117, 121], "1003": [117, 121], "1004": [117, 121], "1006": [117, 121], "1007": [117, 121, 131], "1008": [117, 121], "1009": [117, 121], "1011": [117, 122], "1012": [117, 122], "1014": [117, 122], "1015": [117, 122], "1016": [117, 122], "1023": [19, 117, 122], "103": [46, 63, 65], "1049": [117, 122], "1058": [117, 122], "1059": [117, 122], "1065": [117, 122], "1073": [117, 122], "1074": [117, 122], "1075": [117, 122], "1084": [117, 122], "109": [117, 123], "1097": [117, 122], "10_000": [19, 23, 24, 55], "11": [28, 31, 34, 40, 46, 63, 66, 114, 115, 128, 130], "110": [65, 66, 131], "1109": [118, 131], "111": 63, "1115": 118, "1119": 45, "1127": 23, "115": 115, "11687": 5, "12": [6, 9, 11, 20, 21, 31, 41, 42, 46, 50, 53, 54, 63, 66, 68, 75, 92, 96, 97, 114, 120, 125, 131], "1213": [75, 131], "122": [82, 131], "1228": [75, 131], "123": [23, 65], "1238": 5, "1250": [23, 36], "126": 131, "13": [41, 42, 43, 46, 47, 49, 63, 66, 74, 117, 121, 122, 131], "130": [46, 63], "1322": [79, 131], "1328": [79, 131], "1353": 9, "137": [40, 43, 114], "14": [41, 42, 46, 50, 53, 54, 63, 68, 92, 96, 117, 118, 122, 131], "140": 65, "14021849735700803": 31, "141": 55, "142": 55, "145": [46, 63], "15": [2, 10, 13, 16, 31, 32, 40, 41, 42, 46, 47, 50, 53, 54, 63, 118], "150": 31, "159": 55, "16": [0, 8, 28, 34, 41, 42, 46, 50, 53, 54, 63, 73, 117, 127, 130, 131], "163": [46, 63], "169": 55, "17": [0, 6, 46, 50, 53, 54, 63], "170": [42, 43, 114], "1711": [81, 131], "174": 115, "177": [46, 63], "179": [97, 131], "18": [0, 32, 41, 42, 46, 47, 62, 63, 66, 85, 117, 129, 131], "181": [92, 115], "182": [117, 123], "183": [46, 63, 117, 123], "185": [68, 131], "186": [97, 131], "1871": 8, "188": [117, 123], "19": [46, 50, 53, 54, 56, 63, 85], "192": 115, "193": 115, "1968": [92, 131], "197": [11, 68, 131], "1972": [93, 131], "1976": [90, 99, 100, 131], "1986": [75, 131], "1989993778979113": 31, "199": [11, 17, 21, 25, 29, 34, 37, 43, 114], "1996": 65, "1997": [19, 65, 72, 97, 131], "1998": 65, "1999": 65, "1d": 71, "1e": 55, "2": [2, 5, 6, 7, 8, 9, 10, 11, 13, 14, 16, 19, 20, 21, 23, 24, 25, 26, 28, 31, 32, 33, 36, 39, 40, 42, 44, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 78, 79, 80, 81, 82, 83, 85, 86, 87, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 114, 115, 119, 120, 126, 130, 131], "20": [2, 9, 23, 24, 28, 31, 46, 47, 49, 50, 52, 53, 54, 56, 60, 61, 62, 63, 64, 65, 67, 79, 80, 82, 83, 84, 85, 86, 87, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 117, 118, 125, 131], "200": [6, 7, 10, 11, 13, 14, 16, 19, 23, 24, 28, 32, 33, 36, 41, 42, 48, 114], "2001": [96, 131], "2002": [80, 83, 84, 85, 86, 131], "2003": [62, 72, 95, 131], "2004": [46, 61, 63, 65, 66, 131], "2005": [80, 131], "2008": [79, 131], "2009": [19, 65, 67, 86, 131], "2010": 68, "2011": 63, "2012": [65, 74, 131], "2014": [0, 82, 94, 131], "2016": [117, 119], "2017": [0, 117, 123, 131], "2018": [117, 124, 125], "2019": [117, 126, 127], "2020": [117, 127, 128, 129], "2021": [117, 129], "2022": [117, 120, 130], "2023": [117, 121], "2024": [49, 117, 118, 122], "204": [117, 123], "205": [2, 3, 114], "206": 40, "208": 115, "21": [32, 46, 63, 74, 86, 114, 117, 125, 126, 131], "211": [32, 55], "213": 115, "22": [46, 63, 66, 117, 124], "220": 115, "22199": 32, "224": 87, "225": [65, 67, 94, 131], "23": [46, 63, 65, 67, 104, 117, 128], "230": [117, 123, 131], "231": [43, 114, 117, 123], "232": 40, "234": 115, "235": [117, 123], "24": [46, 50, 53, 54, 63, 65, 104, 115, 117, 122, 131], "242": [117, 124], "249": [117, 124], "25": [2, 6, 7, 10, 13, 16, 31, 36, 40, 46, 63, 73, 74, 131], "250": 87, "251": 9, "256": [94, 131], "26": [19, 21, 46, 63, 87, 114, 117, 119], "262": [44, 115], "264": [117, 124], "268": 92, "27": [46, 63], "272": [6, 11, 114], "275": [5, 11, 114], "277": [117, 124], "278": [46, 63], "28": [46, 63, 82, 117, 120, 122, 126, 131], "283": 131, "287": 131, "29": [61, 75, 117, 129, 131], "290": [117, 124], "294": [46, 63], "295": [117, 124], "2f": [2, 20, 28, 41], "3": [3, 5, 7, 8, 9, 13, 16, 19, 20, 24, 28, 31, 32, 33, 34, 36, 40, 42, 43, 44, 46, 48, 50, 53, 54, 55, 56, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 79, 80, 82, 83, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 114, 115, 119, 121, 123, 125, 131], "30": [5, 31, 46, 50, 53, 54, 56, 64, 69, 70, 75, 84], "300": [31, 45, 46, 63], "301": 46, "307": [117, 124], "308": [11, 114], "309": 9, "31": [117, 122], "312": [117, 124], "316": [117, 124], "319": 9, "32": [6, 46, 55, 63, 69, 70, 89], "320": [34, 114], "321": [31, 80, 83, 84, 85, 86, 117, 124, 131], "324": 131, "33": [9, 11, 31, 46, 56, 63, 76, 77], "331": [117, 125, 131], "3327240726719727": 31, "336": [46, 63], "34": [32, 46, 63, 131], "346": 65, "35": [2, 8, 11, 46, 114], "3502": 44, "354": [117, 125], "357": [80, 83, 84, 85, 86, 131], "36": [9, 46, 56, 63, 65, 72, 131], "360": [46, 63], "361": 65, "365": [0, 23, 25, 114], "3657680728116921": 31, "367": [117, 125], "37": 56, "3710891618824609": 31, "37155": 5, "372": [117, 125], "375": 36, "377": 9, "379": [117, 125], "38": [6, 21], "389": [9, 46, 63], "39": [46, 67, 131], "394": [9, 117, 125], "3f": [5, 10, 19, 24, 45, 55], "3nn": 8, "4": [7, 9, 11, 13, 23, 24, 28, 31, 32, 33, 40, 41, 42, 46, 50, 53, 54, 63, 65, 66, 67, 68, 69, 80, 82, 85, 86, 87, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 114], "40": [31, 46, 68, 69, 70, 84, 131], "400": 40, "4060": 44, "407": [46, 63], "408": [93, 131], "409": [117, 125], "41": 55, "411": [117, 125], "412": [19, 65, 117, 125, 131], "417": [46, 63], "418": [21, 114], "419": 20, "42": [5, 6, 7, 8, 10, 11, 23, 24, 28, 31, 36, 46, 55, 56, 61, 62, 63, 64, 65, 67, 69, 70, 79, 80, 81, 82, 83, 85, 86, 87, 91, 92, 94, 97, 98, 114], "421": [93, 131], "424": [33, 34, 114], "426": [19, 65, 131], "43": 32, "43321419": 55, "435": [46, 63, 117, 126], "4381": 44, "439": [117, 125], "44": [46, 52, 63, 74, 75], "440": [117, 125], "4404": 115, "441": [25, 117, 125], "4413": 44, "446": [117, 125], "447": [117, 125], "448": [90, 99, 131], "4499": 44, "45": [32, 41, 42, 46], "450": [117, 125], "451": [117, 125], "452": [41, 43, 46, 63, 90, 99, 114, 117, 125, 131], "4535": 115, "454": [117, 125], "455": [117, 125], "4551": 115, "4566": 44, "4568": 115, "458": [117, 125], "459": [117, 125], "4601": 115, "462": [117, 125], "46571114": 55, "4662": 56, "4666": 115, "4673": 56, "4674": [44, 56, 115], "469": [117, 125], "47": [2, 46], "470": [117, 125], "471": 72, "472": [117, 125], "474": [117, 125], "480": [9, 117, 125], "481": [8, 11, 114], "484": [46, 63], "49": [46, 63], "490": [117, 125], "491": [117, 125], "49112498": 55, "49177372": 55, "495": [117, 125], "496": 97, "497": [117, 125], "5": [0, 2, 5, 10, 16, 19, 20, 24, 31, 32, 36, 40, 41, 42, 46, 47, 50, 52, 53, 54, 56, 63, 65, 66, 67, 68, 71, 73, 75, 78, 79, 80, 81, 83, 84, 85, 86, 94, 96, 115, 122, 125, 127, 131], "50": [6, 7, 10, 20, 31, 46, 56, 64, 68, 69, 70, 71], "500": [5, 7, 40, 92, 117, 126], "5000": [23, 24, 28, 31, 36, 44, 55, 56, 115], "500000": 5, "503": [13, 14, 114], "50k": [5, 45], "514": 20, "51468": 32, "515": [92, 131], "516": [92, 131], "52": [9, 46, 63], "525": [117, 126], "52623": 32, "53": 6, "530": [117, 126], "531": [8, 46, 63, 117, 126], "536": [46, 63], "539": [67, 117, 126, 131], "54": 71, "545": [117, 126], "546": [19, 65, 131], "547": [117, 126], "55": [41, 42], "550": [67, 131], "55095317": 55, "551": [19, 65, 131], "554": [117, 126], "557": [117, 126], "56": 23, "57": [50, 53, 54], "576": [117, 126], "578": [117, 126], "58": [6, 32], "581079": 5, "584": 9, "592": [5, 11, 114], "593": 9, "596": [117, 127], "599": [117, 127], "6": [10, 11, 13, 17, 19, 20, 21, 25, 28, 31, 32, 34, 41, 43, 46, 48, 50, 53, 54, 60, 61, 63, 65, 66, 87, 88, 90, 99, 100, 104, 114, 115, 118, 131], "60": [9, 71], "606": [36, 37, 114], "609": 45, "61": 71, "617": [46, 63, 117, 127], "620": [46, 63, 117, 127], "621": [117, 127], "628": 45, "63": 131, "636": [117, 127], "636027": 5, "637": [117, 127], "638835": 5, "64": [44, 46, 63, 71, 115], "643": [117, 127], "644": [117, 127], "649": [117, 127], "65": [46, 63], "650": [32, 34, 114], "65284": 32, "656": [117, 127], "66": [71, 77, 78, 131], "67": [9, 55, 71], "673": [117, 127], "675": [117, 128], "68": [9, 20], "680": [9, 11, 114], "681": [117, 127], "687": [117, 128], "69": 6, "698": 45, "7": [2, 13, 28, 31, 32, 33, 36, 41, 42, 46, 50, 52, 53, 54, 56, 63, 65, 75, 125, 127], "70": [6, 71], "702": 19, "709": 19, "71": [6, 20], "710": [117, 128], "711": [117, 128], "718": [117, 128], "719": [117, 128], "72": [9, 20, 46, 63], "720": [117, 128], "721": [117, 128], "724": 45, "727": 45, "72700509": 55, "728": [46, 63], "73": [20, 23], "732": 45, "738": [20, 21, 114], "74": [6, 20, 23, 46, 63], "746": 19, "7490765234433554": 31, "75": [6, 7, 16, 20, 55, 71, 78], "751": [46, 63], "753": 19, "754": [117, 129], "757": 19, "759": [2, 3, 43, 114], "76": 9, "763": 21, "769": [100, 117, 129, 131], "77": [48, 71], "770": [117, 129], "772": [7, 11, 46, 63, 100, 114, 131], "7783820070908942": 31, "78": 9, "780": [46, 63, 117, 129], "78526195": 55, "79": [6, 9], "790": [117, 129], "796": [117, 129], "797": [46, 63], "798870": 5, "8": [2, 6, 11, 13, 20, 21, 28, 31, 32, 40, 41, 42, 44, 46, 47, 48, 50, 52, 53, 54, 55, 56, 63, 65, 71, 73, 75, 82, 84, 114, 115, 121], "80": [9, 71], "800": 81, "800589": 5, "801": [81, 117, 129], "802": [117, 129], "80498923": 55, "808": [117, 129], "808246": 5, "809813": 5, "81": 6, "812507": 5, "815": [117, 129], "816": [117, 129], "817732": 5, "817792": 5, "818997": 5, "82": [7, 9, 71], "822": [46, 63], "83": [6, 9, 20], "832": 65, "835543": 5, "84": [6, 9, 23], "844": 65, "849": [72, 131], "85": [7, 9, 46, 55, 63, 65], "851": [72, 131], "853202": 5, "858": [117, 120], "86": [9, 20, 23], "864": [117, 129], "866": 72, "87": [9, 20, 23, 56, 71, 87], "875": 36, "878": [80, 131], "8790828729585258": 31, "88": [6, 9, 23], "880": [28, 29, 114], "881": [8, 11, 61, 114], "884": 24, "887": [80, 90, 93, 99, 117, 120, 131], "888": 96, "89": [6, 9, 23], "897": 100, "8977": 19, "898": [46, 63], "9": [8, 16, 19, 20, 23, 24, 28, 29, 33, 37, 40, 41, 42, 46, 50, 52, 53, 54, 55, 60, 61, 62, 63, 65, 66, 67, 68, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 114, 120, 128], "90": [7, 9, 33, 46, 63, 71], "900": [61, 62, 65, 67, 79, 80, 82, 83, 85, 86, 87, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100], "903": [31, 34, 114], "904": 79, "91": [7, 9], "92": [6, 7, 9, 82, 131], "922": 114, "93": [9, 23, 46, 63, 87], "937": [46, 63], "94": [9, 31, 44, 48, 55, 56, 115], "940": 24, "946": [117, 120], "947": [117, 120], "948842857719016": 31, "949": [117, 120], "95": [2, 6, 8, 9, 46, 94, 131], "953": [117, 120], "955": [117, 120], "95889757": 55, "959": [117, 120], "96": [9, 52, 75, 87], "964": [117, 120], "964290": 5, "967755": 5, "968": 5, "97": [9, 52, 97, 131], "971219": 5, "971297": 5, "977": 34, "98": [9, 23, 31, 40, 87], "988": 45, "989": [117, 121], "99": [9, 36, 87], "992": [46, 63], "994": [46, 63], "999": [117, 121], "A": [0, 9, 31, 32, 38, 46, 48, 49, 55, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 115, 116, 117, 121, 123, 131], "And": 115, "As": [5, 9, 45, 47, 51, 56, 115, 117, 125], "Be": [24, 50, 52, 56, 66], "But": 115, "By": [7, 31, 60, 63, 65, 66, 69, 70, 77, 81, 87, 88, 89, 91, 95, 96, 115, 117, 119, 123, 124, 125], "For": [2, 19, 45, 47, 51, 55, 56, 66, 68, 72, 77, 79, 80, 81, 83, 84, 85, 86, 87, 97, 102, 117, 120], "If": [0, 42, 47, 50, 56, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 115], "In": [5, 8, 10, 13, 18, 19, 20, 26, 28, 33, 41, 42, 44, 45, 47, 48, 52, 55, 56, 62, 65, 66, 67, 68, 79, 92, 93, 95, 97, 100, 115, 117, 118, 125, 127, 131], "It": [2, 7, 9, 16, 20, 31, 40, 46, 47, 56, 65, 66, 68, 82, 84, 90, 93, 102, 115, 117, 120, 124, 127, 129], "No": 72, "On": [47, 56, 74, 131], "One": [56, 85, 116, 117, 119], "Or": 115, "Such": 45, "That": 66, "The": [0, 2, 5, 7, 8, 10, 13, 19, 20, 24, 26, 28, 31, 33, 39, 40, 44, 45, 46, 48, 49, 50, 51, 52, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 109, 110, 111, 112, 113, 115, 117, 120, 121, 124, 125, 126, 127, 128, 129, 131], "Then": [5, 41, 55, 56, 115], "There": [68, 117, 125], "These": [19, 47, 56, 101, 104, 115], "To": [5, 9, 45, 47, 49, 51, 55, 72, 115], "With": [2, 5, 40, 41, 51], "_": [2, 7, 13, 20, 33, 41, 42], "__": [60, 61, 62, 65, 66, 67, 68, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "__class__": [8, 13, 31, 40], "__doc__": [2, 5, 6, 7, 8, 9, 10, 13, 16, 19, 20, 23, 24, 28, 31, 32, 33, 36, 40, 41, 42, 117, 120], "__init__": [117, 124], "__name__": [8, 13, 31, 40], "__version__": 10, "_base": [117, 127], "_bin": 10, "_calc_": 10, "_cat": 10, "_check_target": [117, 127], "_classif": [117, 127], "_forest": [117, 127], "_nearmiss": 40, "_parallel_build_tre": [117, 127], "_prf_divid": [117, 127], "_prototype_select": 40, "_safe_index": [117, 127], "_set_random_st": [117, 127], "_show_vers": [117, 126], "_test": [117, 127], "_weight_boost": 20, "aaai": [19, 65, 131], "ab": 81, "abalon": [46, 63], "abalone_19": [46, 63], "abil": [16, 76, 77, 78], "abl": [117, 124], "abnorm": [117, 123], "about": [5, 45, 49], "abov": [42, 47, 63], "absolut": 116, "accept": [47, 51, 55, 65, 67, 87, 115, 117, 120, 121, 123, 124, 127, 128], "accept_spars": 60, "access": [47, 87, 117, 121, 126], "account": [5, 24, 32, 72, 76, 77, 78, 117, 121, 122, 127], "accuraci": [5, 7, 10, 20, 24, 36, 45, 52, 55, 65, 66, 67, 68, 69, 70, 71, 72, 74, 87], "accuracy_scor": [72, 76, 77, 78], "achiev": [20, 48, 67, 68], "acm": [61, 75, 131], "acquir": 5, "across": [51, 66, 117, 129], "act": 71, "action": 49, "activ": [10, 50, 55, 69, 70, 117, 126, 128], "actual": [20, 47], "ad": [31, 33, 44, 47, 55, 60, 61, 62, 63, 65, 66, 67, 68, 69, 71, 73, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 115, 117, 123, 124, 125, 129], "ada": 79, "adaboost": [20, 48, 65, 66, 67, 68, 117, 125], "adaboostclassifi": [20, 48, 67], "adam": 10, "adapt": [56, 79, 117, 119, 124, 131], "adasyn": [8, 80, 81, 82, 83, 84, 85, 86, 105, 116, 117, 119, 120, 123, 125, 127, 131], "add": [10, 33, 47, 52, 55, 65, 66, 67, 69, 70, 81, 115, 117, 120, 123, 124, 125, 126, 127, 129], "add_artist": [32, 33], "add_ind": 5, "addit": [0, 20, 23, 24, 47, 48, 55, 56, 64, 65, 101, 102, 116, 117, 123, 125, 127], "addition": 40, "additional_neighbor": 101, "address": [72, 97, 131], "adequ": [28, 82], "adher": 104, "adjust": [51, 66], "adult": [5, 45, 56, 115], "advanc": [80, 117, 128], "advantag": [48, 87, 88, 117, 127], "advis": 50, "affect": [5, 7, 20, 115], "after": [2, 13, 31, 40, 44, 61, 62, 64, 65, 66, 67, 68, 79, 80, 81, 82, 83, 84, 85, 86, 87, 91, 94, 95, 96, 98, 102, 115, 117, 127], "against": 56, "aggreg": 8, "agre": [40, 96], "ahead": [56, 69, 70, 89], "aim": 28, "alberto": [74, 131], "aleksandr": [117, 123], "alexand": [117, 126], "algorithm": [13, 19, 20, 31, 40, 46, 48, 50, 51, 56, 61, 62, 64, 65, 66, 67, 68, 69, 70, 79, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 101, 105, 115, 117, 118, 125], "alia": [65, 66, 67, 68, 87, 117, 125], "aliaksei": [117, 123], "all": [5, 8, 9, 20, 26, 40, 42, 45, 46, 47, 48, 50, 55, 56, 60, 61, 62, 63, 65, 66, 67, 68, 75, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 114, 116, 117, 120, 122, 124, 125, 127], "allevi": [5, 20, 45, 68, 72, 131], "allknn": [40, 92, 93, 99, 105, 115, 117, 123, 125], "allow": [5, 6, 9, 10, 13, 20, 31, 33, 41, 42, 46, 47, 48, 52, 55, 56, 60, 65, 66, 67, 68, 87, 90, 104, 115, 117, 120, 121, 122, 125, 126, 127], "allow_minor": [40, 90], "almost": [9, 115], "alpha": [13, 24, 28, 31, 32, 33, 40, 41, 42, 52, 71, 74], "alpha_": [2, 61, 62, 65, 66, 67, 68, 79, 80, 81, 82, 83, 84, 85, 86, 91, 94, 95, 98, 102], "alreadi": [5, 31, 66], "also": [9, 40, 44, 45, 46, 49, 50, 52, 56, 60, 66, 67, 68, 71, 82, 87, 115, 117, 125, 127, 129], "alt": 9, "alter": [72, 76, 77, 78, 115], "altern": [18, 19, 26, 47, 66, 68], "although": 9, "alwai": [5, 47, 96, 115], "am": 47, "among": [52, 56], "amri": 131, "an": [4, 6, 8, 10, 11, 13, 15, 17, 18, 26, 28, 31, 36, 40, 46, 47, 49, 50, 52, 55, 56, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 114, 115, 117, 118, 120, 122, 124, 125, 126, 127, 129, 131], "ana": 131, "analysi": [19, 65, 94, 131], "andi": [66, 131], "andrea": [117, 129], "ani": [5, 13, 18, 24, 26, 31, 44, 45, 47, 52, 55, 56, 60, 66, 74, 79, 80, 81, 83, 84, 85, 86, 87, 93, 99, 115, 117, 121, 129], "annot": [32, 62, 131], "anoth": [5, 20, 47, 48, 63, 87], "anymor": [33, 56], "apart": [47, 56, 85], "api": [0, 3, 48, 49, 50, 55, 104, 114, 116, 126], "appear": [65, 67], "append": [5, 8, 10, 45, 47, 81], "appl": [52, 56], "appli": [5, 9, 13, 44, 45, 56, 65, 66, 67, 68, 80, 81, 82, 83, 84, 85, 86, 87, 90, 92, 96, 115, 117, 125, 126], "applic": [11, 47, 52, 63, 72, 76, 77, 78, 114, 131], "apply_gradi": 55, "appreci": 0, "approach": [5, 31, 56, 68, 79, 95, 117, 119, 131], "appropri": 47, "april": 67, "ar": [2, 5, 7, 8, 9, 12, 13, 18, 19, 20, 24, 26, 30, 31, 33, 40, 41, 42, 44, 45, 46, 47, 48, 52, 55, 56, 60, 61, 62, 63, 65, 66, 67, 68, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 115, 117, 122, 125, 126, 127, 128], "arai": 51, "arang": [13, 31, 40, 41, 55], "arbitrari": [16, 60, 115], "area": 56, "arg": [10, 60], "argmax": [28, 55], "argument": [47, 60, 64, 87, 88, 102, 104, 117, 122, 124, 125, 128], "arida": [0, 8, 16, 28, 36, 117, 119, 123, 124, 125, 126, 127, 128], "ariel": [117, 126], "around": 115, "arrai": [8, 31, 32, 42, 47, 51, 52, 55, 56, 60, 61, 62, 64, 65, 66, 67, 68, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 115, 117, 121, 123, 125, 127], "arrhythmia": [46, 63], "art": 71, "articl": 0, "artifici": [80, 83, 84, 85, 86, 131], "arxiv": [81, 131], "as_fram": [2, 5, 45, 46, 56, 115], "asa": [19, 65, 131], "asid": 45, "assembl": 87, "assert_allclos": [117, 127], "assert_array_equ": [117, 127], "assess": [82, 131], "assign": [117, 123], "associ": [24, 55, 56, 66, 69, 70, 89, 101], "astyp": [8, 10, 31, 55, 56], "asymptot": [93, 131], "atheism": 9, "attempt": [115, 117, 121], "attend": [31, 40], "attribut": [47, 55, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 117, 121, 125], "auc": [8, 10], "augment": 56, "august": 0, "aur\u00e9lien": [117, 129], "author": [0, 2, 5, 6, 7, 8, 9, 10, 13, 16, 19, 20, 23, 24, 28, 31, 32, 33, 36, 40, 41, 42], "auto": [10, 42, 48, 60, 61, 62, 65, 66, 67, 68, 75, 79, 80, 81, 82, 83, 84, 85, 86, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 115, 117, 121], "auto_exampl": [3, 11, 14, 17, 21, 25, 29, 34, 37, 38, 43], "auto_examples_jupyt": 26, "auto_examples_python": 26, "autom": [62, 131], "automat": [66, 74, 85, 88, 117, 120, 121, 124], "autopct": 2, "avail": [13, 31, 40, 45, 46, 47, 51, 52, 55, 56, 61, 62, 63, 65, 66, 67, 68, 79, 80, 81, 82, 83, 84, 85, 86, 87, 91, 94, 95, 98, 102, 117, 125], "averag": [40, 41, 65, 67, 72, 73, 74, 76, 77, 78, 95, 115, 116, 117, 129], "avg": [6, 7, 9, 23, 36, 41, 52, 71, 87], "avoid": [10, 45, 51, 75, 76, 77, 78, 117, 123, 125], "awar": [24, 50, 52, 56, 66], "ax": [2, 8, 10, 13, 16, 20, 28, 31, 32, 33, 40, 41, 42], "ax_": 20, "axi": [8, 10, 28, 41, 55, 115], "ayy7": [117, 121], "b": [8, 31, 46, 47, 56, 62, 63, 67, 84, 131], "bacao": [81, 131], "baccianella": 131, "back": 47, "background": 49, "backport": 47, "backward": [117, 125], "bad": [117, 127], "bag": [5, 18, 21, 26, 60, 65, 66, 67, 68, 82, 83, 87, 98, 105, 114, 116, 117, 125, 129, 131], "bag_clf": 5, "baggingclassifi": [19, 20, 48], "bai": [79, 131], "bal_acc": 55, "balanc": [4, 6, 11, 16, 18, 20, 23, 24, 26, 27, 30, 40, 45, 46, 51, 52, 55, 61, 62, 65, 66, 67, 68, 69, 70, 71, 72, 74, 81, 89, 96, 112, 114, 115, 116, 117, 123, 125, 131], "balancecascad": [117, 119, 123, 124, 125, 127], "balanced_accuraci": [5, 19, 45, 55], "balanced_accuracy_scor": [20, 45, 48, 52], "balanced_bag": 20, "balanced_batch_gener": [55, 105], "balanced_subsampl": 66, "balancedbaggingclassifi": [5, 19, 20, 48, 66, 67, 68, 105, 117, 120, 128, 129], "balancedbatchgener": [10, 55, 105], "balancedrandomforestclassifi": [5, 20, 48, 65, 67, 68, 105, 117, 121, 122, 125, 127, 128], "barandela": [72, 131], "barh": 8, "base": [5, 51, 65, 66, 67, 68, 71, 74, 75, 79, 81, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 115, 117, 123, 124, 129, 131], "base_estim": [68, 117, 120], "base_estimator_": [65, 67], "base_sampler_": [66, 68], "basebinaryclasssampl": [117, 123], "baselin": [20, 45], "basemulticlasssampl": [117, 123], "basesampl": 102, "basi": [65, 72], "basic": [56, 105], "batch": [4, 11, 26, 55, 69, 70, 89, 105, 114, 117, 125, 126], "batch_siz": [10, 55, 69, 70, 89], "batchnorm": [10, 117, 126], "batista": [61, 62, 131], "bay": 9, "bazzan": [62, 131], "bbc": [48, 65], "bbm03": [44, 131], "bc": 48, "bdist_wheel": 47, "becaus": 45, "becom": [68, 90, 99, 115, 117, 123], "been": [0, 13, 19, 23, 24, 44, 48, 63, 71, 115, 117, 120, 123, 124, 125, 127], "befor": [5, 7, 20, 31, 36, 45, 48, 50, 51, 56, 64, 65, 74, 80, 81, 82, 83, 84, 85, 86, 87, 88, 117, 125, 126], "begin": [69, 90], "behav": 46, "behavior": [47, 56, 61, 117, 125, 131], "behaviour": [46, 52, 87, 115], "being": [51, 56, 66, 77, 94, 99, 102, 115, 117, 121], "belong": [8, 56, 100, 115], "below": [31, 44, 56, 63, 87, 115], "benchmark": [4, 11, 26, 50, 54, 60, 63, 79, 82, 83, 87, 88, 114, 116, 117, 124], "benefici": 13, "benefit": 20, "berkelei": [65, 66, 131], "berlin": 96, "best": [5, 66, 72, 73, 76, 78], "better": [5, 8, 9, 81, 115, 117, 127], "between": [8, 19, 31, 32, 33, 40, 44, 47, 52, 56, 66, 68, 72, 75, 76, 77, 78, 115, 117, 123, 129], "bganglia": [117, 128], "bhandari": [117, 120], "bia": [4, 11, 26, 45, 64, 65, 66, 87, 88, 98, 114, 117, 126], "bias": [5, 31], "bill": 8, "bill_clinton_id": 8, "binar": 46, "binari": [6, 8, 19, 47, 49, 56, 61, 62, 65, 66, 67, 68, 72, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 91, 94, 95, 98, 102, 103, 117, 123, 125], "binary_crossentropi": 10, "binary_i": 2, "binary_mask": 2, "binary_x": 2, "bincount": 66, "bing": [80, 131], "binomi": 19, "bioinformat": 63, "black": [50, 54], "blob": [7, 81], "blog": 50, "blue": [52, 56, 75], "bool": [60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 103, 104, 117, 121], "boolean": [56, 100], "boost": [5, 19, 65, 66, 67, 68, 105, 116, 117, 125, 131], "bootstrap": [5, 19, 20, 31, 33, 48, 56, 65, 66, 67, 68, 82, 115, 117, 121, 125, 129], "bootstrap_featur": 65, "border": [31, 56], "borderlin": [31, 56, 79, 80, 81, 82, 83, 84, 85, 86, 117, 119, 125, 131], "borderlinesmot": [31, 56, 79, 81, 82, 83, 84, 85, 86, 105, 117, 120, 122, 125, 126, 127], "both": [2, 5, 42, 45, 46, 47, 56, 79, 80, 81, 83, 84, 85, 86, 102, 115, 117, 125], "bottom": 52, "boundari": [31, 93, 115], "bowyer": [80, 83, 84, 85, 86, 131], "boxplot": 10, "bpm04": [44, 131], "branch": 47, "break": [87, 117, 125], "breiman": [65, 66, 131], "brf": [20, 48], "bring": [5, 117, 125], "brought": [66, 68], "bsanchezgr03": [52, 131], "bsmote": [117, 119], "bu": [117, 120], "bug": 116, "build": [8, 45, 48, 50, 54, 65, 66, 67, 68, 71, 92, 97, 110, 117, 124], "built": 68, "bump": 47, "bumpvers": [47, 117, 123], "bunch": [63, 87, 117, 127], "bush": 8, "bypass": 60, "c": [10, 13, 16, 31, 33, 40, 50, 52, 56, 61, 65, 68, 75, 84, 96, 115, 131], "c_": [13, 31, 40], "cach": [63, 87, 88], "calcul": [68, 72, 76, 77, 78], "california": [65, 66, 131], "call": [7, 24, 36, 47, 48, 50, 52, 55, 60, 65, 66, 67, 69, 81, 87, 117, 129], "callabl": [60, 61, 62, 64, 65, 66, 67, 68, 74, 79, 80, 81, 82, 83, 84, 85, 86, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 104, 117, 124], "callback_histori": [55, 69, 70], "can": [2, 5, 7, 8, 9, 10, 13, 19, 20, 22, 24, 26, 28, 30, 31, 33, 36, 39, 40, 41, 42, 44, 45, 46, 47, 48, 50, 51, 52, 55, 56, 60, 65, 66, 67, 68, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 101, 102, 115, 117, 118, 124, 125, 127], "cannot": [13, 40, 74, 87, 88, 115], "car_eval_34": [46, 63], "car_eval_4": [46, 63], "cardin": [66, 68], "care": 66, "carolina": 131, "carri": [66, 115], "carrier": [94, 131], "cart": 28, "case": [2, 6, 28, 31, 33, 41, 45, 56, 60, 61, 62, 65, 66, 67, 68, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 115, 117, 122, 123, 125, 131], "cast": 55, "cat": 77, "cat_pip": 5, "catch": [117, 125], "categor": [5, 10, 26, 31, 39, 52, 56, 75, 79, 80, 81, 82, 83, 84, 85, 86, 115, 117, 121, 125, 128, 129], "categori": [5, 9, 10, 31, 47, 52, 56, 75, 104, 117, 121], "categorical_column": 10, "categorical_crossentropi": [55, 69, 70], "categorical_encod": [84, 85, 117, 121], "categorical_encoder_": [84, 85, 117, 121], "categorical_featur": [31, 56, 85, 117, 121], "categorical_features_": 85, "categorical_pipelin": 10, "categorical_preprocess": 10, "categoricaldtyp": [56, 85], "categories_": 75, "categoris": 104, "caveat": 115, "cbhk02": [56, 131], "cc": [91, 115], "ccp_alpha": [66, 117, 127], "cd": 50, "ceil": 66, "cell": 8, "censu": 45, "center": [7, 81], "centroid": [40, 91, 115, 117, 119], "certain": 87, "cf": 56, "chain": [87, 110], "chang": [0, 10, 40, 47, 48, 56, 65, 66, 67, 68, 87, 104, 121, 125, 129], "chao": [65, 66, 131], "chapter": 131, "characterist": [13, 63], "charg": 19, "chawla": [80, 83, 84, 85, 86, 131], "check": [8, 20, 45, 47, 49, 55, 60, 61, 62, 65, 66, 67, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 115, 117, 118, 122, 124, 127], "check_estim": [104, 117, 124], "check_estimators_fit_returns_self": 104, "check_fit": 118, "check_is_fit": 118, "check_nam": 104, "check_neighbors_object": [47, 105], "check_ratio": [117, 124, 127], "check_sampling_strategi": [47, 105], "check_target_typ": [47, 105], "checkout": 47, "chen": [65, 66, 131], "cherri": 47, "child": 66, "choic": [19, 31, 55, 56, 61, 62, 65, 66, 67, 68, 79, 80, 81, 82, 83, 84, 85, 86, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102], "choos": 51, "chosen": 66, "chri": 131, "christo": [0, 8, 16, 28, 36, 117, 119, 123, 124, 125, 126, 127, 128], "christoph": [94, 131], "ci": 96, "circl": [32, 56], "circleci": [20, 40], "citat": 0, "class": [2, 5, 6, 7, 8, 13, 16, 19, 20, 28, 31, 32, 33, 36, 40, 41, 42, 44, 45, 46, 47, 48, 49, 51, 52, 55, 60, 61, 62, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 104, 115, 116, 117, 120, 121, 122, 123, 124, 125, 127, 129, 131], "class_count": 19, "class_dict": [69, 70], "class_distribut": 8, "class_label": 66, "class_legend": 33, "class_sep": [13, 19, 23, 24, 28, 31, 36, 40, 44, 48, 55, 56, 60, 61, 62, 65, 67, 79, 80, 82, 83, 85, 86, 87, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 115], "class_typ": 100, "class_weight": 66, "classes_": [8, 47, 65, 66, 67, 68, 87], "classes_count": 5, "classes_nam": 8, "classes_to_clean_": 96, "classic": 66, "classif": [4, 5, 8, 11, 19, 22, 25, 26, 31, 33, 49, 56, 61, 62, 64, 65, 66, 67, 68, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 94, 95, 98, 102, 105, 114, 116, 117, 125, 129, 131], "classifi": [6, 7, 8, 9, 13, 18, 21, 23, 24, 26, 28, 31, 36, 40, 45, 51, 52, 56, 60, 63, 65, 66, 67, 68, 71, 72, 73, 76, 77, 78, 82, 83, 86, 87, 94, 95, 98, 114, 115, 116, 117, 125, 128], "classification_report": [7, 36, 87], "classification_report_imbalanc": [6, 9, 23, 52, 105, 117, 121, 125, 129], "clb": [48, 131], "clean": [2, 7, 12, 13, 26, 39, 40, 42, 44, 61, 62, 93, 96, 102, 116, 117, 119, 125], "cleaner": 44, "clearer": [117, 124], "clf": [7, 13, 31, 40, 56, 66, 68], "clf_adasyn": 56, "clf_smote": 56, "click": 47, "clinton": 8, "clip_by_valu": 55, "clone": [47, 50, 87, 88, 101, 117, 125], "close": [45, 93, 100], "closer": [52, 68], "closest": [90, 93, 99, 115], "cluster": [31, 40, 56, 64, 80, 81, 82, 83, 84, 85, 86, 91, 115, 117, 119, 126, 128], "cluster_balance_threshold": 81, "cluster_balance_threshold_": 81, "cluster_centers_": 91, "cluster_std": 7, "clustercentroid": [40, 105, 115, 117, 127, 128, 129], "cm": 55, "cnn": [92, 100, 115, 131], "code": [2, 5, 6, 7, 8, 9, 10, 13, 16, 19, 20, 23, 24, 26, 28, 31, 32, 33, 36, 40, 41, 42, 50, 115], "coef": 55, "cohen": 28, "cohen_kappa_scor": 28, "coil": [46, 63], "coil_2000": [46, 63], "collect": [2, 6, 9, 10, 13, 16, 19, 31, 33, 44, 45, 46, 56, 60, 61, 62, 63, 64, 65, 66, 67, 68, 79, 80, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 115], "color": [8, 41, 52, 56], "colorbar": [16, 20], "colormap": 16, "column": [5, 10, 16, 31, 52, 56, 65, 66, 67, 77, 85, 117, 122, 127], "columntransform": 10, "com": [2, 5, 6, 7, 8, 9, 10, 13, 16, 19, 20, 23, 24, 28, 31, 32, 33, 36, 40, 41, 42, 50], "combin": [9, 14, 24, 36, 59, 83, 87, 88, 105, 114, 116, 117, 123, 124], "come": [45, 50, 90], "command": [50, 117, 126], "commit": [47, 50], "common": [56, 116, 117, 128], "commun": [75, 131], "comp": 9, "compar": [5, 10, 12, 14, 18, 21, 26, 30, 34, 39, 43, 44, 48, 52, 56, 60, 61, 62, 63, 65, 66, 67, 68, 72, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 114, 115], "comparison": [8, 20, 31, 40], "compat": [0, 65, 67, 72, 79, 80, 81, 83, 84, 85, 86, 91, 103, 104, 105, 125, 129], "compil": [10, 22, 25, 26, 55, 69, 70, 71, 83, 87, 88, 114], "complement": [45, 46], "complet": [50, 87, 88], "complex": [66, 94, 131], "compon": [60, 61, 62, 65, 66, 67, 68, 72, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "compos": [5, 10, 31, 52], "composit": 110, "compress": 51, "comput": [5, 8, 19, 41, 52, 56, 65, 66, 67, 68, 72, 73, 74, 75, 76, 77, 78, 79, 80, 92, 95, 96, 97, 107, 115, 117, 122, 127, 129, 131], "concaten": 81, "concept": 49, "concern": [15, 26], "conda": [47, 54, 117, 124], "condens": [90, 91, 92, 93, 99, 100, 116, 131], "condensedneareastneigbour": [117, 123], "condensednearestneighbour": [40, 90, 91, 93, 99, 100, 105, 115, 117, 122, 125], "condensend": [117, 119], "condit": [52, 75], "confer": [79, 131], "configur": [41, 87], "conform": [47, 103], "confusion_matrix": [55, 65, 67], "confusionmatrixdisplai": 20, "congress": [79, 131], "conjunct": [8, 19], "connect": [5, 56], "consequ": 56, "conserv": [69, 70, 89, 90, 93, 96, 99, 115], "consid": [8, 31, 40, 52, 56, 66, 80, 92, 93, 95, 96, 97, 99, 115, 117, 125], "consist": [47, 66, 101, 102, 117, 124, 128], "consolid": [117, 125], "constant": 5, "constraint": [66, 117, 122], "construct": [48, 60, 65, 66, 88], "constructor": [87, 88], "consum": [87, 88], "contain": [2, 8, 31, 47, 49, 52, 56, 60, 61, 62, 63, 64, 65, 66, 67, 68, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 112, 115, 117, 122, 125, 129], "contamin": 7, "context": [61, 62, 65, 66, 67, 81, 90, 92, 93, 94, 95, 96, 97, 99, 100, 117, 129], "continu": [5, 31, 50, 56, 79, 80, 81, 82, 83, 84, 85, 86, 117, 122, 125], "continuous_features_": 85, "contourf": [13, 31, 40], "contract": 87, "contrari": [10, 56], "contrast": 115, "contrib": 50, "contribut": [49, 68, 117, 126], "control": [40, 48, 55, 56, 61, 62, 65, 66, 67, 68, 69, 70, 79, 80, 81, 82, 83, 84, 85, 86, 89, 91, 92, 94, 97, 98, 116, 117, 129], "convent": 104, "converg": 68, "convers": [117, 121], "convert": [16, 51, 66, 68, 75, 102, 117, 126], "convert_float64": 10, "coo": [68, 117, 126], "cooper": [86, 131], "coordin": 91, "copi": [50, 51], "copybutton": [50, 54], "core": [61, 62, 65, 66, 67, 81, 90, 92, 93, 94, 95, 96, 97, 99, 100], "correct": [9, 45, 71, 72, 73, 74, 76, 77, 78, 115, 117, 123, 126], "correctli": [47, 65, 66, 67, 68, 94, 115, 117, 122], "correl": 52, "corresp": 131, "correspond": [2, 24, 41, 42, 45, 46, 47, 56, 60, 61, 62, 64, 65, 66, 67, 68, 79, 80, 81, 82, 83, 84, 85, 86, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102], "cost": [5, 9, 66], "could": [5, 9, 79, 80, 81, 83, 84, 85, 86, 115, 117, 122, 126, 129], "count": [5, 31, 72, 75, 76, 77, 78, 84], "counter": [2, 6, 9, 10, 13, 16, 19, 20, 31, 33, 44, 45, 46, 56, 60, 61, 62, 64, 65, 67, 79, 80, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 115], "counterpart": 20, "coupl": [13, 19, 52], "cov": [50, 54], "covari": 82, "cpu": [61, 62, 65, 66, 67, 81, 90, 92, 93, 94, 95, 96, 97, 99, 100], "craig": [75, 131], "creat": [5, 6, 8, 13, 15, 17, 18, 19, 24, 26, 31, 32, 33, 36, 40, 46, 47, 52, 55, 56, 60, 64, 65, 66, 67, 69, 70, 80, 83, 84, 85, 86, 88, 89, 91, 93, 95, 96, 101, 114, 117, 123, 124, 125], "create_dataset": [31, 40], "creation": [117, 123, 124], "criteria": [66, 117, 123], "criterion": [5, 66, 68, 117, 123], "cross": [5, 8, 10, 28, 45, 61, 62, 65, 66, 67, 81, 87, 90, 92, 93, 94, 95, 96, 97, 99, 100, 115], "cross_entropi": 55, "cross_val_predict": [117, 127], "cross_valid": [5, 19, 45, 117, 123], "cruso": [117, 122], "csc": 68, "csc_matrix": [51, 66], "csr": [51, 66, 68, 117, 124], "csr_matrix": [51, 66], "csv": 10, "cuda_visible_devic": 10, "cuml": [117, 120], "cup": [46, 63], "current": [5, 7, 47, 50, 52, 56, 66, 96, 103, 117, 125], "curs": [0, 72, 97, 131], "curv": [8, 26, 27, 29, 83, 87, 88, 114], "custom": [4, 11, 26, 60, 87, 88, 114, 116, 117, 121], "cv": [8, 28, 94, 115], "cv_model": 45, "cv_result": [5, 19, 45], "cv_results_balanc": 10, "cv_results_imbalanc": 10, "cv_time_balanc": 10, "cv_time_imbalanc": 10, "cybernet": [67, 68, 90, 99, 100, 131], "cybernetr": 93, "cycl": [117, 123, 127], "cython": [50, 54], "d": [8, 19, 65, 93, 94, 115, 131], "danger": [56, 80, 86], "dash": 41, "data": [2, 5, 6, 8, 13, 19, 20, 23, 24, 26, 30, 32, 36, 40, 41, 42, 46, 48, 55, 56, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 116, 117, 121, 125, 126, 129, 131], "data_hom": 63, "data_id": 45, "data_resampl": 51, "databas": 65, "datafram": [5, 10, 16, 46, 51, 52, 56, 60, 61, 62, 64, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 115, 117, 122, 127], "datapoint": 66, "dataset": [0, 6, 7, 9, 11, 17, 22, 23, 24, 28, 31, 33, 36, 40, 42, 44, 45, 48, 51, 55, 56, 60, 61, 62, 65, 66, 67, 68, 69, 70, 71, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 105, 106, 111, 112, 114, 115, 116, 117, 122, 124, 125, 127, 131], "date": [47, 49, 115], "david": [75, 131], "dayvid": [0, 16, 117, 119, 123], "deal": [16, 31, 49, 52, 56, 74, 106, 111, 131], "dec": [49, 131], "decemb": [117, 118, 119, 120, 127], "decid": [40, 56, 115], "decis": [5, 13, 31, 40, 51, 56, 65, 66, 67, 68, 93, 115, 117, 126], "decision_funct": [36, 65, 67, 68, 87], "decision_path": 66, "decisiontreeclassifi": [20, 28, 48, 65, 66, 68, 117, 126], "decisiontreeregressor": 104, "decomposit": [36, 87], "decor": [10, 41, 47, 74, 104], "decreas": [5, 66], "deduc": 75, "deep": [60, 61, 62, 65, 66, 67, 68, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "def": [2, 7, 10, 13, 16, 19, 31, 40, 41, 42, 46, 47, 55, 60, 104], "default": [31, 47, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 115, 117, 121, 124, 126, 128], "defin": [2, 5, 7, 41, 46, 52, 55, 56, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 115], "definit": [26, 39, 43, 75, 100, 114, 117, 126], "deleg": [45, 117, 121], "delet": 115, "delta": [52, 75], "demonstr": [45, 51], "deni": [117, 125], "denni": 131, "dens": [10, 55, 69, 70, 89, 117, 121, 126], "densifi": [117, 125], "densiti": [31, 56, 81], "density_expon": 81, "depend": [31, 47, 50, 51, 52, 54, 56, 79, 115, 117, 124, 126], "deprec": [20, 68, 96, 104, 116, 123, 126], "deprecate_paramet": 47, "deprecationwarn": 47, "depth": [49, 55, 66, 117, 126], "deriv": [115, 117, 124], "descent": 55, "descr": 63, "describ": [67, 81, 117, 125], "descript": [49, 63], "design": [48, 50, 54, 56, 85, 131], "desir": [2, 19, 48, 61, 62, 64, 65, 66, 67, 68, 79, 80, 81, 82, 83, 84, 85, 86, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 117, 123], "despin": [8, 10, 13, 16, 28, 31, 32, 40, 41, 42], "detail": [1, 26, 49, 61, 62, 65, 66, 67, 80, 81, 83, 84, 85, 86, 87, 90, 92, 93, 94, 95, 96, 97, 99, 100, 107], "detect": [31, 80, 85, 86, 100, 115], "determin": [68, 72, 76, 77, 78, 80, 81, 86, 115], "determinist": [117, 125, 127], "dev": [45, 47, 104, 117, 128], "dev0": [47, 49], "develop": [23, 24, 50, 104, 116], "deviat": [85, 117, 122, 125, 128], "df": [5, 46], "df_adult": [56, 115], "df_re": 5, "df_resampl": [46, 56, 115], "df_result": 10, "df_score": 5, "df_time": 10, "diabet": 92, "diag": 55, "dict": [60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 117, 125], "dictionari": [5, 46, 47, 52, 55, 60, 61, 62, 64, 66, 71, 79, 80, 81, 82, 83, 84, 85, 86, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 104, 117, 124, 125, 129], "differ": [2, 5, 6, 8, 10, 13, 19, 28, 31, 36, 40, 41, 42, 45, 47, 48, 51, 56, 61, 62, 65, 66, 67, 68, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 91, 93, 94, 95, 98, 99, 102, 115, 116, 117, 125, 126, 127, 128, 131], "difficult": [31, 96, 115, 131], "digit": 71, "dimension": 51, "ding": 63, "dinstinct": [117, 124], "direct": [47, 56], "directli": [46, 87, 88, 117, 126], "directori": [87, 88], "dirti": 47, "disabl": 36, "disappear": [99, 115, 117, 123], "discoveri": [65, 82, 131], "discret": 68, "discrimin": 115, "discuss": 115, "disp": [8, 20], "dispatch": 5, "dispers": [33, 56], "displai": [8, 71], "dissert": 63, "dist": [41, 47], "dist_avg": 41, "distanc": [40, 41, 52, 56, 75, 95, 107, 115, 117, 122, 129, 131], "distance_matrix": 75, "distancemetr": 75, "distinct": [31, 56], "distribut": [8, 9, 13, 16, 19, 28, 45, 47, 64, 79, 95, 96, 131], "distutil": [117, 122], "dive": 49, "divers": [5, 19, 65, 131], "diversifi": 63, "divid": [41, 115, 117, 122], "divis": 71, "do": [5, 6, 40, 45, 47, 55, 65, 67, 117, 122], "doc": [20, 47, 50, 54], "docstr": [47, 117, 125], "doctest": [48, 117, 123], "documen": [117, 126], "document": [4, 11, 26, 45, 47, 50, 71, 87, 88, 98, 105, 114, 115, 127], "doe": [13, 19, 45, 48, 56, 66, 68, 72, 76, 77, 78, 88, 115, 117, 125], "dog": 77, "doi": 131, "dok": 68, "domin": 74, "done": [22, 26, 47], "douza": [81, 131], "down": [117, 125], "download": [2, 5, 6, 7, 8, 9, 10, 13, 16, 19, 20, 23, 24, 26, 28, 31, 32, 33, 36, 40, 41, 42, 63], "download_if_miss": 63, "draft": 47, "draw": [19, 32, 65, 66], "drawn": [65, 66, 67, 82], "driven": 46, "driver": 10, "drop": [5, 10], "dropout": 10, "dtype": [5, 7, 8, 19, 31, 52, 55, 56, 66, 75, 84, 85, 115, 117, 125], "dtype_includ": 5, "duck": [117, 120], "dudnik": [117, 125], "due": [5, 9, 31, 33, 45, 115, 117, 122, 127, 128], "dummy_clf": 5, "dummy_sampl": 55, "dummyclassifi": 5, "duplic": 56, "dure": [7, 18, 26, 28, 31, 33, 55, 56, 60, 61, 62, 65, 66, 67, 68, 69, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 115, 117, 123, 125, 127], "dynam": [65, 66, 67], "e": [2, 5, 8, 12, 13, 26, 41, 47, 52, 55, 56, 65, 66, 67, 68, 69, 70, 72, 82, 86, 87, 93, 98, 99, 115, 117, 125, 126], "each": [2, 8, 10, 20, 31, 36, 40, 41, 42, 45, 47, 48, 51, 52, 56, 60, 61, 62, 63, 64, 65, 66, 67, 68, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 104, 115, 117, 122, 125], "eapa": 131, "earli": [68, 90], "earlier": 45, "easi": [20, 56, 115], "easili": [7, 55], "easyensembl": [48, 67, 117, 119, 123, 125, 127], "easyensembleclassifi": [20, 48, 65, 66, 68, 105, 117, 120, 125, 128], "ebb": 19, "ebs09": [52, 131], "ecoli": [46, 63], "ed": [117, 127], "edgar": 131, "edgecolor": [13, 31, 40], "edit": [13, 44, 50, 61, 62, 90, 91, 92, 93, 96, 97, 99, 100, 116, 117, 119, 131], "edited_nearest_neighbour": 96, "edited_nearest_neighbours_": 96, "editednearestneighbor": [117, 123, 125], "editednearestneighbour": [36, 40, 61, 90, 91, 92, 96, 97, 99, 100, 105, 115], "educ": 5, "edwardo": [79, 131], "eec": [20, 48, 67], "effect": [5, 10, 13, 20, 26, 30, 34, 45, 51, 65, 66, 67, 68, 74, 82, 87, 96, 114, 115, 117, 121, 131], "effici": 115, "either": [45, 52, 56, 66, 69, 70, 85, 89, 102, 103, 115], "elaps": [10, 87, 88], "elapsed_tim": 10, "element": [55, 66], "elimin": 7, "elimn": 7, "els": [10, 31, 41], "emb": [117, 123], "embed": [26, 35, 37, 83, 87, 88, 93, 114], "emphas": 45, "empir": [19, 65, 131], "empti": [31, 56], "enabl": [87, 88, 117, 125], "enable_metadata_rout": [65, 66, 67, 68, 87, 88], "encapsul": [60, 61, 62, 65, 66, 67, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "encod": [5, 10, 52, 75, 84, 85, 103, 117, 121, 122, 125, 128], "end": [2, 5, 6, 7, 8, 9, 10, 13, 16, 19, 20, 23, 24, 28, 31, 32, 33, 36, 40, 41, 42, 66, 69, 87], "enforc": 66, "engin": 86, "enn": [12, 26, 36, 61, 90, 92, 93, 96, 99, 115, 117, 119], "enn_": [61, 90, 99], "enough": 5, "ensembl": [5, 7, 19, 21, 45, 63, 72, 105, 114, 116, 117, 119, 123, 124, 125, 126, 127, 128, 129, 131], "ensur": [40, 45, 47, 50, 101, 104, 117, 128], "entir": [45, 50, 87, 115], "entri": [77, 117, 122], "entropi": 66, "enumer": [41, 45], "env": 20, "environ": 10, "epoch": [10, 55, 69, 70, 89], "equal": [2, 9, 52, 61, 62, 65, 66, 67, 68, 73, 75, 79, 80, 81, 82, 83, 84, 85, 86, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102], "equat": 66, "equival": [33, 45, 56, 61, 62, 65, 66, 67, 68, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102], "eric": 131, "error": [2, 61, 62, 65, 66, 67, 68, 79, 80, 81, 82, 83, 84, 85, 86, 87, 91, 94, 95, 98, 101, 102, 116, 117, 118, 122, 124, 125, 128], "estim": [2, 4, 5, 6, 8, 9, 10, 11, 13, 16, 19, 20, 23, 24, 26, 28, 31, 32, 33, 35, 36, 40, 41, 42, 45, 48, 51, 55, 60, 61, 62, 65, 66, 67, 68, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 110, 114, 115, 117, 120, 122, 123, 125, 126], "estimator_": [65, 66, 67, 68, 91, 92, 94, 97, 117, 122], "estimator_check": 104, "estimator_errors_": 68, "estimator_nam": 8, "estimator_weights_": 68, "estimators_": [65, 66, 67, 68, 92, 97, 117, 122], "estimators_features_": [65, 67], "estimators_samples_": [65, 66, 67], "estimm": 87, "esuli": 131, "etc": 115, "euclidean": [56, 117, 122], "europ": 131, "euthyroid": [46, 63], "evalu": [5, 8, 19, 20, 24, 25, 28, 45, 52, 65, 71, 83, 87, 88, 114, 115, 117, 125, 131], "even": [2, 66, 115, 117, 126, 129], "everi": [66, 69, 100], "evolv": 47, "exact": [117, 125], "exactli": 65, "examin": [8, 28, 90, 93, 99, 115], "exampl": [2, 3, 5, 6, 7, 8, 10, 11, 13, 14, 16, 17, 19, 20, 21, 23, 24, 25, 27, 28, 29, 31, 32, 33, 34, 36, 37, 38, 40, 41, 42, 43, 47, 49, 50, 52, 54, 55, 70, 73, 75, 76, 77, 78, 104, 105, 114, 115, 116, 117, 124, 126, 129], "example_funct": 47, "except": [66, 117, 124], "exclud": [40, 72, 76, 77, 78, 90, 93, 96, 99], "execut": [3, 11, 14, 17, 21, 25, 29, 34, 36, 37, 38, 43, 114], "exist": [65, 66, 67, 68, 87, 115], "expand": 66, "expect": [9, 51, 56, 60, 65, 66, 67, 75, 84, 87], "expected_failed_check": 104, "experi": [5, 20, 90, 99, 131], "explain": [47, 117, 122], "explan": 49, "explor": [61, 131], "exploratori": [67, 131], "expon": [52, 75, 81], "expos": [86, 91, 117, 121, 125], "express": [61, 62, 65, 66, 67, 68, 74, 79, 80, 81, 82, 83, 84, 85, 86, 91, 94, 95, 98], "extend": [79, 80, 81, 83, 84, 85, 86, 115, 117, 124], "extens": 56, "extra": [49, 56], "extract": [92, 95, 97, 117, 119, 131], "extrapol": 86, "extras_requir": [117, 129], "f": [5, 6, 8, 9, 10, 13, 16, 19, 20, 24, 31, 32, 40, 41, 45, 46, 52, 55, 60, 63, 64, 72, 75, 76, 77, 78, 84, 85, 87, 131], "f1": [6, 7, 9, 23, 36, 71, 87], "face": [4, 11, 26, 60, 79, 82, 83, 87, 88, 114], "fact": [18, 26, 31, 33, 56, 66, 115], "factor": [26, 30, 34, 71, 74, 82, 114, 117, 124], "factori": 74, "fail": 104, "fall": 45, "fals": [5, 10, 16, 19, 20, 41, 47, 48, 55, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 76, 77, 78, 87, 88, 89, 90, 98, 103, 117, 129], "famili": 2, "farthest": [40, 41, 115], "fashion": [66, 103], "fast": [55, 75, 108, 115], "faster": 68, "favor": [48, 117, 122, 124, 125], "favour": [51, 117, 129], "featur": [5, 10, 16, 31, 33, 45, 52, 56, 60, 61, 62, 65, 66, 67, 68, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 115, 122, 128], "feature_extract": 9, "feature_importances_": [66, 68], "feature_names_in_": [60, 61, 62, 65, 66, 67, 68, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 117, 120], "feature_names_out": [60, 61, 62, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "februari": [117, 124, 127, 129], "fed": 51, "feed": 9, "feedstock": 47, "felix": [81, 131], "fernando": [0, 81, 117, 119, 131], "fetch": [6, 46, 63, 65, 66, 67, 117, 124], "fetch_20newsgroup": 9, "fetch_dataset": [20, 46, 105, 117, 124], "fetch_lfw_peopl": 8, "fetch_openml": [5, 45, 46, 56, 92, 115], "few": 33, "fewer": 68, "field": 52, "fifth": 131, "fig": [2, 8, 13, 16, 20, 28, 31, 33, 40, 41, 42], "fight": [4, 11, 26, 56, 64, 65, 66, 87, 88, 98, 114], "figsiz": [2, 8, 13, 16, 20, 28, 31, 32, 33, 40, 41, 42], "figur": [7, 10, 42, 56, 115], "file": [3, 11, 14, 17, 21, 25, 29, 34, 37, 38, 43, 47, 50, 114, 117, 129], "fill_between": 28, "fill_valu": 5, "filter_data": 63, "final": [5, 36, 47, 66, 87, 88, 90, 115, 117, 126], "find": [5, 19, 47, 50, 56, 72, 76, 77, 78, 81, 90, 92, 93, 95, 96, 97, 99, 115], "finit": [117, 127], "first": [2, 5, 7, 10, 16, 19, 20, 24, 28, 31, 33, 36, 40, 41, 45, 55, 56, 60, 66, 68, 87, 90, 96, 100, 115, 117, 119], "fit": [4, 6, 7, 8, 9, 10, 11, 13, 20, 23, 24, 26, 31, 36, 40, 41, 48, 51, 52, 55, 56, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 114, 115, 117, 118, 121, 127, 129], "fit_gener": [55, 70], "fit_predict": 87, "fit_predict_balanced_model": 10, "fit_predict_imbalanced_model": 10, "fit_resampl": [2, 7, 13, 31, 33, 40, 42, 44, 45, 51, 55, 56, 60, 61, 62, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 115, 117, 125], "fit_sampl": [117, 125], "fit_transform": [10, 52, 75, 87], "fix": [10, 26, 31, 39, 40, 116, 126, 130], "flatnonzero": [8, 19], "flip_i": [23, 24, 28, 36, 60, 61, 62, 65, 67, 79, 80, 82, 83, 85, 86, 87, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100], "float": [33, 61, 62, 65, 66, 67, 68, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 91, 94, 95, 96, 98, 102, 117, 124, 125, 126], "float32": [55, 66], "float64": [10, 19], "fmfn": [117, 119], "fn": [76, 77], "fnlwgt": 5, "focu": [5, 31, 56, 115], "focus": [0, 56], "fold": [10, 45, 94], "fold_id": 45, "folder": [6, 63], "follow": [0, 5, 13, 19, 24, 28, 31, 40, 41, 46, 47, 48, 50, 51, 55, 56, 60, 61, 62, 63, 66, 71, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 115, 117, 119, 120, 121, 125, 126, 127, 128], "fontsiz": [8, 28, 32, 41], "footprint": [65, 66, 67], "forc": [33, 66, 117, 125], "forest": [5, 65, 66, 67, 68, 116, 117, 125, 131], "forg": 47, "form": [42, 60, 61, 62, 65, 66, 67, 68, 75, 79, 80, 81, 82, 83, 84, 85, 86, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104], "format": [28, 66, 71, 87, 117, 122, 126, 127], "former": [44, 115], "formul": [52, 116], "forward": [60, 87], "found": [31, 40, 56, 66, 91], "foundat": [117, 125], "four": 66, "fp": [77, 78], "fpr": 8, "fraction": 66, "framework": 19, "francoi": [117, 123], "frequenc": [5, 66], "frequent": 56, "from": [2, 3, 6, 7, 8, 9, 10, 11, 13, 14, 16, 17, 19, 20, 21, 23, 24, 25, 28, 29, 31, 33, 34, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 51, 52, 55, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 114, 115, 116, 117, 120, 122, 123, 124, 125, 126, 127, 128, 129, 131], "from_estim": 20, "fulfil": 87, "full": [2, 5, 6, 7, 8, 9, 10, 13, 16, 19, 20, 23, 24, 28, 31, 32, 33, 36, 40, 41, 42, 50, 105, 117, 126], "fulli": [0, 55], "func": [7, 10, 19, 55, 60], "funcformatt": 10, "function": [2, 7, 9, 13, 16, 19, 31, 36, 40, 41, 42, 46, 47, 48, 51, 52, 55, 56, 60, 61, 62, 64, 65, 66, 67, 68, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 107, 115, 117, 123, 124, 126, 127, 128, 129, 131], "functionsampl": [8, 19, 31, 40, 55, 105, 117, 127, 129], "functiontransfom": 60, "functiontransform": 10, "functool": 10, "fundament": 115, "further": [48, 107], "futurewarn": [20, 47, 117, 128], "g": [2, 5, 6, 7, 8, 9, 10, 13, 16, 19, 20, 23, 24, 28, 31, 32, 33, 36, 40, 41, 42, 47, 55, 56, 61, 62, 65, 66, 67, 68, 72, 82, 87], "gain": 66, "galleri": [2, 5, 6, 7, 8, 9, 10, 13, 16, 19, 20, 23, 24, 26, 28, 31, 32, 33, 36, 40, 41, 42, 49, 50, 54, 114], "garc": 131, "garca": 131, "garcia": [79, 131], "garciasanchezm12": [52, 131], "garc\u00eda": 74, "garc\u0131a": 72, "gascon": [117, 125], "gaussian": 7, "gaussiannb": 88, "gave": 45, "gbdt": 5, "gca": 10, "gener": [2, 5, 6, 8, 9, 10, 12, 20, 23, 24, 26, 28, 30, 31, 33, 34, 36, 41, 42, 44, 45, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 114, 116, 117, 122, 123, 125, 127, 129], "geo": [6, 9, 23, 71], "geo_mean": 24, "geometr": [20, 24, 71, 72], "geometric_mean": 72, "geometric_mean_scor": [20, 24, 52, 74, 105], "georg": 8, "george_bush_id": 8, "georgia": 63, "georgio": [81, 131], "get": [5, 8, 19, 23, 24, 45, 49, 52, 60, 61, 62, 63, 65, 66, 67, 68, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 115, 117, 121, 124, 126], "get_feature_names_out": [60, 61, 62, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 117, 120], "get_metadata_rout": [60, 61, 62, 65, 66, 67, 68, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 118], "get_n_split": 8, "get_param": [60, 61, 62, 65, 66, 67, 68, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "getattr": 10, "geurt": 65, "gini": [66, 68], "giovanna": 131, "giraud": [94, 131], "git": [47, 50], "github": [0, 47], "give": [19, 31, 45, 47, 48, 52, 66, 73, 117, 126, 127, 128], "given": [2, 13, 26, 30, 31, 40, 45, 46, 52, 56, 61, 62, 65, 66, 67, 68, 69, 70, 72, 75, 82, 87, 88, 115, 117, 127, 128], "glemaitr": [117, 121, 125], "global": [72, 76, 77, 78], "glorot_norm": 10, "glossari": [61, 62, 65, 66, 67, 81, 90, 92, 93, 94, 95, 96, 97, 99, 100], "gmail": [2, 5, 6, 7, 8, 9, 10, 13, 16, 19, 20, 23, 24, 28, 31, 32, 33, 36, 40, 41, 42], "gmean": 74, "go": [2, 5, 6, 7, 8, 9, 10, 13, 16, 19, 20, 23, 24, 28, 31, 32, 33, 36, 40, 41, 42, 47, 115], "goe": [66, 115], "gonenc": [117, 122], "good": [45, 46, 49, 63], "gpu": 10, "gradient": [5, 55, 69, 70, 89], "gradienttap": 55, "gradual": 104, "graphic": 9, "greater": [31, 51, 66], "green": [41, 42, 52, 56, 75, 115], "ground": [71, 72, 73, 76, 77, 78], "group": [26, 39, 40, 56, 104, 115], "grow": 66, "grown": [65, 66, 67, 68], "guarante": 47, "guid": [49, 50, 60, 61, 62, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 107, 117, 124, 126], "guidelin": [49, 116], "guillaum": [0, 2, 5, 6, 7, 8, 9, 10, 13, 16, 19, 20, 23, 24, 28, 31, 32, 33, 36, 40, 41, 42, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129], "gustavo": 131, "h": [19, 65, 67, 80, 86], "ha": [9, 20, 23, 24, 47, 52, 60, 61, 62, 65, 66, 67, 68, 69, 70, 71, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 115, 117, 120, 123, 124, 125, 127], "haibo": [79, 131], "halachkin": [117, 123], "half": [56, 117, 125], "hall": [80, 83, 84, 85, 86, 131], "han": [80, 131], "handi": 33, "handl": [9, 31, 88, 115, 117, 121, 122, 123, 124, 127], "handle_unknown": [5, 85], "happen": [5, 9, 24, 36, 47, 52, 87], "har68": [115, 131], "hard": [56, 91, 94, 116, 117, 119, 129], "hardwar": 50, "harsh": [65, 66, 67, 68], "hart": [92, 131], "hash": 47, "have": [0, 5, 8, 10, 13, 19, 20, 23, 24, 44, 45, 47, 48, 52, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 115, 117, 123, 124, 125, 127, 129], "hay": [117, 126], "hbgl08": [56, 131], "he": [79, 131], "head": [46, 56, 115], "heidelberg": 96, "heijl": [117, 126], "help": [47, 115], "helper": [16, 36, 87], "henc": [13, 115], "here": [19, 20, 45, 47], "heterogen": [56, 82, 98, 115, 117, 125, 131], "heurist": [31, 40, 41, 115], "hido": [19, 65, 131], "hien": 131, "high": [7, 66, 68], "higher": [55, 66, 68, 72, 82, 115, 117, 125], "highest": [65, 66, 67, 94], "highli": [63, 72], "highlight": [5, 41, 42, 45, 115], "hiroshima": 131, "hisashi": 131, "histgradientboostingclassifi": [5, 45], "histogram": 5, "hkt09": [48, 131], "ho": 65, "hold": 66, "home": [20, 40], "hot": [5, 10, 85, 117, 122], "how": [1, 3, 4, 9, 11, 19, 22, 26, 32, 35, 42, 46, 51, 55, 60, 61, 62, 64, 65, 66, 67, 68, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 114, 115, 117, 126], "howev": [5, 9, 13, 20, 31, 45, 48, 56, 85, 115], "hsieh": [117, 126], "hstack": [7, 19], "html": [0, 104], "http": [0, 10, 50, 81, 104, 131], "hua": 131, "huan": [80, 131], "hugo": [117, 125], "hui": 131, "huls": [68, 131], "human": [68, 131], "hwm05": [56, 131], "hybrid": [68, 131], "i": [0, 2, 5, 7, 8, 9, 10, 12, 13, 16, 18, 19, 20, 24, 26, 28, 31, 32, 33, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55, 56, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 115, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131], "iaai": [19, 65, 131], "iba": [6, 9, 23, 24, 71, 74], "iba_scoring_func": 74, "icml": [72, 97, 131], "id": [10, 46, 63, 104], "idea": [49, 115], "idend": 31, "ident": [9, 40, 44, 60], "identif": [96, 131], "identifi": [31, 65, 66, 67, 115], "idf": 9, "idx": 32, "idx_max": 28, "idxmin": [5, 8], "ieee": [19, 65, 67, 68, 79, 90, 92, 93, 99, 100, 131], "ieeecomputersocieti": 131, "ignor": [5, 65, 66, 67, 68, 71, 72, 76, 77, 78, 85, 87], "iht": [94, 115], "ii": [13, 24, 26, 39, 40, 44, 46, 56, 99, 115], "iii": [56, 99], "ill": 116, "illustr": [5, 6, 7, 13, 16, 19, 22, 26, 32, 39, 40, 41, 43, 45, 52, 55, 56, 100, 114, 115], "iloc": 10, "imag": [8, 50, 52, 54, 56], "imagin": 115, "imbal": [5, 20, 45, 51, 67, 68, 72, 74, 76, 77, 78, 108, 131], "imbalanc": [3, 4, 8, 9, 10, 11, 13, 15, 17, 22, 23, 25, 28, 31, 33, 36, 40, 44, 45, 47, 48, 50, 55, 58, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 79, 80, 81, 82, 83, 86, 87, 88, 89, 95, 97, 98, 100, 105, 106, 111, 114, 115, 116, 117, 119, 124, 125, 128, 129, 130, 131], "imblearn": [2, 5, 6, 7, 8, 9, 10, 13, 15, 16, 19, 20, 23, 24, 26, 28, 31, 33, 36, 40, 42, 44, 45, 46, 47, 48, 49, 50, 52, 55, 56, 57, 58, 59, 70, 73, 75, 76, 77, 78, 89, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 117, 125, 126, 127, 128, 129], "imblern": [117, 125], "impact": [5, 16, 28, 31, 51, 115, 117, 120], "implement": [0, 4, 8, 9, 11, 19, 24, 26, 31, 39, 40, 44, 47, 48, 51, 52, 55, 56, 60, 65, 66, 67, 75, 79, 80, 81, 83, 84, 85, 86, 87, 88, 94, 110, 114, 115, 117, 121, 123, 128, 129], "impli": [18, 26, 115], "import": [2, 5, 6, 7, 8, 9, 10, 13, 16, 19, 20, 23, 24, 28, 31, 32, 33, 36, 40, 41, 42, 44, 45, 46, 47, 48, 49, 55, 56, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 115, 116, 117, 122, 126, 127, 128], "impos": [56, 117, 125, 128], "improv": [5, 8, 9, 10, 20, 96, 117, 124, 127, 131], "impur": [66, 68], "imput": [5, 10], "imu": [46, 63], "in_danger_indic": 80, "includ": [26, 35, 45, 47, 56, 59, 65, 66, 71, 72, 76, 77, 78, 104, 107, 113, 116, 117, 127], "incorpor": 51, "incras": 90, "increas": [5, 20, 33, 40, 45, 66, 115], "ind": 41, "inde": [33, 45, 56], "independ": [5, 31, 56, 67, 82, 91, 98, 115], "inderjeet": 131, "index": [5, 24, 66, 71, 74, 100], "indic": [19, 55, 56, 65, 66, 67, 69, 71, 77, 80, 82, 85, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 103, 117, 123, 124, 125], "indicate_multilabel": 103, "indicate_one_vs_al": 103, "indices_": 69, "individu": 36, "induc": [5, 20, 66], "ineffici": 115, "infer": [56, 85, 117, 121], "infinit": 69, "inform": [5, 45, 47, 49, 56, 60, 61, 62, 63, 64, 65, 66, 67, 68, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 117, 122, 126, 131], "inherit": [90, 92, 93, 95, 96, 97, 99], "initi": [55, 68, 117, 123], "initialis": 101, "inject": 5, "inlier": [44, 56], "inner": [67, 116], "input": [10, 47, 55, 60, 61, 62, 65, 66, 67, 68, 69, 70, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 115, 117, 122, 127], "input_dim": [55, 69, 70], "input_featur": [60, 61, 62, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "input_shap": 10, "insid": [59, 65, 66, 67, 68, 87], "inspect": [28, 66, 68, 87, 88], "instal": [49, 54, 66, 117, 122], "instanc": [52, 55, 56, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 116, 117, 119, 120, 131], "instancehardnessthreshold": [40, 95, 105, 115, 117, 122, 125, 127], "instead": [2, 5, 19, 20, 31, 46, 47, 56, 63, 65, 66, 67, 68, 72, 87, 88, 102, 104, 115, 117, 118, 120, 121, 122, 123, 124, 125, 129], "instruct": 50, "int": [2, 16, 46, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "int32": [31, 52, 75, 84], "int64": [5, 55, 85], "int8": [7, 8], "integ": [101, 115], "integr": [19, 50, 68], "intellig": [19, 65, 79, 80, 83, 84, 85, 86, 131], "intend": 19, "inter": 56, "interact": 47, "intercept": 55, "interest": [9, 41, 42, 96, 115], "interfac": [75, 88], "intermedi": 87, "intern": [5, 20, 40, 47, 66, 77, 79, 86, 117, 127, 131], "interp": 8, "interpol": [8, 32, 44, 56], "interv": 66, "introduc": [115, 117, 125], "introduct": [10, 116], "introductori": 26, "invers": [5, 66, 87, 117, 125], "inverse_transform": [87, 117, 125], "involv": [95, 131], "ioerror": 63, "ipynb": [2, 5, 6, 7, 8, 9, 10, 13, 16, 19, 20, 23, 24, 28, 31, 32, 33, 36, 40, 41, 42], "iri": [2, 6, 46, 69], "is_one_vs_al": 103, "is_tomek": 100, "isda": 131, "isin": [2, 8], "isinst": 31, "isol": 50, "isolationforest": 7, "isolet": [46, 63], "issu": [5, 20, 31, 40, 44, 45, 47, 49, 51, 56, 117, 123, 126, 127, 128], "item": [2, 31, 42, 44, 45, 46, 56, 60, 115], "iter": [40, 48, 55, 68, 87, 89, 90, 99, 115, 117, 125], "its": [5, 20, 41, 47, 56, 66, 77, 87, 93, 99, 102, 104, 115, 117, 125], "itself": [60, 61, 62, 75, 79, 80, 81, 82, 83, 84, 85, 86, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "iv": 99, "ivan": 131, "j": [67, 68, 72, 96], "januari": [117, 122, 123, 130], "jason": 131, "javier": 74, "jianxin": 131, "jmlr": 0, "jo": 131, "joan": [117, 124], "joblib": [50, 54, 61, 62, 65, 66, 67, 81, 87, 88, 90, 92, 93, 94, 95, 96, 97, 99, 100, 117, 128], "joint": [79, 131], "jorma": 131, "journal": [0, 19, 65, 80, 83, 84, 85, 86, 131], "jpt": [117, 120], "juli": [117, 121], "june": [90, 99, 117, 126, 128], "jupyt": [2, 5, 6, 7, 8, 9, 10, 13, 16, 19, 20, 23, 24, 26, 28, 31, 32, 33, 36, 40, 41, 42], "just": [65, 66, 67], "k": [0, 8, 13, 31, 40, 41, 47, 52, 56, 65, 67, 68, 75, 79, 80, 81, 83, 84, 85, 86, 90, 92, 93, 95, 96, 97, 99, 101, 104, 115, 117, 123, 131], "k_neighbor": [28, 56, 80, 81, 83, 84, 85, 86, 95, 117, 123], "kaggl": 10, "kamei": [86, 131], "kappa": 28, "kashima": [19, 65, 131], "katsuari": 131, "kdd": [46, 63], "keep": [45, 52, 72, 91, 100, 115], "keep_spars": [69, 70, 89], "kegelmey": [80, 83, 84, 85, 86, 131], "kei": [2, 19, 45, 46, 49, 60, 61, 62, 64, 65, 66, 67, 68, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 117, 128], "kept": [40, 115], "kera": [4, 11, 26, 70, 105, 114, 116, 117, 125, 126, 128], "kernel_initi": 10, "kevin": 131, "keyword": [60, 62, 64, 87, 102, 104, 117, 128, 131], "khan": [117, 127], "khoshgoftaar": [68, 131], "kind": [31, 56, 80, 117, 125, 127], "kind_sel": [90, 93, 96, 99, 115, 117, 122], "klizter": [117, 125], "km": [52, 131], "kmean": [31, 56, 81, 91, 117, 128], "kmeans_estim": [31, 81], "kmeans_estimator_": 81, "kmeanssmot": [31, 56, 80, 82, 83, 84, 85, 86, 105, 117, 126, 127], "kneighbor": [41, 79, 80, 81, 83, 84, 85, 86, 101], "kneighbors_graph": [79, 80, 81, 83, 84, 85, 86], "kneighborsclassifi": [8, 36, 87, 92, 97], "kneighborsmixin": [90, 92, 93, 95, 96, 97, 99, 101, 115, 117, 123], "knn": [8, 36, 87, 90, 93, 95, 99, 116, 131], "know": 8, "knowledg": [13, 65, 74, 82, 86, 131], "known": [19, 48, 49, 52, 56, 66, 67, 68, 82, 115, 117, 129], "kubat": [72, 97, 131], "kw_arg": [19, 55, 60], "kwarg": [60, 64, 87, 102], "kwd": 10, "l": [47, 65, 80, 83, 84, 85, 86, 117, 126, 131], "label": [7, 8, 28, 32, 41, 42, 46, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 115], "labels_": 47, "lambda": [10, 56], "larg": [19, 65, 81], "larger": [40, 51, 52], "largest": [40, 41, 66, 115], "last": [5, 31, 56, 81, 85, 87, 92, 97, 117, 125, 131], "lastest": 47, "later": [18, 26, 36, 41, 45, 115], "latest": [47, 117, 130], "latter": [60, 61, 62, 65, 66, 67, 68, 75, 79, 80, 81, 82, 83, 84, 85, 86, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 115], "lau01": [115, 131], "laurikkala": [96, 131], "lawrenc": 131, "layer": [10, 55, 69, 70, 117, 126], "lazi": [117, 128], "lc": 131, "ldb17": [56, 131], "lead": [45, 56, 87, 117, 127, 129], "leaf": 66, "leakag": 116, "learn": [3, 7, 10, 13, 20, 22, 23, 25, 31, 35, 40, 44, 45, 46, 47, 48, 52, 55, 61, 63, 64, 65, 66, 67, 68, 72, 74, 79, 80, 81, 82, 83, 86, 87, 88, 91, 94, 95, 98, 100, 104, 105, 108, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131], "learner": [20, 48, 67, 117, 126], "learning_r": [55, 68], "least": [56, 66, 72, 115], "leav": [66, 81], "left": [10, 33, 41, 45, 65, 66, 115], "left_impur": 66, "legaci": 104, "legend": [7, 8, 28, 32, 33, 41, 42], "legend_el": 33, "lema": 0, "lemaitr": [0, 2, 5, 6, 7, 8, 9, 10, 13, 16, 19, 20, 23, 24, 28, 31, 32, 33, 36, 40, 41, 42, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129], "lemaitre58": [2, 5, 6, 7, 8, 9, 10, 13, 16, 19, 20, 23, 24, 28, 31, 32, 33, 36, 40, 41, 42], "len": [32, 45, 100], "length": [75, 81], "leo": [66, 131], "less": [5, 7, 9, 31, 33, 56, 66, 90, 93, 96, 99, 115], "let": [28, 33, 36, 45, 52, 55, 56, 115], "letter_img": [46, 63], "level": [51, 52, 55, 74, 94, 131], "level_0": 10, "lfw": 8, "li": [79, 117, 123, 131], "liaw": [65, 66, 131], "lib": 20, "librari": 49, "libras_mov": [46, 63], "libsvm": [46, 63], "licens": [2, 5, 6, 7, 8, 9, 10, 13, 16, 19, 20, 23, 24, 28, 31, 32, 33, 36, 40, 41, 42, 49], "like": [26, 30, 31, 34, 36, 44, 51, 60, 61, 62, 64, 65, 66, 67, 68, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 114, 117, 121, 125], "lil": 68, "limit": 7, "line": [32, 41, 56, 65, 117, 126], "linear": 31, "linear_model": [5, 6, 7, 13, 23, 24, 31, 40, 56, 104, 115], "linestyl": 8, "link": [10, 12, 13, 26, 39, 41, 43, 44, 49, 61, 62, 79, 90, 99, 100, 114, 116, 117, 119, 127], "linspac": 8, "list": [5, 31, 40, 41, 50, 51, 65, 66, 67, 68, 71, 75, 87, 88, 90, 92, 93, 96, 97, 99, 100, 102, 104, 117, 123, 125, 127], "literatur": [13, 20, 52, 117, 122, 125], "liu": [67, 131], "ln": 47, "load": [9, 63, 116], "load_iri": [2, 6, 46, 64, 69, 70], "loader": 9, "loc": [8, 28, 33, 41, 42], "local": [63, 79], "locat": 47, "lock": [50, 54], "log": [47, 55, 65, 66, 67, 68], "log2": 66, "logic": 115, "logist": [5, 31, 51, 55], "logistic_regress": 55, "logisticregress": [5, 6, 7, 13, 23, 24, 31, 40, 56, 104, 115], "logisticregression__class_weight": 5, "look": [31, 45, 66, 100], "loop": [61, 62, 65, 66, 67, 81, 90, 92, 93, 94, 95, 96, 97, 99, 100], "lorenzon": [117, 129], "loskutov": [117, 123], "loss": [5, 10, 55, 69, 70, 73], "lost": [18, 26], "loupp": 65, "low": [7, 9, 40, 115], "lower": [8, 28, 33, 42, 68, 115], "lowercas": 88, "lr_clf": 5, "lwz08": [48, 131], "m": [2, 40, 46, 61, 62, 63, 65, 66, 67, 68, 72, 79, 80, 81, 82, 83, 84, 85, 86, 91, 94, 95, 97, 98, 102, 115, 117, 123, 131], "m_neighbor": [56, 80, 86, 117, 123, 125, 127], "ma": 116, "machin": [0, 5, 51, 61, 65, 94, 131], "maclin": [19, 65, 131], "macro": [7, 36, 72, 73, 76, 77, 78, 87, 116], "macro_averaged_mean_absolute_error": [52, 105, 117, 129], "made": [24, 56, 77, 84], "mae": [73, 116, 117, 129], "magimel": [117, 123], "mai": [65, 66, 67, 87, 115, 117, 122, 130], "mainli": [5, 9, 24, 45, 115, 117, 130], "mainten": [50, 54, 120, 121], "major": [0, 2, 5, 9, 18, 19, 20, 26, 31, 32, 33, 39, 40, 41, 42, 45, 48, 51, 56, 61, 62, 65, 66, 67, 68, 72, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 115, 116, 117, 119, 121, 123], "majority_class": 19, "majority_indic": 19, "make": [2, 5, 8, 10, 19, 20, 28, 31, 32, 40, 41, 42, 45, 50, 56, 81, 87, 96, 115, 116, 117, 120, 124, 125, 126, 129, 130], "make_blob": [7, 81], "make_classif": [13, 19, 23, 24, 28, 31, 33, 36, 40, 44, 48, 55, 56, 60, 61, 62, 65, 66, 67, 68, 79, 80, 82, 83, 85, 86, 87, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 115], "make_column_selector": 5, "make_column_transform": 5, "make_imbal": [2, 5, 6, 16, 45, 46, 69, 70, 105, 117, 124, 127], "make_index_balanced_accuraci": [24, 52, 105, 117, 128], "make_model": 10, "make_moon": [7, 16], "make_pipelin": [5, 6, 7, 8, 9, 10, 13, 23, 24, 28, 31, 36, 40, 45, 87, 105, 117, 125], "make_pipeline_imb": 9, "make_pipeline_with_sampl": 5, "make_plot": 41, "make_plot_despin": [41, 42], "make_regress": 55, "make_scor": 28, "mamba": 50, "mammographi": [46, 63], "man": [67, 68, 90, 93, 99, 100, 131], "manag": [116, 117, 129], "mani": [33, 66, 68, 95, 115, 131], "manner": [20, 56, 82, 115], "manual": [33, 45, 81], "mao": 131, "map": [60, 61, 62, 65, 66, 67, 68, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "march": [117, 122], "margin": [44, 115], "maria": 131, "mark": [47, 56, 104], "marker": [41, 42], "martinez": [94, 131], "mask": [56, 85], "mask_photo": 8, "massich": [117, 124], "massiot": [117, 129], "master": 47, "match": [60, 61, 62, 71, 79, 80, 81, 82, 83, 84, 85, 86, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "math": 55, "mathemat": [52, 116], "matmul": 55, "matplotlib": [2, 7, 8, 10, 13, 16, 20, 28, 31, 32, 33, 40, 41, 42, 50, 54], "matric": [47, 51, 65, 67, 82, 115, 117, 121, 124, 125, 126], "matrix": [60, 61, 62, 64, 65, 66, 67, 68, 71, 79, 80, 81, 82, 83, 84, 85, 86, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 115], "matt": [117, 127], "matwin": [72, 97, 131], "max": [5, 13, 19, 31, 40], "max_depth": [66, 68, 117, 126], "max_featur": [65, 66], "max_it": [5, 23, 24, 99, 115], "max_leaf_nod": 66, "max_sampl": [7, 65, 66, 117, 127], "maxim": [52, 72], "maximum": [66, 68, 90, 99, 115], "mb": [2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 16, 17, 19, 20, 21, 23, 24, 25, 28, 29, 31, 32, 33, 34, 36, 37, 38, 40, 41, 42, 43, 114], "me2": [46, 63], "mean": [5, 8, 19, 20, 24, 28, 45, 55, 61, 62, 65, 66, 67, 68, 71, 72, 76, 77, 78, 81, 90, 92, 93, 94, 95, 96, 97, 99, 100, 115, 116, 131], "mean_absolute_error": 73, "mean_auc": 8, "mean_fpr": 8, "mean_tpr": 8, "meaning": [72, 76, 77, 78], "meant": 47, "measur": [52, 66, 72, 115, 131], "mechan": [60, 61, 62, 65, 66, 67, 68, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "median": [85, 117, 122, 125, 128], "median_std_": 85, "medic": 52, "medicin": 131, "mem": [3, 11, 14, 17, 21, 25, 29, 34, 37, 38, 43, 114], "member": [65, 66, 67], "memori": [2, 5, 6, 7, 8, 9, 10, 13, 16, 19, 20, 23, 24, 28, 31, 32, 33, 36, 40, 41, 42, 51, 65, 66, 67, 75, 87, 88, 117, 125, 128, 131], "memory_profil": [50, 54], "menardi": [82, 131], "mention": [45, 46], "merg": 47, "meshgrid": [13, 31, 40], "meson": [50, 54], "messag": [47, 117, 122, 128], "meta": [65, 66, 67, 68, 87, 117, 125], "metadata": [60, 61, 62, 65, 66, 67, 68, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 117, 118, 122], "metadata_rout": [65, 66, 67, 68, 87], "metadatarequest": [60, 61, 62, 66, 75, 79, 80, 81, 82, 83, 84, 85, 86, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "metadatarout": [65, 67, 87], "method": [0, 2, 4, 6, 7, 10, 11, 13, 19, 20, 27, 31, 40, 44, 47, 48, 49, 51, 52, 55, 56, 58, 60, 61, 62, 65, 66, 67, 68, 69, 74, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 114, 115, 117, 123, 124, 125, 129, 131], "methodologi": 115, "metric": [6, 7, 8, 9, 10, 20, 22, 23, 25, 26, 28, 36, 45, 48, 55, 56, 65, 66, 67, 68, 69, 70, 73, 75, 76, 77, 78, 83, 87, 88, 105, 114, 116, 117, 123, 125, 127, 128, 129], "michael": [94, 117, 122, 126, 131], "micro": [72, 76, 77, 78], "middl": 81, "might": [9, 45, 56, 65, 66, 117, 126, 127, 128], "min": [13, 19, 31, 40], "min_c_": [117, 124], "min_impurity_decreas": 66, "min_samples_leaf": [66, 117, 128], "min_samples_split": 66, "min_weight_fraction_leaf": 66, "mind": 115, "mine": [19, 65, 82, 131], "mini": [4, 11, 26, 55, 69, 89, 114, 117, 125], "minibatchkmean": [31, 40, 81, 91], "minim": [55, 66], "minimum": [50, 52, 54, 66], "minor": [2, 5, 8, 9, 19, 20, 26, 30, 32, 33, 40, 41, 42, 46, 47, 56, 61, 62, 63, 65, 66, 67, 68, 79, 80, 81, 82, 83, 84, 85, 86, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 115, 117, 119, 120, 121, 122, 123, 127, 131], "minority_class": [16, 19], "minority_indic": 19, "minut": [2, 5, 6, 7, 8, 9, 13, 16, 19, 20, 23, 24, 28, 31, 32, 33, 36, 40, 41, 42], "miroslav": 131, "misc": 9, "miscellan": [105, 116], "misclassifi": [115, 117, 123], "mislead": [66, 68], "miss": [5, 66, 94, 98, 115, 117, 122], "missing_valu": 10, "mistak": 5, "misus": 45, "mit": [2, 5, 6, 7, 8, 9, 10, 13, 16, 19, 20, 23, 24, 28, 31, 32, 33, 36, 40, 41, 42, 49], "mix": [12, 26, 31, 56, 117, 121], "mixin": [117, 124], "mo97": [48, 131], "mode": [50, 66, 90, 93, 96, 99, 115], "model": [4, 7, 8, 9, 10, 11, 19, 20, 24, 28, 31, 36, 40, 45, 55, 64, 65, 66, 69, 70, 87, 88, 89, 98, 114, 125, 131], "model_select": [5, 6, 8, 10, 19, 20, 23, 24, 28, 29, 36, 45, 48, 65, 67, 87, 114, 117, 123], "modif": [100, 131], "modul": [15, 26, 47, 52, 59, 107, 110, 113, 117, 123, 124, 125, 127, 128], "mogol": [117, 122], "mollineda": [74, 131], "moment": [117, 123], "monard": [61, 62, 131], "monitor": 68, "monoton": [66, 117, 122], "monotonic_cst": 66, "moon": 7, "more": [5, 9, 13, 33, 44, 45, 49, 52, 56, 60, 61, 62, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 115, 117, 121], "most": [5, 18, 26, 28, 40, 56, 90, 93, 99, 115], "most_frequ": [5, 10], "move": [104, 117, 123, 124, 126], "movi": 52, "mt14": [56, 131], "much": 52, "multi": [61, 62, 65, 66, 67, 68, 72, 79, 80, 81, 82, 83, 84, 85, 86, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 116, 117, 124], "multiclass": [4, 11, 26, 64, 66, 71, 72, 76, 77, 78, 87, 88, 95, 103, 114, 117, 122, 124], "multilabel": [66, 72, 76, 77, 78, 103, 117, 125], "multinomi": 9, "multinomialnb": 9, "multioutput": 66, "multipl": [2, 6, 56, 115, 117, 124], "multipli": [2, 16, 46, 66, 117, 122], "must": [60, 61, 62, 68, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "my": 104, "mypi": [50, 54], "mz03": [115, 131], "n": [19, 38, 40, 66, 80, 82, 83, 84, 85, 86, 91, 115, 131], "n_": [2, 61, 62, 65, 66, 67, 68, 79, 80, 81, 82, 83, 84, 85, 86, 91, 94, 95, 98, 102], "n_cat_featur": 85, "n_categori": 75, "n_categories_": 75, "n_class": [13, 23, 24, 28, 31, 36, 40, 44, 48, 55, 56, 60, 61, 62, 65, 66, 67, 68, 69, 70, 75, 79, 80, 82, 83, 85, 86, 87, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 115], "n_classes_": [65, 66, 67, 68], "n_cluster": [31, 40, 47, 91], "n_clusters_per_class": [13, 23, 24, 28, 31, 36, 40, 44, 48, 55, 56, 60, 61, 62, 65, 67, 79, 80, 82, 83, 85, 86, 87, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 115], "n_compon": 36, "n_cont_featur": 85, "n_estim": [5, 20, 48, 65, 66, 67, 68], "n_featur": [10, 13, 19, 23, 24, 28, 31, 33, 36, 40, 44, 48, 55, 56, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 115], "n_features_": 85, "n_features_in_": [60, 61, 62, 65, 66, 67, 68, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "n_inform": [13, 23, 24, 28, 31, 36, 40, 44, 48, 55, 56, 60, 61, 62, 65, 66, 67, 68, 79, 80, 82, 83, 85, 86, 87, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 115], "n_init": [31, 40, 81, 91], "n_iter_": 99, "n_job": [5, 45, 61, 62, 65, 66, 67, 81, 90, 92, 93, 94, 95, 96, 97, 99, 100, 117, 120, 128], "n_label": 71, "n_majority_resampl": 19, "n_minority_class": 19, "n_neighbor": [8, 36, 40, 41, 79, 90, 92, 93, 95, 96, 97, 99, 115, 117, 123, 126], "n_neighbors_ver3": [95, 115], "n_new_sampl": [82, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100], "n_node": 66, "n_nodes_ptr": 66, "n_output": [65, 66, 67, 68, 73], "n_outputs_": 66, "n_redund": [13, 23, 24, 28, 31, 33, 36, 40, 44, 48, 55, 56, 60, 61, 62, 65, 67, 79, 80, 82, 83, 85, 86, 87, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 115], "n_repeat": [13, 31, 40, 44, 48, 55, 56, 115], "n_res_in_middl": 81, "n_resampled_class": [92, 97], "n_sampl": [7, 13, 16, 19, 23, 24, 28, 31, 33, 36, 40, 44, 48, 55, 56, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 115], "n_samples_new": [60, 61, 62, 64, 79, 80, 81, 82, 83, 84, 85, 86, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "n_seeds_": [92, 97, 115], "n_split": [8, 10], "n_t": 66, "n_t_l": 66, "n_t_r": 66, "n_transformed_featur": 87, "n_unique_label": [76, 77, 78], "naiv": [9, 40, 116], "naive_bay": [9, 88], "name": [5, 10, 16, 19, 46, 48, 56, 60, 61, 62, 63, 65, 66, 67, 68, 71, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104], "named_step": [87, 88], "nan": [65, 66], "napolitano": [68, 131], "nashvil": 131, "nat": [117, 122], "natur": 45, "nc": [31, 56, 85], "nchez": 131, "nck09": [56, 131], "ncol": [2, 16, 20, 31, 40, 42], "ncr": [96, 115], "ndarrai": [51, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103], "neareast": 56, "nearest": [13, 31, 40, 41, 42, 44, 56, 61, 62, 79, 80, 81, 83, 84, 85, 86, 90, 91, 92, 93, 95, 96, 97, 99, 100, 101, 116, 117, 119, 120, 123, 131], "nearest_neighbor": 41, "nearestneighbor": [41, 79, 80, 81, 83, 84, 85, 86, 117, 120], "nearmiss": [6, 26, 39, 40, 43, 69, 70, 94, 98, 105, 114, 115, 117, 119, 123, 124, 125], "necessari": [47, 56, 63, 75, 100, 117, 125], "need": [5, 28, 52, 56, 74, 82, 87, 90, 93, 99, 101, 117, 128], "neg": [5, 19, 40, 52, 66, 72, 73, 76, 77, 78, 115, 117, 124], "negative_binomi": 19, "negatives_": 77, "neigbhour": [90, 115], "neighboorhood": [117, 119], "neighbor": [8, 28, 31, 36, 40, 41, 42, 56, 75, 79, 80, 81, 83, 84, 85, 86, 87, 90, 91, 92, 93, 96, 97, 99, 101, 116, 117, 120, 131], "neighborhood": [56, 79, 80, 81, 83, 84, 85, 86], "neighbour": [13, 41, 44, 61, 62, 79, 80, 83, 84, 85, 86, 90, 92, 93, 95, 96, 99, 100, 116, 117, 119, 123], "neighbourhood": [32, 56, 90, 92, 93, 95, 96, 97, 99, 115], "neighbourhoodcleaningrul": [40, 105, 115, 117, 122, 123, 125], "neighor": 40, "neighour": 93, "nest": [60, 61, 62, 65, 66, 67, 68, 75, 79, 80, 81, 82, 83, 84, 85, 86, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "net": 66, "network": [79, 131], "neural": [79, 131], "never": [65, 66], "new": [8, 26, 30, 31, 32, 33, 44, 47, 49, 56, 65, 66, 67, 80, 81, 86, 91, 112, 115, 121, 131], "newsgroup": 9, "newsgroups_test": 9, "newsgroups_train": 9, "newslett": [61, 131], "next": [55, 56, 115], "nguyen": [86, 131], "nice": [28, 41, 42], "nicer": 32, "nicola": 131, "nitesh": 131, "nm": 95, "nm1": 115, "nn": [40, 41, 47, 55, 81, 92, 95, 96, 97, 101], "nn_": [79, 90, 93, 95, 96, 99], "nn_index": 100, "nn_k_": [80, 81, 83, 84, 85, 86], "nn_m_": [80, 86], "nn_name": 101, "nn_object": 101, "nn_ver3_": 95, "node": [66, 117, 125], "nogueira": [0, 117, 119], "nois": [7, 16, 33, 40, 56, 115, 117, 122], "noisi": [13, 40, 44, 96, 97, 115], "nomin": [84, 85], "non": [7, 20, 66, 73, 117, 127], "none": [31, 40, 47, 55, 56, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 117, 120, 121, 124, 126], "normal": [8, 19, 31, 33, 36, 47, 66, 68, 82, 115, 117, 126], "normal_initi": 55, "nosetest": [117, 124], "note": [2, 9, 45, 46, 47, 52, 56, 60, 61, 62, 63, 64, 65, 66, 67, 68, 72, 74, 75, 79, 80, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 115], "notebook": [2, 5, 6, 7, 8, 9, 10, 13, 16, 19, 20, 23, 24, 26, 28, 31, 32, 33, 36, 40, 41, 42], "notimplementederror": 68, "now": [2, 5, 16, 24, 28, 33, 36, 45, 52, 87, 117, 118, 121, 122, 127], "np": [7, 8, 10, 13, 19, 31, 32, 40, 41, 42, 45, 52, 55, 56, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 91, 92, 94, 97, 98, 115], "nrow": [16, 31, 40, 42], "null": [117, 122, 128], "num": 5, "num_batch": 69, "num_pip": 5, "number": [0, 2, 5, 7, 9, 19, 20, 24, 26, 28, 31, 39, 40, 45, 46, 47, 51, 52, 55, 56, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 115, 117, 121, 122, 124, 127], "numer": [5, 10, 31, 45, 52, 56, 82, 85, 98, 115, 117, 128], "numerical_column": 10, "numerical_pipelin": 10, "numerical_preprocess": 10, "numpi": [7, 8, 10, 13, 19, 31, 32, 40, 41, 42, 45, 50, 51, 52, 54, 55, 56, 60, 71, 73, 75, 76, 77, 78, 81, 84, 85, 115, 117, 122, 127], "numpydoc": [50, 54], "nv": [117, 120], "nwith": 8, "o": [2, 10, 23, 61, 62, 79, 80, 81, 82, 83, 84, 85, 86, 102, 131], "obj": 51, "object": [8, 31, 36, 47, 51, 56, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 115, 117, 120, 122, 123, 124, 125], "observ": [33, 45, 85, 93, 94, 99, 115], "obtain": [5, 44, 65, 66, 115, 117, 123, 125], "occur": [45, 47, 117, 123], "occurr": 77, "octob": [117, 122, 125], "off": [60, 68, 117, 124], "offer": [18, 26, 52, 56, 115], "offici": 47, "offset": [8, 13, 16, 28, 31, 32, 40, 41, 42], "ohe_": [117, 121], "oil": [46, 63], "ol": [117, 125], "old": [47, 117, 126], "older": [65, 67], "oliv": [117, 126], "oliveira": [16, 117, 119, 123], "on_epoch_begin": 69, "on_epoch_end": 69, "onc": [5, 55, 56], "one": [5, 10, 19, 31, 40, 45, 46, 47, 48, 56, 63, 66, 72, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 90, 92, 93, 96, 97, 99, 100, 103, 115, 117, 118, 122, 123, 125, 131], "one_hot": 55, "onehotencod": [5, 10, 85, 117, 121], "ones": 7, "onesidedselect": [40, 105, 115, 117, 122, 123], "onli": [2, 5, 8, 24, 31, 33, 41, 42, 45, 52, 55, 56, 60, 61, 62, 65, 66, 67, 68, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 115, 117, 120, 122, 123, 125, 126, 128, 129], "oo": [117, 120], "oob": [117, 127], "oob_decision_function_": [65, 66], "oob_scor": [65, 66], "oob_score_": [65, 66], "open": 49, "opengraph": [50, 54], "opitz": [19, 65, 131], "oppos": 47, "opposit": 56, "optical_digit": [46, 63], "optim": [10, 55, 56, 69, 70], "optimist": 45, "option": [56, 65, 66, 67, 68, 71, 72, 80, 82, 87, 103, 117, 125, 129], "order": [8, 36, 40, 63, 65, 66, 67, 68, 71, 72, 76, 77, 78, 87, 92, 96, 97, 112, 117, 124], "ordereddict": 63, "ordin": [5, 52, 73, 84, 117, 129, 131], "ordinalencod": [5, 52, 75, 84, 117, 121], "org": [0, 81, 104, 131], "origin": [2, 5, 13, 16, 31, 40, 46, 47, 56, 61, 62, 65, 66, 67, 68, 69, 70, 79, 80, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 103, 115, 117, 121, 125, 126], "oss": [97, 115], "other": [9, 42, 44, 46, 52, 56, 65, 66, 67, 68, 72, 75, 87, 88, 92, 104, 115, 117, 123, 124, 131], "otherwis": [2, 65, 66, 67, 68, 72, 75, 76, 77, 78, 87, 91], "our": [5, 7, 45, 55, 115], "out": [45, 49, 65, 66, 115], "out_step": [86, 117, 125, 127], "outlier": [4, 11, 26, 44, 55, 56, 60, 87, 88, 114, 115], "outlier_reject": 7, "outperform": 20, "output": [8, 51, 52, 60, 61, 62, 66, 68, 71, 73, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 115, 117, 122, 127], "output_dict": [52, 71, 117, 121, 129], "over": [0, 2, 4, 5, 11, 12, 14, 24, 28, 34, 45, 52, 60, 61, 62, 65, 66, 67, 68, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 94, 95, 98, 102, 104, 105, 114, 116, 117, 119, 120, 121, 126, 129, 131], "over_bag": 19, "over_sampl": [2, 8, 13, 19, 23, 24, 28, 31, 33, 36, 56, 87, 109, 117, 123, 125, 126, 127, 128, 129], "overal": 9, "overlap": [33, 56], "oversampl": [56, 79, 80, 81, 82, 83, 84, 85, 86, 131], "own": [55, 66, 67, 105], "ozon": [46, 63], "ozone_level": [46, 63], "p": [19, 52, 65, 66, 67, 68, 75, 80, 83, 84, 85, 86, 87, 88, 92], "packag": [20, 31, 40, 46, 47, 50, 117, 124, 127, 129], "page": [0, 131], "pair": [52, 100], "pairwis": [75, 105, 116, 117, 129], "pairwise_dist": 75, "panda": [5, 8, 10, 16, 19, 46, 50, 52, 54, 56, 85, 87, 115, 117, 127], "paper": [0, 80, 83, 84, 85, 86, 96, 117, 121, 126], "paradigm": 86, "parallel": [117, 127], "parallel_backend": [61, 62, 65, 66, 67, 81, 90, 92, 93, 94, 95, 96, 97, 99, 100], "parallelis": [117, 126], "param": [60, 61, 62, 65, 66, 67, 68, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "param_nam": 28, "param_rang": 28, "paramet": [2, 5, 16, 20, 28, 31, 33, 40, 44, 46, 47, 48, 49, 52, 55, 56, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 115, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129], "parametr": [5, 86, 104], "parametrize_with_check": 105, "paraphras": 115, "parse_vers": 10, "part": [9, 20, 67, 68, 115, 131], "particular": [31, 47, 56], "partit": [45, 66], "pass": [7, 19, 46, 47, 55, 56, 60, 64, 65, 66, 67, 68, 79, 80, 81, 83, 84, 85, 86, 87, 88, 90, 93, 99, 101, 102, 104, 115, 117, 120, 121, 124, 125, 127, 128, 129], "passthrough": 87, "past": 65, "patch": [47, 50, 65], "path": [66, 87, 88], "pattern": [45, 65, 72, 117, 124, 131], "pca": [36, 87], "pd": [5, 8, 10, 16, 19, 117, 121], "peculiar": 56, "pen_digit": [46, 63], "penal": 5, "per": [52, 69, 70, 75, 82, 85, 89, 92, 97], "per_class": 55, "percentag": 66, "perfect": 68, "perform": [5, 8, 10, 19, 20, 26, 30, 40, 45, 46, 47, 48, 56, 66, 71, 72, 76, 77, 78, 82, 83, 87, 88, 95, 97, 98, 107, 109, 115, 117, 129], "permit": 88, "permutation_import": [66, 68], "person": 8, "perturb": [31, 33, 82], "petallength": 46, "petalwidth": 46, "peter": 131, "phase": [95, 96], "philip": 131, "photo": 8, "phrase": 51, "pick": [47, 56, 82, 98, 117, 123], "pictur": [8, 45], "pie": 2, "pig": 77, "pillow": [50, 54], "pip": 50, "pipe": 7, "pipelin": [5, 6, 8, 13, 19, 23, 24, 28, 31, 37, 40, 44, 45, 55, 60, 61, 62, 65, 66, 67, 68, 75, 79, 80, 81, 82, 83, 84, 85, 86, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 105, 114, 117, 118, 122, 123, 124, 125, 126, 127, 128], "pipelines_": [66, 68], "pitfal": 116, "pixel": 47, "pixi": 20, "pl": 23, "place": 49, "plain": [117, 127], "pleas": [47, 50, 60, 61, 62, 65, 66, 67, 68, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "plot": [2, 7, 8, 13, 16, 26, 27, 29, 31, 32, 40, 41, 42, 83, 87, 88, 114], "plot_bagging_classifi": [19, 21, 114], "plot_classification_report": [23, 25, 114], "plot_comparison_combin": [13, 14, 114], "plot_comparison_ensemble_classifi": [20, 21, 114], "plot_comparison_over_sampl": [31, 34, 114], "plot_comparison_under_sampl": [40, 43, 114], "plot_decision_funct": [13, 31, 40], "plot_illustration_generation_sampl": [32, 34, 114], "plot_illustration_nearmiss": [41, 43, 114], "plot_illustration_tomek_link": [42, 43, 114], "plot_impact_imbalanced_class": [5, 11, 114], "plot_make_imbal": [16, 17, 114], "plot_metr": [24, 25, 114], "plot_multi_class_under_sampl": [6, 11, 114], "plot_outlier_reject": [7, 11, 114], "plot_over_sampling_benchmark_lfw": [8, 11, 114], "plot_pipeline_classif": [36, 37, 114], "plot_resampl": [13, 31, 40], "plot_sampling_strategy_usag": [2, 3, 114], "plot_scatt": 7, "plot_shrinkage_effect": [33, 34, 114], "plot_step": [13, 31, 40], "plot_topic_class": [9, 11, 114], "plot_validation_curv": [28, 29, 114], "plotli": [50, 54], "plt": [2, 7, 8, 10, 13, 16, 20, 28, 31, 32, 33, 40, 41, 42], "plu": 115, "plug": [117, 122], "pm": 28, "po": 10, "point": [31, 32, 41, 44, 47, 65, 66, 71, 73, 95, 100, 117, 126], "polar": [50, 54, 87], "pooch": [50, 54], "poor": 9, "poorer": 31, "popular": [20, 56], "port": 47, "portion": 5, "porto": [4, 11, 26, 55, 69, 114], "porto_seguro_keras_under_sampl": [10, 11, 114, 117, 126], "pos_label": [8, 72, 76, 77, 78], "pos_label_idx": 8, "pose": 116, "posit": [8, 52, 66, 72, 76, 77, 78, 115, 117, 128], "positive_idx": 41, "positives_": 77, "possibl": [52, 55, 56, 60, 61, 62, 65, 66, 67, 68, 75, 79, 80, 81, 82, 83, 84, 85, 86, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 115, 117, 125, 126, 129], "post": 50, "post1": [50, 53, 54, 117, 122], "poster": [2, 8, 13, 16, 20, 28, 31, 32, 33, 40, 41, 42], "potenti": 45, "pp": [67, 72, 79, 82, 86, 90, 92, 93, 97, 99, 100], "pprint": 104, "pr": [47, 117, 122], "practic": [48, 87, 116], "prakhyath": [117, 120], "prati": [61, 131], "pre": [6, 9, 23, 50, 71, 115], "precis": [7, 36, 52, 71, 72, 76, 77, 78, 87, 100], "pred": [72, 76, 77, 78], "predict": [5, 6, 7, 9, 10, 13, 20, 23, 24, 31, 36, 40, 45, 48, 51, 65, 66, 67, 68, 87, 115], "predict_log_proba": [65, 66, 67, 68, 87], "predict_method": 10, "predict_proba": [8, 10, 36, 65, 66, 67, 68, 87, 94, 115], "predictor": 65, "prefer": 50, "prefix": 87, "preprint": 131, "preprocess": [5, 6, 10, 23, 24, 45, 52, 60, 74, 75, 88, 92, 131], "preprocessor": [5, 10], "preprocessor_linear": 5, "preprocessor_tre": 5, "presenc": 115, "present": [5, 10, 41, 44, 56, 61, 62, 63, 72, 76, 77, 78, 83, 117, 127], "preserv": [40, 117, 125], "presid": 8, "previou": [8, 20, 65, 66, 67, 115], "previous": [10, 41, 44, 55], "primarili": [117, 127], "principl": [40, 41], "print": [2, 5, 6, 7, 8, 9, 10, 13, 16, 19, 20, 23, 24, 28, 31, 32, 33, 36, 40, 41, 42, 44, 45, 46, 55, 56, 60, 61, 62, 64, 65, 66, 67, 71, 74, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 115, 117, 126], "prior": [87, 88], "privat": [117, 125, 127], "proba_per_class_": 75, "probabl": [40, 52, 65, 66, 67, 68, 75, 94, 115], "problem": [8, 19, 23, 24, 66, 68, 72, 81, 116, 117, 123, 124, 131], "procedur": [18, 26, 45, 68, 97], "proceed": [95, 131], "process": [5, 26, 39, 45, 47, 56, 65, 66, 67], "processor": [61, 62, 65, 66, 67, 81, 90, 92, 93, 94, 95, 96, 97, 99, 100], "produc": 115, "product": [24, 52, 72], "project": [0, 20, 40], "prompt": [50, 54], "propag": 87, "proper": [68, 117, 128], "properli": [9, 117, 126], "properti": [47, 65, 66, 67, 68, 69, 72, 87, 92, 93, 97, 131], "propo": 75, "proport": [5, 19, 52, 56, 65, 66, 67], "propos": [19, 31, 52, 63, 66, 71, 80, 83, 84, 85, 86, 90, 93, 96, 97, 99, 100], "protein_homo": [46, 63], "prototyp": [55, 105, 108, 116], "prototype_gener": [112, 117, 124], "prototype_select": [112, 117, 124], "provid": [5, 6, 8, 13, 23, 24, 36, 46, 47, 48, 49, 50, 51, 55, 56, 57, 58, 65, 66, 67, 68, 75, 87, 106, 108, 109, 111, 112, 115, 117, 122, 123, 125, 130], "proxim": 52, "prune": 66, "public": 0, "publicli": 47, "publish": 19, "pull": 50, "pure": 66, "purpos": [26, 50, 54, 87], "push": 47, "put": [115, 117, 123], "py": [2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 16, 17, 19, 20, 21, 23, 24, 25, 28, 29, 31, 32, 33, 34, 36, 37, 40, 41, 42, 43, 47, 50, 104, 114, 117, 126, 129], "pyamg": [50, 54], "pyarrow": [50, 54], "pydata": [50, 54, 117, 129], "pydataset": 69, "pypi": 47, "pyplot": [2, 7, 8, 10, 13, 16, 20, 28, 31, 32, 33, 40, 41, 42], "pytest": [50, 54, 104, 117, 124, 125], "python": [0, 2, 5, 6, 7, 8, 9, 10, 13, 16, 19, 20, 23, 24, 26, 28, 31, 32, 33, 36, 40, 41, 42, 47, 50, 51, 52, 54, 117, 120, 122, 125, 126], "python3": 20, "q": 49, "qualit": [31, 40], "qualiti": [8, 52, 66], "quantifi": [76, 77, 78], "r": [19, 28, 32, 41, 42, 48, 52, 61, 65, 66, 67, 68, 72, 75, 94, 117, 122, 131], "radiu": 32, "rafael": [117, 123], "rais": [2, 61, 62, 63, 65, 66, 67, 68, 71, 79, 80, 81, 82, 83, 84, 85, 86, 87, 91, 94, 95, 98, 101, 102, 117, 118, 121, 122, 123, 124, 125, 128], "ram": 131, "ram\u00f3n": 74, "randal": 131, "randint": [7, 31, 32, 56, 85], "randn": [31, 56], "random": [5, 7, 8, 10, 16, 19, 26, 30, 32, 34, 41, 42, 55, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 79, 80, 81, 82, 83, 84, 85, 86, 89, 91, 92, 94, 95, 97, 98, 114, 116, 117, 119, 125, 127, 129, 131], "random_normal_initi": 55, "random_st": [5, 6, 7, 8, 10, 13, 16, 19, 20, 23, 24, 28, 31, 33, 36, 40, 44, 45, 46, 48, 55, 56, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 115, 117, 123, 125, 127], "randomforestclassifi": [5, 20, 48], "randomforestclassifier__class_weight": 5, "randomli": [19, 32, 40, 48, 56, 65, 66, 67, 68, 98, 100, 115], "randomoversampl": [2, 8, 19, 31, 33, 56, 105, 117, 121, 122, 125, 127, 129], "randomst": [7, 31, 32, 41, 42, 55, 56, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 79, 80, 81, 82, 83, 84, 85, 86, 89, 91, 92, 94, 97, 98], "randomundersampl": [2, 5, 9, 19, 40, 45, 48, 55, 60, 65, 66, 68, 69, 70, 89, 94, 95, 100, 105, 115, 117, 121, 122, 125, 127], "rang": [28, 55, 56], "rangel": [72, 131], "rank": 52, "rate": [52, 68], "rather": 115, "ratio": [2, 5, 8, 9, 16, 19, 20, 26, 30, 33, 40, 45, 46, 51, 61, 62, 63, 64, 65, 66, 67, 68, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 91, 94, 95, 98, 102, 117, 122, 124, 125, 126, 127], "ratio_func": 16, "ratio_multipli": [2, 46], "rausch": [117, 126], "ravel": [10, 13, 16, 31, 40], "rbb": 19, "re": [65, 66, 67, 95], "reach": [26, 30, 99, 115], "read": [60, 61, 62, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "read_csv": 10, "readi": [13, 44], "real": [5, 45, 65, 66, 67, 68, 117, 124], "realli": 5, "reason": [45, 75, 104, 131], "rebas": 47, "rec": [6, 9, 23, 71], "recal": [7, 9, 36, 47, 52, 71, 72, 76, 77, 78, 87], "recogn": 8, "recognit": [4, 11, 26, 60, 72, 79, 82, 83, 87, 88, 114, 131], "recommend": [51, 116], "recurr": [117, 124], "red": [52, 56, 75], "reduc": [9, 10, 26, 39, 65, 66, 67, 115], "reduce_mean": 55, "reduce_sum": 55, "reduct": [66, 68], "refactor": [117, 125, 128], "refer": [0, 26, 39, 47, 48, 49, 50, 51, 56, 61, 62, 63, 65, 66, 67, 68, 72, 74, 75, 77, 79, 80, 81, 82, 83, 84, 85, 86, 90, 92, 93, 94, 95, 96, 97, 99, 100, 104, 115, 116], "regard": [1, 5, 10, 13, 26, 44, 56, 61, 62, 63, 64, 115, 116, 117, 125, 127], "regress": [5, 31, 51, 55, 65, 66, 67, 117, 120, 125, 131], "regular": [31, 56], "reject": [4, 11, 26, 55, 60, 87, 88, 114, 115, 117, 120], "reject_sampl": 7, "rel": 66, "relat": [26, 27], "releas": [50, 116, 119, 120, 121, 125, 127, 130], "relev": [65, 66, 67, 68, 87], "reli": [49, 50, 56, 101], "religion": 9, "relu": 10, "remain": [115, 117, 123], "remaind": 10, "remot": 47, "remov": [5, 10, 20, 40, 42, 47, 50, 54, 61, 68, 87, 90, 93, 96, 99, 100, 104, 115, 117, 118, 120, 121, 122, 124, 125, 126, 127, 128, 129], "renam": 47, "renn": [99, 115], "repeat": [31, 33, 40, 56, 90, 92, 93, 99, 116, 117, 119], "repeatededitednearestneighbor": [117, 125], "repeatededitednearestneighbour": [40, 90, 92, 93, 105, 115, 117, 123], "repetit": [99, 115], "replac": [5, 19, 20, 40, 48, 56, 65, 66, 67, 68, 82, 87, 91, 98, 115, 117, 119, 120, 121, 123, 125], "report": [6, 9, 10, 20, 22, 25, 26, 45, 71, 72, 76, 77, 78, 83, 87, 88, 114], "repositori": [46, 47, 49, 63], "repres": [52, 56, 65, 67, 115], "represent": 51, "request": [50, 65, 66, 67, 68, 87], "requir": [45, 56, 65, 66, 67, 68, 70, 74, 86, 87, 88, 104, 115, 117, 121, 124, 125, 129], "resampl": [7, 8, 9, 13, 18, 19, 21, 24, 26, 31, 36, 40, 45, 46, 48, 51, 56, 60, 61, 62, 63, 64, 65, 66, 67, 68, 72, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 114, 117, 124, 125, 127, 129], "research": [0, 80, 83, 84, 85, 86, 131], "reset_index": 10, "reshap": [13, 31, 40, 52, 56, 75, 84], "resolv": [72, 117, 127], "resort": [65, 67], "respect": [2, 19, 56, 68, 96, 102, 115], "rest": [20, 47, 56, 72, 79, 80, 83, 84, 85, 86, 90, 93, 96, 99, 100], "result": [5, 6, 9, 20, 28, 31, 44, 45, 56, 66, 72, 76, 77, 78, 87, 115, 117, 125, 126, 127, 128], "retain": [55, 65, 66, 67, 68, 87, 94, 115], "return": [2, 7, 10, 13, 16, 19, 31, 40, 46, 47, 55, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 117, 123, 124, 125, 129], "return_cov": 87, "return_dist": 41, "return_estim": 45, "return_indic": [117, 125, 127], "return_std": 87, "return_train_scor": 45, "return_x_i": [5, 45, 46, 56, 70, 92, 115], "reus": [8, 19, 52, 65, 66, 67], "revers": 87, "rf": 20, "rf_clf": 5, "ricardo": 131, "richard": 131, "right": [8, 10, 28, 42, 45, 66, 115, 117, 123], "right_impur": 66, "rise": [31, 48], "rm": [2, 61, 62, 65, 66, 67, 68, 79, 80, 81, 82, 83, 84, 85, 86, 91, 94, 95, 98, 102], "rng": [7, 31, 32, 41, 42, 55, 56], "ro": [2, 56, 82], "roc": [8, 10], "roc_auc": [8, 10], "roc_auc_scor": 10, "roc_curv": 8, "roccurvedisplai": 8, "ronaldo": 131, "root": [24, 52, 66, 72], "rose": [56, 82, 117, 129], "rossanigo": [117, 126], "roughli": [65, 131], "roughly_balanced_bag": 19, "round": [65, 66, 67, 71, 90, 115], "rout": [60, 61, 62, 65, 66, 67, 68, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 117, 118, 122], "row": [51, 52, 115], "rst": 47, "ru": [2, 98, 115], "ruff": [50, 54], "rule": [31, 40, 41, 56, 82, 90, 92, 93, 96, 97, 99, 115, 117, 119, 131], "run": [2, 5, 6, 7, 8, 9, 13, 16, 19, 20, 23, 24, 28, 31, 32, 33, 36, 40, 41, 42, 47, 50, 99, 104, 115], "run_optim": 55, "rusboost": [20, 48, 68, 131], "rusboostclassifi": [20, 48, 65, 66, 67, 105, 117, 118, 120, 125, 126, 128], "s10618": 131, "s__p": 87, "safe": [10, 56], "sai": 47, "said": 101, "sake": 45, "salvador": [74, 131], "same": [5, 8, 20, 24, 31, 32, 41, 47, 48, 51, 56, 60, 61, 62, 66, 68, 71, 79, 80, 81, 82, 83, 84, 85, 86, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 115, 117, 123, 125, 126, 128], "samm": [20, 48, 68], "sampl": [0, 2, 4, 5, 7, 9, 11, 12, 14, 16, 18, 19, 24, 34, 35, 42, 43, 45, 46, 47, 48, 51, 52, 55, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 105, 110, 114, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 131], "sample_idx": 41, "sample_indices_": [69, 70, 82, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 117, 125], "sample_weight": [55, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 87, 89], "sampler": [2, 4, 5, 8, 9, 11, 12, 14, 18, 21, 24, 26, 28, 30, 33, 34, 35, 37, 39, 42, 43, 44, 45, 47, 56, 60, 61, 62, 65, 66, 68, 69, 70, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 105, 114, 115, 116, 117, 118, 120, 123, 124, 125, 126, 127, 129], "sampler_": [65, 69], "sampler_weight_batch": [70, 89], "samplermixin": [117, 123, 124], "samplers_": [66, 68], "sampling_strategi": [1, 3, 5, 6, 16, 20, 26, 42, 45, 46, 48, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 79, 80, 81, 82, 83, 84, 85, 86, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 114, 115, 117, 121, 125, 128], "sampling_strategy_": [60, 61, 62, 79, 80, 81, 82, 83, 84, 85, 86, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "sampling_strategy_convert": 102, "sampling_typ": 102, "sass": [50, 54], "satimag": [20, 46, 63], "scale": [5, 10, 92], "scatter": [7, 13, 16, 28, 31, 32, 33, 40, 41, 42], "scene": [46, 63], "scheme": [56, 61, 62, 79, 80, 83, 84, 85, 86, 90, 93, 96, 97, 99, 100], "sci": 9, "scienc": [19, 65, 131], "scientif": 0, "scikit": [0, 5, 7, 26, 31, 35, 40, 45, 47, 48, 49, 51, 52, 54, 63, 65, 66, 86, 87, 91, 104, 113, 115, 117, 118, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130], "scikit_learn_data": 63, "scipi": [50, 51, 54, 117, 126], "score": [5, 7, 19, 28, 36, 45, 65, 66, 67, 68, 72, 74, 76, 77, 78, 87, 107, 117, 123, 127], "score_sampl": 87, "scorer": 28, "script": [2, 5, 6, 7, 8, 9, 13, 16, 19, 20, 23, 24, 28, 31, 32, 33, 36, 40, 41, 42, 117, 124], "sdist": 47, "seaborn": [2, 8, 10, 13, 16, 20, 28, 31, 32, 33, 40, 41, 42, 50, 54, 117, 124], "search": [28, 56, 66, 94], "sebastiani": 131, "sec": 10, "second": [2, 5, 6, 7, 8, 9, 13, 16, 19, 20, 23, 24, 28, 31, 32, 33, 36, 40, 41, 42, 55, 68, 90, 96], "section": [19, 45, 47, 107, 115], "see": [5, 8, 10, 28, 33, 44, 45, 46, 49, 51, 52, 60, 61, 62, 64, 65, 66, 67, 68, 72, 74, 80, 81, 83, 84, 85, 86, 87, 90, 92, 93, 94, 95, 96, 97, 99, 100, 107, 115], "seed": [61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 79, 80, 81, 82, 83, 84, 85, 86, 89, 91, 92, 94, 97, 98], "seen": [9, 31, 56, 60, 61, 62, 65, 66, 67, 68, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 115], "seguro": [4, 11, 26, 55, 69, 114], "seiffert": [68, 131], "sel_x": [117, 123], "select": [2, 16, 19, 31, 32, 39, 43, 45, 46, 48, 49, 56, 60, 69, 72, 81, 82, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 105, 114, 116, 117, 119, 123, 125, 129, 131], "select_dtyp": 45, "selected_idx": 41, "selector": 5, "self": [47, 60, 61, 62, 65, 66, 67, 68, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "semant": 87, "sens": 2, "sensit": [24, 40, 72, 76, 77, 115, 116], "sensitivity_scor": [52, 105], "sensitivity_specificity_support": [52, 105], "sepallength": 46, "sepalwidth": 46, "separ": [13, 72, 87], "septemb": [117, 129], "sequenc": 69, "sequenti": [10, 55, 69, 70, 87], "seri": [8, 19, 51, 117, 127], "serv": 65, "set": [2, 7, 10, 16, 18, 19, 20, 24, 26, 33, 36, 45, 46, 48, 52, 56, 60, 61, 62, 64, 65, 66, 67, 68, 71, 72, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 104, 109, 115, 116, 117, 120, 121, 125, 126, 131], "set_config": [65, 66, 67, 68, 87, 88], "set_context": [2, 8, 13, 16, 20, 28, 31, 32, 33, 40, 41, 42], "set_fit_request": [65, 66, 67, 68], "set_index": 10, "set_major_formatt": 10, "set_output": 87, "set_param": [5, 31, 60, 61, 62, 65, 66, 67, 68, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "set_score_request": [65, 66, 67, 68, 87], "set_titl": [2, 8, 13, 16, 20, 31, 40, 41, 42], "set_xlabel": [28, 33, 41, 42], "set_xlim": [8, 28, 32, 41, 42], "set_xtick": 41, "set_ylabel": [28, 33, 41, 42], "set_ylim": [8, 28, 32, 41, 42], "set_ytick": 41, "setosa": 46, "setup": [47, 50, 117, 129], "sever": [8, 19, 31, 48, 61, 87, 90, 99, 101, 131], "sgd": [55, 69, 70], "shahriar": [117, 127], "shape": [7, 10, 13, 31, 40, 41, 42, 46, 55, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 115, 117, 123], "shihab": [117, 127], "shohei": 131, "short": 41, "shorthand": 88, "should": [10, 24, 31, 36, 40, 45, 47, 52, 56, 60, 61, 62, 65, 66, 67, 68, 69, 70, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 103, 115, 117, 122, 125], "show": [2, 5, 7, 8, 9, 10, 13, 16, 19, 20, 23, 28, 31, 32, 33, 40, 41, 42, 44, 45, 48, 56, 63, 64, 115, 117, 126], "shown": [20, 56], "shrink": 68, "shrinkag": [26, 30, 31, 34, 56, 82, 114, 117, 121, 129], "shrinkage_": 82, "shuffl": [16, 63], "shuo": 131, "shutao": [79, 131], "sick": [46, 63], "sick_euthyroid": [46, 63], "side": [72, 97, 116, 117, 119, 131], "siev": 40, "sigkdd": [61, 131], "sigmoid": 10, "sign": 45, "signific": 9, "significantli": [20, 51], "silvig": [117, 125], "similar": [5, 23, 45, 52, 65, 79, 115], "similarli": [20, 46, 48, 56, 117, 124, 127, 128], "simpl": [60, 61, 62, 64, 65, 66, 67, 68, 75, 79, 80, 81, 82, 83, 84, 85, 86, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "simpleimput": [5, 10], "simplic": 45, "simplifi": [117, 125], "simul": 85, "sinc": [2, 41, 42, 65, 66, 67, 68, 74, 82, 96, 115, 117, 121, 128], "singl": [5, 52, 55, 56, 66, 81, 117, 123], "site": [20, 63], "size": [7, 19, 31, 32, 55, 56, 85, 86, 90, 92, 93, 95, 96, 97, 99], "size_ngh": [117, 123], "skf": 10, "skiptest": [117, 127], "sklearn": [2, 5, 6, 7, 8, 9, 10, 13, 16, 19, 20, 23, 24, 28, 31, 33, 36, 40, 41, 44, 45, 46, 47, 48, 49, 52, 55, 56, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 73, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 115, 117, 123, 126, 127, 128], "skvhn09": [48, 131], "slightli": [5, 9, 40, 56], "slower": [20, 65, 66, 67], "sm": [80, 81, 83, 85, 86], "small": [31, 33, 65, 66, 82, 96, 131], "smaller": [41, 52, 66], "smallest": [40, 41, 115], "smc": 131, "sme": 61, "smgc14": [115, 131], "smith": [94, 131], "smooth": [31, 33, 56, 82, 117, 129], "smote": [0, 8, 12, 13, 23, 24, 26, 28, 30, 34, 36, 44, 61, 62, 65, 79, 80, 81, 82, 84, 85, 86, 87, 105, 114, 116, 117, 119, 120, 123, 125, 126, 127, 131], "smote_": [61, 62], "smote__k_neighbor": 28, "smote_bag": 19, "smote_enn": 44, "smote_nc": [31, 56, 117, 125], "smote_tomek": 44, "smoteenn": [13, 44, 62, 105, 117, 123, 124, 126], "smoten": [31, 56, 79, 81, 82, 83, 85, 86, 105, 117, 120, 121, 129], "smotenc": [31, 56, 79, 80, 81, 82, 83, 84, 86, 105, 117, 120, 121, 122, 125, 126, 127, 128], "smotetomek": [13, 44, 61, 105, 117, 123, 124, 126], "smt": [62, 87], "sn": [2, 8, 10, 13, 16, 20, 28, 31, 32, 33, 40, 41, 42], "so": [60, 61, 62, 65, 66, 67, 68, 75, 79, 80, 81, 82, 83, 84, 85, 86, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 117, 123], "soft": [86, 91], "softmax": [55, 69, 70], "solar_flare_m0": [46, 63], "sole": 56, "solut": [65, 66, 67], "solv": [44, 117, 123], "some": [1, 5, 6, 7, 8, 9, 12, 13, 24, 26, 31, 32, 40, 41, 42, 45, 49, 50, 52, 55, 56, 60, 65, 66, 67, 68, 87, 88, 101, 108, 115, 117, 123, 124, 125, 127, 128], "someth": [5, 56], "sometim": 101, "sort": [31, 44, 46, 56, 60, 65, 67, 77, 115, 117, 125], "sourc": [2, 5, 6, 7, 8, 9, 10, 13, 16, 19, 20, 23, 24, 26, 28, 31, 32, 33, 36, 40, 41, 42, 47, 49, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104], "space": [9, 13, 31, 40, 44, 87, 115], "spars": [47, 60, 61, 62, 65, 66, 67, 68, 71, 79, 80, 81, 82, 83, 84, 85, 86, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 115, 117, 121, 122, 124, 125, 126, 127], "sparsiti": [69, 70, 89], "spe": [6, 9, 23, 71], "special": [65, 67, 68], "specif": [22, 23, 25, 26, 31, 40, 41, 46, 48, 55, 56, 60, 64, 66, 71, 72, 74, 76, 77, 78, 79, 81, 82, 83, 85, 86, 87, 88, 104, 114, 115, 116, 117, 122, 123, 125], "specifc": 76, "specifi": [2, 16, 36, 40, 61, 62, 63, 65, 66, 67, 68, 72, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 104, 115, 117, 121, 125], "specificity_scor": [52, 105], "spectromet": [46, 63], "speed": [117, 127], "sphinx": [2, 5, 6, 7, 8, 9, 10, 13, 16, 19, 20, 23, 24, 26, 28, 31, 32, 33, 36, 40, 41, 42, 50, 54, 117, 129], "sphinxcontrib": [50, 54], "sphinxext": [50, 54], "spirit": 19, "split": [8, 9, 10, 20, 23, 24, 36, 45, 66], "springer": [96, 131], "spuriou": [117, 121], "sqrt": [32, 66, 117, 122], "squar": [8, 24, 72, 74], "stabl": [47, 117, 119], "stack": [117, 126], "stage": [68, 87, 117, 125], "staged_decision_funct": 68, "staged_predict": 68, "staged_predict_proba": 68, "staged_scor": 68, "stan": 131, "standard": [5, 10, 85, 117, 122, 125, 128], "standardscal": [5, 6, 10, 23, 24, 88], "stanfil": [75, 131], "start": [0, 41, 49, 95, 115], "start_tim": 10, "state": [45, 63, 71, 115, 117, 125, 127], "stateless": 60, "statement": 116, "static": 100, "statist": [6, 19, 45, 56, 60, 61, 62, 65, 75, 79, 80, 81, 82, 83, 84, 85, 86, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 117, 122, 131], "statu": 47, "std": [19, 28, 45], "stddev": 55, "step": [32, 36, 40, 41, 45, 47, 55, 65, 70, 86, 87, 88, 89, 115, 117, 124], "stephan": [117, 126], "steps_per_epoch": [55, 70, 89], "still": [5, 47, 117, 125], "stop": [66, 68, 90, 99, 115, 117, 123], "store": [5, 45, 63, 65, 66, 67], "str": [60, 61, 62, 63, 65, 66, 67, 68, 71, 72, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 117, 121], "strategi": [10, 31, 56, 61, 62, 64, 69, 70, 72, 89, 90, 91, 92, 93, 96, 99, 115, 117, 120, 126, 131], "stratifi": [20, 24, 36, 45], "stratifiedkfold": [8, 10], "strengthen": [117, 125], "string": [2, 52, 56, 60, 61, 62, 65, 66, 67, 68, 71, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 117, 120, 124, 125, 129], "strongli": 56, "structur": [51, 71], "studi": [5, 45, 61, 62, 95, 131], "stump": [117, 126], "style": [117, 125], "sub": [56, 65, 66, 67, 68, 87], "subclass": 115, "subdivid": 40, "subfold": 63, "submodul": [52, 112, 117, 124, 126], "subobject": [60, 61, 62, 65, 66, 67, 68, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "subplot": [2, 8, 13, 16, 20, 28, 31, 32, 33, 40, 41, 42], "subsequ": [5, 52, 66, 68, 75], "subset": [9, 16, 48, 59, 65, 66, 67, 68, 95, 115, 117, 125], "subspac": 65, "substitut": [72, 117, 120], "subtre": 66, "success": 115, "suit": [5, 117, 122], "suitabl": 115, "sum": [41, 66, 81], "sum_": [52, 75], "summar": [9, 52], "summari": [9, 71, 116], "sup": [6, 9, 23, 52, 71], "superimpos": 31, "support": [7, 31, 36, 47, 49, 51, 52, 56, 60, 61, 62, 65, 66, 67, 68, 72, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 115, 117, 119, 120, 121, 122, 123, 124, 125, 126], "support_": 86, "suppos": 66, "suptitl": [8, 28, 31, 42], "sure": [50, 117, 120], "surpris": 87, "survei": 5, "svc": 86, "svm": [31, 56, 79, 80, 81, 82, 83, 84, 85, 86, 117, 119, 125], "svm_estim": [86, 117, 125, 127], "svm_estimator_": 86, "svmsmote": [31, 56, 79, 80, 81, 82, 83, 84, 85, 105, 117, 120, 122, 125, 126, 127], "sw86": [52, 131], "switch": 47, "symlink": 47, "symposium": [19, 65, 131], "synchron": [47, 117, 127], "synthes": 115, "synthet": [19, 56, 79, 80, 81, 83, 84, 85, 86, 117, 119, 125, 131], "system": [67, 68, 74, 90, 93, 99, 100, 117, 126, 131], "systemat": 46, "s\u00e1nchez": [72, 74], "t": [65, 66, 67, 68, 96, 115], "tabl": [50, 52, 63], "tackl": 0, "tag": [47, 117, 122], "taghi": 131, "takahashi": [19, 65, 131], "take": [2, 5, 8, 32, 48, 56, 60, 61, 62, 64, 65, 66, 67, 68, 72, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 104, 115, 117, 121, 122, 124, 127], "taken": [47, 66, 72, 117, 121], "talk": 9, "target": [2, 6, 8, 9, 10, 20, 40, 46, 47, 51, 52, 55, 56, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 115, 117, 123, 125, 127, 129], "target_nam": [71, 117, 121], "target_stat": [2, 16, 46], "targets_resampl": 51, "task": [4, 11, 26, 60, 79, 82, 83, 87, 88, 114], "techniqu": [56, 80, 83, 84, 85, 86, 116, 117, 119, 123, 131], "templat": [66, 117, 126, 129], "ten": 60, "tend": [44, 51, 81], "tensorflow": [10, 69, 70, 89, 105, 116, 117, 125, 126], "term": [10, 20, 45], "termin": 68, "test": [5, 6, 7, 8, 9, 10, 20, 23, 24, 45, 54, 65, 66, 67, 68, 104, 105, 117, 122, 125, 128, 129], "test_accuraci": 5, "test_balanced_accuraci": 5, "test_check_estim": 104, "test_scor": [19, 28, 45], "test_scores_mean": 28, "test_scores_std": 28, "test_sklearn_compatible_estim": 104, "tested_neg": 92, "tested_posit": 92, "testing_data": 10, "text": [4, 11, 26, 71, 87, 88, 98, 114, 115], "tf": [9, 55], "tf_version": 10, "tfidfvector": 9, "th": 66, "than": [5, 8, 9, 13, 20, 24, 33, 40, 44, 45, 52, 56, 65, 66, 67, 68, 87, 88, 90, 93, 96, 99, 115, 117, 121, 128], "thei": [20, 40, 42, 47, 56, 65, 66, 67, 87, 115, 117, 122], "them": [5, 8, 56, 73, 87, 88, 104, 115], "theme": [50, 54, 117, 129], "theori": [92, 131], "therefor": [9, 13, 31, 33, 41, 45, 48, 51, 52, 56, 61, 62, 65, 66, 67, 68, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 94, 95, 98, 115, 117, 123, 127], "theta": 96, "thi": [2, 5, 7, 8, 9, 10, 13, 19, 20, 28, 31, 32, 33, 40, 41, 42, 44, 45, 46, 47, 48, 50, 51, 52, 55, 56, 60, 61, 62, 63, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 115, 117, 121, 122, 125, 126, 127, 129, 130], "third": 115, "those": [6, 31, 44, 52, 56, 115], "threadpoolctl": [50, 54], "three": [52, 56], "threshold": [8, 81, 94, 96, 116, 117, 119], "threshold_clean": [96, 117, 122], "through": [8, 46, 50, 66, 87, 88, 115], "throughout": 115, "thu": [5, 65, 66, 67, 90, 93, 96, 99, 117, 125], "thyroid_sick": [46, 63], "tie": [117, 125], "tight_layout": [2, 8, 13, 16, 20, 28, 31, 32, 33, 40, 41, 42], "time": [2, 5, 6, 7, 8, 9, 13, 16, 19, 20, 23, 24, 28, 31, 32, 33, 36, 40, 41, 42, 45, 56, 65, 87, 88, 90, 99, 102, 104, 115], "timeit": 10, "titl": [0, 7, 10, 31, 33, 40, 42, 47], "tl": [2, 100], "tn": [77, 78], "to_categor": [55, 69, 70], "toctre": [50, 54], "togeth": [0, 56, 87], "toi": [19, 31, 33, 40, 42, 64, 115], "tom76a": [115, 131], "tom76b": [115, 131], "tomek": [12, 13, 26, 39, 43, 44, 61, 62, 90, 99, 100, 114, 116, 117, 119, 131], "tomek_": 62, "tomeklink": [2, 40, 42, 62, 105, 115], "toni": [94, 131], "too": [45, 115], "tool": [45, 49, 108, 116, 117, 128], "toolbox": [0, 26, 105], "top": [10, 47], "topic": [4, 11, 26, 71, 87, 88, 98, 114], "torelli": [82, 131], "total": [2, 3, 5, 6, 7, 8, 9, 11, 13, 14, 16, 17, 19, 20, 21, 23, 24, 25, 28, 29, 31, 32, 33, 34, 36, 37, 38, 40, 41, 42, 43, 52, 66, 68, 71, 72, 76, 77, 78, 114, 117, 122], "toward": [5, 31, 45, 75, 131], "towncrier": [50, 54], "tp": [76, 77], "tpr": 8, "track": 100, "trade": 68, "tradition": 72, "train": [6, 7, 8, 9, 10, 18, 20, 23, 24, 26, 45, 48, 51, 55, 56, 61, 62, 65, 66, 67, 68, 69, 70, 72, 75, 82, 87, 89, 97, 115, 117, 125, 131], "train_idx": 10, "train_scor": 28, "train_scores_mean": 28, "train_scores_std": 28, "train_test_split": [6, 20, 23, 24, 36, 45, 48, 65, 67, 87], "training_data": 10, "training_gener": [10, 55, 69, 70], "tran": 131, "transact": [67, 68, 90, 92, 93, 99, 100, 131], "transform": [10, 24, 36, 52, 60, 61, 62, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 110], "transform_input": [87, 88], "transpar": 33, "transpos": [41, 42], "trap": 45, "tre": 0, "treat": 56, "tree": [5, 28, 65, 66, 68, 104, 116, 117, 125, 126], "tri": [28, 52, 72], "trigger": [87, 88], "trivial": 31, "true": [2, 5, 8, 10, 16, 19, 20, 24, 40, 45, 46, 47, 48, 52, 55, 56, 60, 61, 62, 63, 65, 66, 67, 68, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 103, 104, 115, 117, 121], "truth": [71, 72, 73, 76, 77, 78], "try": 63, "ts2095": [117, 122], "tt": 87, "tune": 33, "tupl": [32, 63, 70, 77, 87, 89, 115], "turn": [46, 55, 60, 64, 65, 117, 124], "twice": 9, "twine": 47, "two": [8, 10, 13, 19, 24, 31, 36, 40, 44, 45, 47, 48, 52, 56, 75, 100, 115, 117, 123, 131], "type": [5, 47, 51, 55, 56, 60, 72, 75, 76, 77, 78, 80, 88, 102, 103, 115, 117, 119, 120, 121, 123, 124, 125, 129], "typic": [45, 68, 115], "u": [2, 45, 65, 66, 67, 68, 91, 94, 95, 98, 102, 115], "uci": [20, 46, 63], "unbalanc": [95, 131], "unbalanceddataset": [117, 123], "uncertainti": 87, "unchang": [65, 66, 67, 68, 81, 87], "under": [0, 2, 4, 5, 10, 11, 12, 14, 18, 19, 20, 35, 43, 47, 48, 56, 59, 60, 61, 62, 64, 65, 66, 67, 68, 71, 83, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 105, 114, 116, 117, 119, 123, 124, 125, 126], "under_sampl": [2, 5, 6, 9, 19, 36, 40, 42, 45, 55, 60, 69, 70, 112, 115, 117, 123, 124, 125, 127, 128, 129], "underli": [13, 115], "undersampl": [44, 67, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 116, 131], "unform": 7, "uniform": [7, 32], "union": 115, "uniqu": [41, 66, 68, 75, 115], "unit": [50, 117, 124], "univers": [63, 65, 66, 131], "unknown_valu": 5, "unless": [61, 62, 65, 66, 67, 81, 90, 92, 93, 94, 95, 96, 97, 99, 100], "unlik": [51, 85], "unlimit": 66, "unlink": 47, "unlock": [117, 129], "unnecessari": 51, "unrecogn": 72, "unstack": 10, "until": [66, 115], "unus": [117, 128], "unvalid": [117, 120], "unweight": [72, 76, 77, 78], "up": [56, 66, 87, 88, 115, 117, 122, 127], "updat": [47, 60, 61, 62, 65, 66, 67, 68, 69, 70, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 117, 126, 127], "upgrad": [117, 125], "upload": [47, 117, 124], "upper": 41, "upstream": [47, 51], "url": [0, 131], "us": [0, 1, 3, 4, 6, 8, 9, 10, 13, 16, 21, 22, 23, 24, 28, 33, 34, 35, 36, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55, 56, 70, 75, 77, 89, 102, 104, 105, 114, 116, 117, 118, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131], "us_crim": [46, 63], "usa": 131, "usag": [2, 5, 6, 7, 8, 9, 10, 13, 16, 19, 20, 23, 24, 28, 31, 32, 33, 35, 37, 40, 41, 42, 83, 87, 88, 93, 114, 117, 126, 127], "use_bia": 10, "use_encoded_valu": 5, "user": [49, 60, 61, 62, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 107, 115, 117, 119, 121, 124, 125], "userwarn": 40, "usual": [7, 13, 20, 51, 52, 75], "util": [10, 55, 65, 66, 67, 68, 69, 70, 87, 101, 102, 103, 104, 105, 106, 110, 111, 116, 117, 124, 126, 127, 129], "v": [46, 50, 56, 63, 72, 79, 80, 83, 84, 85, 86, 90, 92, 93, 96, 97, 99, 100, 103, 117, 125, 131], "v0": 47, "v18": 0, "valid": [5, 8, 10, 20, 26, 27, 29, 45, 55, 60, 61, 62, 65, 66, 67, 79, 80, 81, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 102, 105, 114, 115, 116, 117, 120, 123, 124, 127, 129], "valid_idx": 10, "validation_curv": 28, "valu": [2, 10, 28, 33, 45, 46, 56, 60, 61, 62, 64, 65, 66, 67, 68, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 116, 117, 122, 127, 128, 129], "value_count": [2, 5, 8, 19], "valuedifferencemetr": [52, 56, 105, 117, 129], "valueerror": 66, "van": [68, 131], "vanilla": 20, "vari": [7, 28, 51, 90, 93, 99, 115], "variabl": [10, 55], "variant": [31, 79, 80, 81, 82, 83, 84, 85, 86, 115, 116], "variat": 115, "varieti": 19, "variou": [65, 87, 92, 113], "vdm": [52, 56, 75], "vector": [9, 31, 52, 56, 75, 100, 117, 119, 122, 127], "verbos": [10, 55, 63, 64, 65, 66, 67, 69, 70, 87, 88], "veri": 45, "verifi": 5, "versicolor": 46, "version": [5, 6, 20, 31, 40, 46, 47, 49, 50, 54, 56, 60, 61, 62, 63, 65, 66, 67, 68, 69, 71, 73, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 115], "vgood": [46, 63], "via": [45, 51, 56, 87, 88], "vicent": [74, 131], "victor": 0, "virginica": 46, "viridi": 16, "visual": 64, "vol": [67, 90, 92, 93, 97, 99, 100], "volum": [0, 131], "vote": [65, 66, 67, 91, 96, 117, 129], "voting_": 91, "vstack": [7, 42, 115], "w": [8, 65, 66, 67, 68, 80, 83, 84, 85, 86, 131], "w7a": [46, 63], "wa": [5, 10, 47, 65, 66, 75, 87, 103, 104, 117, 120, 121, 122, 123, 125, 126, 127, 128, 129], "wai": [5, 40, 41, 45, 56, 115, 117, 122], "waltz": [75, 131], "wampfler": [117, 123], "wang": [19, 65, 131], "want": [10, 19, 48, 50, 90, 93, 99], "warm_start": [65, 66, 67], "warn": [20, 40, 47, 66, 68, 71, 77, 117, 118, 121, 123, 125, 126, 129], "warn_for": 77, "we": [0, 2, 5, 6, 7, 8, 9, 10, 13, 16, 19, 20, 24, 28, 31, 33, 36, 41, 42, 44, 45, 47, 50, 51, 52, 55, 56, 60, 81, 104, 115, 117, 122], "weak": [117, 126], "webpag": [46, 63], "websit": [47, 117, 129], "weight": [5, 7, 13, 19, 23, 24, 28, 31, 33, 36, 40, 44, 48, 51, 52, 55, 56, 60, 61, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 82, 83, 85, 86, 87, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 115], "weights_arr": 31, "well": [0, 5, 13, 45, 51, 52, 56, 60, 61, 62, 65, 66, 67, 68, 70, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 115, 117, 120, 122, 125], "wen": [80, 131], "were": [65, 66, 67, 115, 117, 124, 125], "what": 42, "whats_new": 47, "wheel": 47, "when": [2, 7, 13, 24, 31, 33, 36, 45, 47, 48, 49, 52, 56, 60, 61, 62, 64, 65, 66, 67, 68, 69, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 115, 117, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131], "whenev": [52, 117, 125], "where": [2, 8, 36, 46, 52, 56, 61, 62, 65, 66, 67, 68, 72, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 91, 94, 95, 96, 98, 102, 104, 115, 117, 120, 121, 122, 125, 126, 129], "wherea": 115, "whether": [52, 60, 63, 65, 66, 67, 68, 96, 98, 100, 104], "whi": 10, "which": [2, 4, 5, 6, 7, 10, 13, 20, 23, 24, 26, 28, 31, 32, 36, 40, 41, 45, 46, 47, 48, 52, 55, 56, 57, 60, 61, 62, 65, 66, 67, 68, 69, 70, 74, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 115, 117, 123, 125, 126, 128], "whichev": 90, "while": [5, 10, 12, 19, 26, 31, 45, 52, 56, 66, 72, 76, 77, 78, 87, 88, 115], "whole": [65, 66, 67, 117, 122], "why": 104, "wide": 20, "wikipedia": 77, "wil72": [115, 131], "wild": 8, "wilson": [93, 131], "wine": [46, 63], "wine_qu": [46, 63], "wise": [52, 72], "wish": [47, 50], "within": [5, 19, 47, 55, 87, 88, 115, 117, 129], "without": [7, 19, 31, 45, 56, 82, 90, 98, 117, 128], "wm97": [52, 131], "wob": [62, 131], "word": [4, 26, 115], "work": [2, 5, 36, 46, 52, 56, 60, 61, 62, 65, 66, 67, 68, 72, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 117, 120, 122, 128, 130], "workshop": [95, 131], "world": [79, 131], "wors": [20, 45], "worst": [72, 76, 78], "would": [0, 36, 45, 46, 56, 66, 115], "wrap": [10, 52, 74], "wrapper": 10, "write": 47, "wrong": [45, 117, 124, 126, 127], "wrongdo": 45, "wrongli": [56, 117, 125], "wu": [67, 131], "www": 10, "wy09": [48, 131], "x": [2, 6, 7, 8, 10, 13, 16, 19, 20, 23, 24, 28, 31, 33, 36, 40, 44, 45, 47, 48, 52, 55, 56, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 115, 117, 125, 126, 127], "x0": [60, 61, 62, 79, 80, 81, 82, 83, 84, 85, 86, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "x1": [60, 61, 62, 79, 80, 81, 82, 83, 84, 85, 86, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "x_": [32, 52, 56, 75], "x_1": [32, 41, 42], "x_2": [32, 41, 42], "x_batch": [55, 70, 89], "x_encod": [52, 75], "x_hetero": [56, 115], "x_i": [32, 56], "x_imb": 46, "x_inlier": 7, "x_leav": 66, "x_left_out": 45, "x_local_test": 10, "x_local_train": 10, "x_major": [41, 42], "x_max": [13, 31, 40], "x_min": [13, 31, 40], "x_minor": [41, 42], "x_re": [2, 13, 31, 33, 40, 42, 55, 56, 60, 61, 62, 64, 79, 80, 81, 82, 83, 84, 85, 86, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "x_reg": 55, "x_resampl": [16, 31, 44, 45, 56, 60, 61, 62, 64, 79, 80, 81, 82, 83, 84, 85, 86, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 115], "x_resampled_nm1": 115, "x_test": [6, 7, 9, 10, 20, 23, 24, 36, 48, 52, 65, 67, 75, 87], "x_test_encod": [52, 75], "x_train": [6, 7, 9, 10, 20, 23, 24, 36, 48, 65, 67, 87], "xaxi": 10, "xfail": 104, "xin": 131, "xlabel": [10, 32], "xt": 87, "xu": 131, "xx": [13, 31, 40], "xxx": [56, 115], "xytext": 32, "y": [2, 5, 6, 7, 8, 10, 13, 16, 19, 20, 23, 24, 28, 31, 32, 33, 36, 40, 44, 45, 46, 48, 52, 55, 56, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 115, 117, 125, 126, 127, 128], "y_": [52, 72, 75, 76, 77, 78], "y_2": 32, "y_adult": [56, 115], "y_batch": [55, 70, 89], "y_gen": 32, "y_hat": 87, "y_hetero": [56, 115], "y_imb": 46, "y_inlier": 7, "y_left_out": 45, "y_local_test": 10, "y_local_train": 10, "y_log_proba": 87, "y_max": [13, 31, 40], "y_min": [13, 31, 40], "y_pred": [7, 9, 10, 24, 36, 47, 48, 55, 65, 67, 71, 72, 73, 74, 76, 77, 78, 87, 117, 125], "y_pred_bal": 23, "y_pred_bbc": 20, "y_pred_bc": 20, "y_pred_brf": 20, "y_pred_eec": 20, "y_pred_rf": 20, "y_pred_rusboost": 20, "y_pred_tre": 20, "y_proba": [8, 87], "y_re": [2, 5, 13, 31, 33, 40, 42, 55, 56, 60, 61, 62, 64, 79, 80, 81, 82, 83, 84, 85, 86, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "y_reg": 55, "y_resampl": [16, 31, 44, 45, 46, 56, 60, 61, 62, 64, 79, 80, 81, 82, 83, 84, 85, 86, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 115], "y_score": [74, 87], "y_test": [6, 7, 9, 10, 20, 23, 24, 36, 48, 65, 67, 87], "y_train": [6, 7, 9, 10, 20, 23, 24, 36, 48, 65, 67, 87], "y_true": [47, 55, 71, 72, 73, 74, 76, 77, 78, 117, 125], "y_true_balanc": 73, "y_true_imbalanc": 73, "yang": [79, 131], "yao": [19, 65, 131], "year": [0, 19], "yeast_me2": [46, 63], "yeast_ml8": [46, 63], "yellow": 115, "yet": 68, "yield": [10, 55, 68], "ying": 131, "ylabel": [10, 32], "you": [0, 9, 10, 28, 47, 48, 50, 55, 56, 60, 61, 62, 65, 66, 67, 68, 74, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 115], "your": [47, 50, 55, 67, 105, 115], "yt": 87, "yuan": [80, 131], "yutaka": 131, "yy": [13, 31, 40], "yyi": [56, 115], "z": [13, 31, 32, 40, 46, 63, 67, 68, 115], "z_2": 32, "z_gen": 32, "zejin": 63, "zenodo": 63, "zero": [7, 66, 71, 72], "zero_divis": 71, "zero_on": 47, "zero_one_loss": 47, "zerolfx": [117, 128], "zhang": [95, 131], "zhi": 131, "zhou": [67, 131], "zi": [32, 56], "zip": [2, 5, 6, 7, 8, 9, 10, 13, 16, 19, 20, 23, 24, 26, 28, 31, 32, 33, 36, 40, 41, 42, 55], "zzz": [56, 115], "\u00e1": 131, "\u00e9": 131, "\u00ed": 131, "\u00f3": 131}, "titles": ["About us", "Examples showing API imbalanced-learn usage", "How to use <code class=\"docutils literal notranslate\"><span class=\"pre\">sampling_strategy</span></code> in imbalanced-learn", "Computation times", "Examples based on real world datasets", "Fitting model on imbalanced datasets and how to fight bias", "Multiclass classification with under-sampling", "Customized sampler to implement an outlier rejections estimator", "Benchmark over-sampling methods in a face recognition task", "Example of topic classification in text documents", "Porto Seguro: balancing samples in mini-batches with Keras", "Computation times", "Examples using combine class methods", "Compare sampler combining over- and under-sampling", "Computation times", "Dataset examples", "Create an imbalanced dataset", "Computation times", "Example using ensemble class methods", "Bagging classifiers using sampler", "Compare ensemble classifiers using resampling", "Computation times", "Evaluation examples", "Evaluate classification by compiling a report", "Metrics specific to imbalanced learning", "Computation times", "Examples", "Model Selection", "Plotting Validation Curves", "Computation times", "Example using over-sampling class methods", "Compare over-sampling samplers", "Sample generator used in SMOTE-like samplers", "Effect of the shrinkage factor in random over-sampling", "Computation times", "Pipeline examples", "Usage of pipeline embedding samplers", "Computation times", "Computation times", "Example using under-sampling class methods", "Compare under-sampling samplers", "Sample selection in NearMiss", "Illustration of the definition of a Tomek link", "Computation times", "<span class=\"section-number\">4. </span>Combination of over- and under-sampling", "<span class=\"section-number\">8. </span>Common pitfalls and recommended practices", "<span class=\"section-number\">9. </span>Dataset loading utilities", "<span class=\"section-number\">10. </span>Developer guideline", "<span class=\"section-number\">5. </span>Ensemble of samplers", "imbalanced-learn documentation", "Getting Started", "<span class=\"section-number\">1. </span>Introduction", "<span class=\"section-number\">7. </span>Metrics", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">6. </span>Miscellaneous samplers", "<span class=\"section-number\">2. </span>Over-sampling", "Combination of over- and under-sampling methods", "Datasets", "Ensemble methods", "FunctionSampler", "SMOTEENN", "SMOTETomek", "fetch_datasets", "make_imbalance", "BalancedBaggingClassifier", "BalancedRandomForestClassifier", "EasyEnsembleClassifier", "RUSBoostClassifier", "BalancedBatchGenerator", "balanced_batch_generator", "classification_report_imbalanced", "geometric_mean_score", "macro_averaged_mean_absolute_error", "make_index_balanced_accuracy", "ValueDifferenceMetric", "sensitivity_score", "sensitivity_specificity_support", "specificity_score", "ADASYN", "BorderlineSMOTE", "KMeansSMOTE", "RandomOverSampler", "SMOTE", "SMOTEN", "SMOTENC", "SVMSMOTE", "Pipeline", "make_pipeline", "balanced_batch_generator", "AllKNN", "ClusterCentroids", "CondensedNearestNeighbour", "EditedNearestNeighbours", "InstanceHardnessThreshold", "NearMiss", "NeighbourhoodCleaningRule", "OneSidedSelection", "RandomUnderSampler", "RepeatedEditedNearestNeighbours", "TomekLinks", "check_neighbors_object", "check_sampling_strategy", "check_target_type", "parametrize_with_checks", "API reference", "Batch generator for Keras", "Metrics", "Miscellaneous", "Over-sampling methods", "Pipeline", "Batch generator for TensorFlow", "Under-sampling methods", "Utilities", "Computation times", "<span class=\"section-number\">3. </span>Under-sampling", "User guide: contents", "Release history", "Version 0.13.0", "Version 0.1", "Version 0.10.1", "Version 0.11.0", "Version 0.12.4", "Version 0.2", "Version 0.3", "Version 0.4.2", "Version 0.5.0", "Version 0.6.2", "Version 0.7.0", "Version 0.8.1", "Version 0.9.1", "<span class=\"section-number\">11. </span>References"], "titleterms": {"": [51, 115], "0": [117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130], "1": [41, 117, 119, 120, 122, 127, 129, 130], "10": [117, 120], "11": [117, 121], "12": [117, 122], "13": 118, "2": [41, 117, 122, 123, 125, 127], "3": [41, 117, 122, 124], "4": [117, 122, 125], "5": [117, 126], "6": [117, 127], "7": [117, 128], "8": [117, 129], "9": [117, 130], "A": 56, "One": 115, "The": 9, "about": 0, "absolut": 52, "adasyn": [31, 56, 79], "addit": [52, 115], "advanc": 31, "algorithm": [2, 5, 59, 109], "all": 115, "allknn": 90, "an": [2, 5, 7, 16, 19, 20], "api": [1, 26, 51, 105, 117, 119, 123, 124, 125], "approach": 8, "avail": 50, "averag": 52, "bag": [19, 20, 48, 59], "balanc": [5, 9, 10, 19, 31, 48], "balanced_batch_gener": [70, 89], "balancedbaggingclassifi": 65, "balancedbatchgener": 69, "balancedrandomforestclassifi": 66, "base": [4, 26], "baselin": 5, "basic": 109, "batch": [10, 106, 111], "befor": 9, "benchmark": [8, 46], "bia": 5, "boost": [20, 48, 59], "borderlinesmot": 80, "bug": [47, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129], "callabl": 2, "chang": [117, 123, 124, 126, 127, 128], "changelog": [117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130], "check": 113, "check_neighbors_object": 101, "check_sampling_strategi": 102, "check_target_typ": 103, "cite": 0, "class": [9, 12, 18, 26, 30, 39, 56], "class_weight": 5, "classif": [6, 9, 10, 20, 23, 52, 107], "classifi": [5, 19, 20, 48], "classification_report_imbalanc": 71, "clean": 115, "clustercentroid": 91, "combin": [12, 13, 26, 44, 57, 61, 62], "common": 45, "compar": [8, 13, 20, 31, 40], "compat": [113, 117, 118, 120, 121, 122], "compil": 23, "comput": [3, 10, 11, 14, 17, 21, 25, 29, 34, 37, 38, 43, 114], "conda": 50, "condens": 115, "condensednearestneighbour": 92, "contribut": 50, "contributor": 0, "control": 115, "coverag": 50, "creat": [2, 10, 16], "curv": 28, "custom": [7, 55], "data": [7, 9, 10, 31, 45, 51, 115], "dataset": [2, 4, 5, 8, 13, 15, 16, 19, 20, 26, 46, 52, 58, 63, 64], "decis": 20, "defin": 10, "definit": [5, 42], "deprec": [47, 117, 118, 120, 121, 122, 124, 125, 127, 128, 129], "develop": [0, 47], "dict": 2, "differ": 52, "document": [9, 49, 117, 123, 124, 125, 126], "dummi": 5, "dure": 5, "easyensembleclassifi": 67, "edit": 115, "editednearestneighbour": 93, "effect": 33, "embed": 36, "enhanc": [117, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129], "ensembl": [18, 20, 26, 48, 59, 65, 66, 67, 68], "error": 52, "estim": 7, "evalu": [22, 23, 26], "exactli": 19, "exampl": [1, 4, 9, 12, 15, 18, 22, 26, 30, 35, 39, 44, 48, 56, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 74, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "exist": 40, "face": 8, "factor": 33, "featur": [117, 123, 124, 125, 129], "fetch_dataset": 63, "fight": 5, "fit": 5, "fix": [47, 117, 118, 120, 121, 122, 123, 124, 125, 127, 128, 129], "float": 2, "forest": [20, 48], "forg": 50, "formul": [56, 115], "from": [5, 50, 56], "functionsampl": [7, 60], "gener": [7, 13, 16, 19, 32, 40, 46, 55, 56, 106, 111, 112, 115], "geometric_mean_scor": 72, "get": 50, "github": 50, "guid": [56, 116], "guidelin": 47, "hard": 115, "highlight": [117, 125], "histori": [0, 117], "how": [2, 5, 7], "ill": 56, "illustr": [31, 42], "imbalanc": [0, 1, 2, 5, 16, 19, 20, 24, 26, 46, 49, 51, 52], "imblearn": [60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 74, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "implement": 7, "import": 52, "includ": 48, "influenc": 31, "inner": 48, "input": 51, "instal": 50, "instanc": 115, "instancehardnessthreshold": 94, "integr": 7, "intel": 50, "intelex": 50, "introduct": 51, "kera": [10, 55, 69, 106], "kmeanssmot": 81, "knn": 115, "lead": 0, "leakag": 45, "learn": [0, 1, 2, 5, 9, 24, 26, 49, 50, 51], "like": 32, "linear": 5, "link": [42, 115], "list": 2, "load": [8, 10, 20, 46], "loop": 10, "ma": 52, "macro": 52, "macro_averaged_mean_absolute_error": 73, "mae": 52, "mainten": [117, 125, 126, 127, 128, 129], "major": 47, "make": [16, 47], "make_imbal": 64, "make_index_balanced_accuraci": 74, "make_pipelin": 88, "manag": 56, "mathemat": [56, 115], "mean": 52, "method": [8, 12, 18, 26, 30, 39, 57, 59, 109, 112, 119], "metric": [24, 52, 71, 72, 74, 107], "mini": 10, "miscellan": [55, 108], "model": [5, 26, 27, 117, 126, 127, 128], "more": 31, "multi": 56, "multiclass": 6, "naiv": 56, "nearest": 115, "nearmiss": [41, 95], "neighbor": 115, "neighbour": 115, "neighbourhoodcleaningrul": 96, "network": 10, "neural": 10, "new": [40, 117, 119, 123, 124, 125, 129], "onesidedselect": 97, "optim": 50, "out": 51, "outlier": 7, "over": [8, 13, 19, 26, 30, 31, 33, 44, 56, 57, 109], "over_sampl": [79, 80, 81, 82, 83, 84, 85, 86], "own": 113, "pairwis": [52, 107], "panda": 51, "parametrize_with_check": 104, "pipelin": [7, 9, 10, 26, 35, 36, 87, 88, 110], "pitfal": 45, "plot": [10, 28], "porto": 10, "pose": 56, "practic": [45, 56], "pre": 10, "prerequisit": 50, "problem": [5, 51], "process": 10, "prototyp": [40, 112, 115], "pypi": 50, "random": [20, 31, 33, 48, 56, 115], "randomoversampl": 82, "randomundersampl": 98, "ratio": 31, "real": [4, 26], "recognit": 8, "recommend": 45, "refer": [10, 19, 55, 105, 131], "regard": 51, "reject": 7, "releas": [47, 117], "repeat": 115, "repeatededitednearestneighbour": 99, "report": 23, "repositori": 50, "resampl": [2, 5, 20], "result": 10, "roughli": 19, "rusboostclassifi": 68, "sampl": [6, 8, 10, 13, 20, 26, 30, 31, 32, 33, 39, 40, 41, 44, 56, 57, 109, 112, 115], "sampler": [7, 13, 19, 31, 32, 36, 40, 48, 51, 55, 113], "sampling_strategi": 2, "scikit": [9, 50], "seguro": 10, "select": [26, 27, 40, 41, 112, 115], "sensit": 52, "sensitivity_scor": 76, "sensitivity_specificity_support": 77, "set": [5, 9, 31, 51], "show": [1, 26], "shrinkag": 33, "side": 115, "singl": 20, "smote": [19, 31, 32, 56, 83, 109], "smoteenn": 61, "smoten": 84, "smotenc": 85, "smotetomek": 62, "sourc": 50, "spars": 51, "specif": [5, 24, 52], "specificity_scor": 78, "start": 50, "statement": 51, "str": 2, "strategi": 5, "summari": [52, 123, 124], "svmsmote": 86, "task": 8, "techniqu": 115, "tensorflow": [55, 111], "test": [50, 113, 124], "text": 9, "threshold": 115, "time": [3, 10, 11, 14, 17, 21, 25, 29, 34, 37, 38, 43, 114], "toi": 7, "tomek": [42, 115], "tomeklink": 100, "tool": 47, "topic": 9, "train": 5, "tree": [20, 48], "u": 0, "under": [6, 13, 26, 39, 40, 44, 57, 112, 115], "under_sampl": [90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "undersampl": 115, "us": [2, 5, 7, 12, 18, 19, 20, 26, 30, 31, 32, 39, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 74, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 113, 115], "usag": [1, 26, 36], "user": 116, "usual": 9, "util": [46, 47, 113], "valid": [28, 47, 113], "valu": 52, "valuedifferencemetr": 75, "variant": 56, "version": [117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130], "via": 50, "within": 7, "without": 20, "world": [4, 26], "your": 113}})