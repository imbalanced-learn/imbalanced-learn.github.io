Search.setIndex({"docnames": ["about", "auto_examples/api/index", "auto_examples/api/plot_sampling_strategy_usage", "auto_examples/api/sg_execution_times", "auto_examples/applications/index", "auto_examples/applications/plot_impact_imbalanced_classes", "auto_examples/applications/plot_multi_class_under_sampling", "auto_examples/applications/plot_outlier_rejections", "auto_examples/applications/plot_over_sampling_benchmark_lfw", "auto_examples/applications/plot_topic_classication", "auto_examples/applications/porto_seguro_keras_under_sampling", "auto_examples/applications/sg_execution_times", "auto_examples/combine/index", "auto_examples/combine/plot_comparison_combine", "auto_examples/combine/sg_execution_times", "auto_examples/datasets/index", "auto_examples/datasets/plot_make_imbalance", "auto_examples/datasets/sg_execution_times", "auto_examples/ensemble/index", "auto_examples/ensemble/plot_bagging_classifier", "auto_examples/ensemble/plot_comparison_ensemble_classifier", "auto_examples/ensemble/sg_execution_times", "auto_examples/evaluation/index", "auto_examples/evaluation/plot_classification_report", "auto_examples/evaluation/plot_metrics", "auto_examples/evaluation/sg_execution_times", "auto_examples/index", "auto_examples/model_selection/index", "auto_examples/model_selection/plot_validation_curve", "auto_examples/model_selection/sg_execution_times", "auto_examples/over-sampling/index", "auto_examples/over-sampling/plot_comparison_over_sampling", "auto_examples/over-sampling/plot_illustration_generation_sample", "auto_examples/over-sampling/plot_shrinkage_effect", "auto_examples/over-sampling/sg_execution_times", "auto_examples/pipeline/index", "auto_examples/pipeline/plot_pipeline_classification", "auto_examples/pipeline/sg_execution_times", "auto_examples/under-sampling/index", "auto_examples/under-sampling/plot_comparison_under_sampling", "auto_examples/under-sampling/plot_illustration_nearmiss", "auto_examples/under-sampling/plot_illustration_tomek_links", "auto_examples/under-sampling/sg_execution_times", "combine", "common_pitfalls", "datasets/index", "developers_utils", "ensemble", "index", "install", "introduction", "metrics", "min_dependency_substitutions", "min_dependency_table", "miscellaneous", "over_sampling", "references/combine", "references/datasets", "references/ensemble", "references/generated/imblearn.FunctionSampler", "references/generated/imblearn.combine.SMOTEENN", "references/generated/imblearn.combine.SMOTETomek", "references/generated/imblearn.datasets.fetch_datasets", "references/generated/imblearn.datasets.make_imbalance", "references/generated/imblearn.ensemble.BalancedBaggingClassifier", "references/generated/imblearn.ensemble.BalancedRandomForestClassifier", "references/generated/imblearn.ensemble.EasyEnsembleClassifier", "references/generated/imblearn.ensemble.RUSBoostClassifier", "references/generated/imblearn.keras.BalancedBatchGenerator", "references/generated/imblearn.keras.balanced_batch_generator", "references/generated/imblearn.metrics.classification_report_imbalanced", "references/generated/imblearn.metrics.geometric_mean_score", "references/generated/imblearn.metrics.macro_averaged_mean_absolute_error", "references/generated/imblearn.metrics.make_index_balanced_accuracy", "references/generated/imblearn.metrics.pairwise.ValueDifferenceMetric", "references/generated/imblearn.metrics.sensitivity_score", "references/generated/imblearn.metrics.sensitivity_specificity_support", "references/generated/imblearn.metrics.specificity_score", "references/generated/imblearn.over_sampling.ADASYN", "references/generated/imblearn.over_sampling.BorderlineSMOTE", "references/generated/imblearn.over_sampling.KMeansSMOTE", "references/generated/imblearn.over_sampling.RandomOverSampler", "references/generated/imblearn.over_sampling.SMOTE", "references/generated/imblearn.over_sampling.SMOTEN", "references/generated/imblearn.over_sampling.SMOTENC", "references/generated/imblearn.over_sampling.SVMSMOTE", "references/generated/imblearn.pipeline.Pipeline", "references/generated/imblearn.pipeline.make_pipeline", "references/generated/imblearn.tensorflow.balanced_batch_generator", "references/generated/imblearn.under_sampling.AllKNN", "references/generated/imblearn.under_sampling.ClusterCentroids", "references/generated/imblearn.under_sampling.CondensedNearestNeighbour", "references/generated/imblearn.under_sampling.EditedNearestNeighbours", "references/generated/imblearn.under_sampling.InstanceHardnessThreshold", "references/generated/imblearn.under_sampling.NearMiss", "references/generated/imblearn.under_sampling.NeighbourhoodCleaningRule", "references/generated/imblearn.under_sampling.OneSidedSelection", "references/generated/imblearn.under_sampling.RandomUnderSampler", "references/generated/imblearn.under_sampling.RepeatedEditedNearestNeighbours", "references/generated/imblearn.under_sampling.TomekLinks", "references/generated/imblearn.utils.check_neighbors_object", "references/generated/imblearn.utils.check_sampling_strategy", "references/generated/imblearn.utils.check_target_type", "references/generated/imblearn.utils.estimator_checks.parametrize_with_checks", "references/index", "references/keras", "references/metrics", "references/miscellaneous", "references/over_sampling", "references/pipeline", "references/tensorflow", "references/under_sampling", "references/utils", "under_sampling", "user_guide", "whats_new", "whats_new/v0.1", "whats_new/v0.10", "whats_new/v0.11", "whats_new/v0.12", "whats_new/v0.2", "whats_new/v0.3", "whats_new/v0.4", "whats_new/v0.5", "whats_new/v0.6", "whats_new/v0.7", "whats_new/v0.8", "whats_new/v0.9", "zzz_references"], "filenames": ["about.rst", "auto_examples/api/index.rst", "auto_examples/api/plot_sampling_strategy_usage.rst", "auto_examples/api/sg_execution_times.rst", "auto_examples/applications/index.rst", "auto_examples/applications/plot_impact_imbalanced_classes.rst", "auto_examples/applications/plot_multi_class_under_sampling.rst", "auto_examples/applications/plot_outlier_rejections.rst", "auto_examples/applications/plot_over_sampling_benchmark_lfw.rst", "auto_examples/applications/plot_topic_classication.rst", "auto_examples/applications/porto_seguro_keras_under_sampling.rst", "auto_examples/applications/sg_execution_times.rst", "auto_examples/combine/index.rst", "auto_examples/combine/plot_comparison_combine.rst", "auto_examples/combine/sg_execution_times.rst", "auto_examples/datasets/index.rst", "auto_examples/datasets/plot_make_imbalance.rst", "auto_examples/datasets/sg_execution_times.rst", "auto_examples/ensemble/index.rst", "auto_examples/ensemble/plot_bagging_classifier.rst", "auto_examples/ensemble/plot_comparison_ensemble_classifier.rst", "auto_examples/ensemble/sg_execution_times.rst", "auto_examples/evaluation/index.rst", "auto_examples/evaluation/plot_classification_report.rst", "auto_examples/evaluation/plot_metrics.rst", "auto_examples/evaluation/sg_execution_times.rst", "auto_examples/index.rst", "auto_examples/model_selection/index.rst", "auto_examples/model_selection/plot_validation_curve.rst", "auto_examples/model_selection/sg_execution_times.rst", "auto_examples/over-sampling/index.rst", "auto_examples/over-sampling/plot_comparison_over_sampling.rst", "auto_examples/over-sampling/plot_illustration_generation_sample.rst", "auto_examples/over-sampling/plot_shrinkage_effect.rst", "auto_examples/over-sampling/sg_execution_times.rst", "auto_examples/pipeline/index.rst", "auto_examples/pipeline/plot_pipeline_classification.rst", "auto_examples/pipeline/sg_execution_times.rst", "auto_examples/under-sampling/index.rst", "auto_examples/under-sampling/plot_comparison_under_sampling.rst", "auto_examples/under-sampling/plot_illustration_nearmiss.rst", "auto_examples/under-sampling/plot_illustration_tomek_links.rst", "auto_examples/under-sampling/sg_execution_times.rst", "combine.rst", "common_pitfalls.rst", "datasets/index.rst", "developers_utils.rst", "ensemble.rst", "index.rst", "install.rst", "introduction.rst", "metrics.rst", "min_dependency_substitutions.rst", "min_dependency_table.rst", "miscellaneous.rst", "over_sampling.rst", "references/combine.rst", "references/datasets.rst", "references/ensemble.rst", "references/generated/imblearn.FunctionSampler.rst", "references/generated/imblearn.combine.SMOTEENN.rst", "references/generated/imblearn.combine.SMOTETomek.rst", "references/generated/imblearn.datasets.fetch_datasets.rst", "references/generated/imblearn.datasets.make_imbalance.rst", "references/generated/imblearn.ensemble.BalancedBaggingClassifier.rst", "references/generated/imblearn.ensemble.BalancedRandomForestClassifier.rst", "references/generated/imblearn.ensemble.EasyEnsembleClassifier.rst", "references/generated/imblearn.ensemble.RUSBoostClassifier.rst", "references/generated/imblearn.keras.BalancedBatchGenerator.rst", "references/generated/imblearn.keras.balanced_batch_generator.rst", "references/generated/imblearn.metrics.classification_report_imbalanced.rst", "references/generated/imblearn.metrics.geometric_mean_score.rst", "references/generated/imblearn.metrics.macro_averaged_mean_absolute_error.rst", "references/generated/imblearn.metrics.make_index_balanced_accuracy.rst", "references/generated/imblearn.metrics.pairwise.ValueDifferenceMetric.rst", "references/generated/imblearn.metrics.sensitivity_score.rst", "references/generated/imblearn.metrics.sensitivity_specificity_support.rst", "references/generated/imblearn.metrics.specificity_score.rst", "references/generated/imblearn.over_sampling.ADASYN.rst", "references/generated/imblearn.over_sampling.BorderlineSMOTE.rst", "references/generated/imblearn.over_sampling.KMeansSMOTE.rst", "references/generated/imblearn.over_sampling.RandomOverSampler.rst", "references/generated/imblearn.over_sampling.SMOTE.rst", "references/generated/imblearn.over_sampling.SMOTEN.rst", "references/generated/imblearn.over_sampling.SMOTENC.rst", "references/generated/imblearn.over_sampling.SVMSMOTE.rst", "references/generated/imblearn.pipeline.Pipeline.rst", "references/generated/imblearn.pipeline.make_pipeline.rst", "references/generated/imblearn.tensorflow.balanced_batch_generator.rst", "references/generated/imblearn.under_sampling.AllKNN.rst", "references/generated/imblearn.under_sampling.ClusterCentroids.rst", "references/generated/imblearn.under_sampling.CondensedNearestNeighbour.rst", "references/generated/imblearn.under_sampling.EditedNearestNeighbours.rst", "references/generated/imblearn.under_sampling.InstanceHardnessThreshold.rst", "references/generated/imblearn.under_sampling.NearMiss.rst", "references/generated/imblearn.under_sampling.NeighbourhoodCleaningRule.rst", "references/generated/imblearn.under_sampling.OneSidedSelection.rst", "references/generated/imblearn.under_sampling.RandomUnderSampler.rst", "references/generated/imblearn.under_sampling.RepeatedEditedNearestNeighbours.rst", "references/generated/imblearn.under_sampling.TomekLinks.rst", "references/generated/imblearn.utils.check_neighbors_object.rst", "references/generated/imblearn.utils.check_sampling_strategy.rst", "references/generated/imblearn.utils.check_target_type.rst", "references/generated/imblearn.utils.estimator_checks.parametrize_with_checks.rst", "references/index.rst", "references/keras.rst", "references/metrics.rst", "references/miscellaneous.rst", "references/over_sampling.rst", "references/pipeline.rst", "references/tensorflow.rst", "references/under_sampling.rst", "references/utils.rst", "under_sampling.rst", "user_guide.rst", "whats_new.rst", "whats_new/v0.1.rst", "whats_new/v0.10.rst", "whats_new/v0.11.rst", "whats_new/v0.12.rst", "whats_new/v0.2.rst", "whats_new/v0.3.rst", "whats_new/v0.4.rst", "whats_new/v0.5.rst", "whats_new/v0.6.rst", "whats_new/v0.7.rst", "whats_new/v0.8.rst", "whats_new/v0.9.rst", "zzz_references.rst"], "titles": ["About us", "Examples showing API imbalanced-learn usage", "How to use <code class=\"docutils literal notranslate\"><span class=\"pre\">sampling_strategy</span></code> in imbalanced-learn", "Computation times", "Examples based on real world datasets", "Fitting model on imbalanced datasets and how to fight bias", "Multiclass classification with under-sampling", "Customized sampler to implement an outlier rejections estimator", "Benchmark over-sampling methods in a face recognition task", "Example of topic classification in text documents", "Porto Seguro: balancing samples in mini-batches with Keras", "Computation times", "Examples using combine class methods", "Compare sampler combining over- and under-sampling", "Computation times", "Dataset examples", "Create an imbalanced dataset", "Computation times", "Example using ensemble class methods", "Bagging classifiers using sampler", "Compare ensemble classifiers using resampling", "Computation times", "Evaluation examples", "Evaluate classification by compiling a report", "Metrics specific to imbalanced learning", "Computation times", "Examples", "Model Selection", "Plotting Validation Curves", "Computation times", "Example using over-sampling class methods", "Compare over-sampling samplers", "Sample generator used in SMOTE-like samplers", "Effect of the shrinkage factor in random over-sampling", "Computation times", "Pipeline examples", "Usage of pipeline embedding samplers", "Computation times", "Example using under-sampling class methods", "Compare under-sampling samplers", "Sample selection in NearMiss", "Illustration of the definition of a Tomek link", "Computation times", "<span class=\"section-number\">4. </span>Combination of over- and under-sampling", "<span class=\"section-number\">8. </span>Common pitfalls and recommended practices", "<span class=\"section-number\">9. </span>Dataset loading utilities", "<span class=\"section-number\">10. </span>Developer guideline", "<span class=\"section-number\">5. </span>Ensemble of samplers", "imbalanced-learn documentation", "Getting Started", "<span class=\"section-number\">1. </span>Introduction", "<span class=\"section-number\">7. </span>Metrics", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">6. </span>Miscellaneous samplers", "<span class=\"section-number\">2. </span>Over-sampling", "Combination of over- and under-sampling methods", "Datasets", "Ensemble methods", "FunctionSampler", "SMOTEENN", "SMOTETomek", "fetch_datasets", "make_imbalance", "BalancedBaggingClassifier", "BalancedRandomForestClassifier", "EasyEnsembleClassifier", "RUSBoostClassifier", "BalancedBatchGenerator", "balanced_batch_generator", "classification_report_imbalanced", "geometric_mean_score", "macro_averaged_mean_absolute_error", "make_index_balanced_accuracy", "ValueDifferenceMetric", "sensitivity_score", "sensitivity_specificity_support", "specificity_score", "ADASYN", "BorderlineSMOTE", "KMeansSMOTE", "RandomOverSampler", "SMOTE", "SMOTEN", "SMOTENC", "SVMSMOTE", "Pipeline", "make_pipeline", "balanced_batch_generator", "AllKNN", "ClusterCentroids", "CondensedNearestNeighbour", "EditedNearestNeighbours", "InstanceHardnessThreshold", "NearMiss", "NeighbourhoodCleaningRule", "OneSidedSelection", "RandomUnderSampler", "RepeatedEditedNearestNeighbours", "TomekLinks", "check_neighbors_object", "check_sampling_strategy", "check_target_type", "parametrize_with_checks", "API reference", "Batch generator for Keras", "Metrics", "Miscellaneous", "Over-sampling methods", "Pipeline", "Batch generator for TensorFlow", "Under-sampling methods", "Utilities", "<span class=\"section-number\">3. </span>Under-sampling", "User guide: contents", "Release history", "Version 0.1", "Version 0.10.1", "Version 0.11.0", "Version 0.12.0 (Under development)", "Version 0.2", "Version 0.3", "Version 0.4.2", "Version 0.5.0", "Version 0.6.2", "Version 0.7.0", "Version 0.8.1", "Version 0.9.1", "<span class=\"section-number\">11. </span>References"], "terms": {"The": [0, 2, 5, 7, 8, 10, 13, 19, 20, 24, 26, 28, 31, 33, 38, 39, 43, 44, 45, 47, 48, 49, 50, 51, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 108, 109, 110, 111, 112, 113, 115, 117, 118, 121, 122, 123, 124, 125, 126, 128], "project": [0, 39], "start": [0, 40, 48, 94], "august": 0, "2014": [0, 81, 93, 128], "fernando": [0, 80, 115, 116, 128], "nogueira": [0, 115, 116], "focus": [0, 55], "smote": [0, 8, 12, 13, 23, 24, 26, 28, 30, 34, 36, 43, 60, 61, 64, 78, 79, 80, 81, 83, 84, 85, 86, 104, 114, 115, 116, 117, 120, 122, 123, 124, 128], "implement": [0, 4, 8, 9, 11, 19, 24, 26, 31, 38, 39, 43, 46, 47, 50, 51, 54, 55, 59, 64, 66, 74, 78, 79, 80, 82, 83, 84, 85, 86, 87, 93, 109, 113, 115, 118, 120, 125, 126], "togeth": [0, 55, 86], "guillaum": [0, 2, 5, 6, 7, 8, 9, 10, 13, 16, 19, 20, 23, 24, 28, 31, 32, 33, 36, 39, 40, 41, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126], "lemaitr": [0, 2, 5, 6, 7, 8, 9, 10, 13, 16, 19, 20, 23, 24, 28, 31, 32, 33, 36, 39, 40, 41, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126], "dayvid": [0, 16, 115, 116, 120], "victor": 0, "christo": [0, 8, 16, 28, 36, 115, 116, 120, 121, 122, 123, 124, 125], "arida": [0, 8, 16, 28, 36, 115, 116, 120, 121, 122, 123, 124, 125], "addit": [0, 20, 23, 24, 46, 47, 54, 55, 63, 64, 100, 101, 113, 114, 115, 120, 122, 124], "under": [0, 2, 4, 5, 10, 11, 12, 14, 18, 19, 20, 35, 42, 46, 47, 55, 58, 59, 60, 61, 63, 64, 65, 66, 67, 70, 82, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 104, 114, 116, 120, 121, 122, 123], "sampl": [0, 2, 4, 5, 7, 9, 11, 12, 14, 16, 18, 19, 24, 34, 35, 41, 42, 44, 45, 46, 47, 50, 51, 54, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 104, 109, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 126, 128], "over": [0, 2, 4, 5, 11, 12, 14, 24, 28, 34, 44, 51, 59, 60, 61, 64, 65, 66, 67, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 93, 94, 97, 101, 104, 114, 115, 116, 117, 118, 123, 126, 128], "method": [0, 2, 4, 6, 7, 10, 11, 13, 19, 20, 27, 31, 39, 43, 46, 47, 48, 50, 51, 54, 55, 57, 59, 60, 61, 64, 65, 66, 67, 68, 73, 74, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104, 113, 115, 120, 121, 122, 126, 128], "have": [0, 5, 8, 10, 13, 19, 20, 23, 24, 43, 44, 46, 47, 51, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 74, 78, 79, 80, 81, 82, 83, 84, 85, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 113, 115, 120, 121, 122, 124, 126], "been": [0, 13, 19, 23, 24, 43, 47, 62, 70, 78, 79, 82, 83, 84, 85, 115, 117, 120, 121, 122, 124], "well": [0, 5, 13, 44, 50, 51, 55, 59, 60, 61, 64, 65, 66, 67, 69, 74, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 115, 117, 122], "major": [0, 2, 5, 9, 18, 19, 20, 26, 31, 32, 33, 38, 39, 40, 41, 44, 47, 50, 55, 60, 61, 64, 65, 66, 67, 71, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 113, 114, 115, 116, 118, 120], "chang": [0, 5, 10, 39, 46, 47, 55, 64, 65, 66, 67, 86, 118, 122, 126], "api": [0, 5, 47, 48, 49, 54, 114, 123], "fulli": [0, 54], "compat": [0, 71, 78, 79, 80, 82, 83, 84, 85, 90, 102, 104, 122, 126], "scikit": [0, 5, 7, 26, 31, 35, 39, 44, 46, 47, 48, 49, 50, 51, 53, 62, 64, 65, 85, 86, 90, 112, 113, 115, 117, 118, 121, 122, 123, 124, 125, 126, 127], "refer": [0, 26, 38, 46, 47, 48, 50, 55, 60, 61, 62, 64, 65, 66, 67, 71, 73, 74, 76, 78, 79, 80, 81, 82, 83, 84, 85, 89, 91, 92, 93, 94, 95, 96, 98, 99, 113, 114], "github": [0, 46], "page": [0, 128], "If": [0, 41, 46, 49, 55, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 113], "you": [0, 5, 9, 10, 28, 46, 47, 49, 54, 55, 59, 60, 61, 64, 65, 66, 67, 73, 74, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 113], "us": [0, 1, 3, 4, 6, 8, 9, 10, 13, 16, 21, 22, 23, 24, 28, 33, 34, 35, 36, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 54, 55, 69, 74, 76, 88, 101, 103, 104, 114, 115, 118, 120, 121, 122, 123, 124, 125, 126, 128], "scientif": 0, "public": 0, "we": [0, 2, 5, 6, 7, 8, 9, 10, 13, 16, 19, 20, 24, 28, 31, 33, 36, 40, 41, 43, 44, 46, 49, 50, 51, 54, 55, 59, 80, 113], "would": [0, 36, 44, 45, 55, 65, 113], "appreci": 0, "citat": 0, "follow": [0, 5, 13, 19, 24, 28, 31, 39, 40, 45, 46, 47, 49, 50, 54, 55, 59, 60, 61, 62, 65, 70, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 113, 115, 116, 117, 118, 122, 123, 124, 125], "paper": [0, 79, 82, 83, 84, 85, 95, 115, 118, 123], "articl": 0, "jmlr": 0, "v18": 0, "16": [0, 8, 28, 34, 40, 41, 45, 49, 52, 53, 62, 72, 115, 124, 127, 128], "365": 0, "author": [0, 2, 5, 6, 7, 8, 9, 10, 13, 16, 19, 20, 23, 24, 28, 31, 32, 33, 36, 39, 40, 41], "lema": 0, "i": [0, 2, 5, 7, 8, 9, 10, 12, 13, 16, 18, 19, 20, 24, 26, 28, 31, 32, 33, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 54, 55, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 113, 115, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128], "tre": 0, "k": [0, 8, 13, 31, 39, 40, 46, 51, 55, 64, 66, 67, 74, 78, 79, 80, 82, 83, 84, 85, 89, 91, 92, 94, 95, 96, 98, 100, 103, 113, 115, 120, 128], "titl": [0, 7, 10, 31, 33, 39, 41, 46], "A": [0, 9, 31, 32, 45, 47, 48, 54, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 74, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 113, 114, 115, 118, 120, 128], "python": [0, 2, 5, 6, 7, 8, 9, 10, 13, 16, 19, 20, 23, 24, 26, 28, 31, 32, 33, 36, 39, 40, 41, 46, 51, 115, 117, 122, 123], "toolbox": [0, 26, 104], "tackl": 0, "curs": [0, 71, 96, 128], "dataset": [0, 6, 7, 9, 11, 17, 22, 23, 24, 28, 31, 33, 36, 39, 41, 43, 44, 47, 54, 55, 59, 60, 61, 64, 65, 66, 67, 68, 69, 70, 74, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 104, 105, 110, 111, 113, 114, 115, 121, 122, 124, 128], "machin": [0, 5, 50, 60, 64, 93, 128], "journal": [0, 19, 64, 79, 82, 83, 84, 85, 128], "research": [0, 79, 82, 83, 84, 85, 128], "year": [0, 19], "2017": [0, 115, 120, 128], "volum": [0, 128], "18": [0, 32, 40, 41, 45, 46, 61, 62, 65, 84, 115, 126, 128], "number": [0, 2, 5, 7, 9, 19, 20, 24, 26, 28, 31, 38, 39, 44, 45, 46, 50, 51, 54, 55, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 113, 115, 118, 121, 124], "17": [0, 6, 45, 49, 52, 53, 62], "1": [0, 2, 5, 6, 7, 8, 9, 10, 13, 16, 17, 19, 20, 21, 23, 24, 25, 28, 31, 32, 33, 34, 36, 39, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 113, 118, 120, 123, 128], "5": [0, 2, 5, 10, 11, 16, 19, 20, 24, 31, 32, 36, 39, 40, 41, 45, 46, 49, 51, 52, 53, 55, 62, 64, 65, 67, 70, 72, 74, 77, 78, 79, 80, 82, 83, 84, 85, 93, 95, 122, 124, 128], "url": [0, 128], "http": [0, 10, 49, 80, 128], "org": [0, 80, 128], "html": 0, "some": [1, 5, 6, 7, 8, 9, 12, 13, 24, 26, 31, 32, 39, 40, 41, 44, 48, 51, 54, 55, 59, 64, 65, 66, 67, 86, 100, 107, 113, 115, 120, 121, 122, 124, 125], "detail": [1, 5, 26, 48, 60, 61, 64, 65, 66, 78, 79, 80, 82, 83, 84, 85, 89, 91, 92, 93, 94, 95, 96, 98, 99, 106], "regard": [1, 5, 10, 13, 26, 43, 55, 60, 61, 62, 63, 113, 114, 115, 122, 124], "how": [1, 3, 4, 9, 11, 19, 22, 26, 32, 35, 41, 45, 50, 54, 59, 60, 61, 63, 64, 65, 66, 67, 74, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 115, 123], "sampling_strategi": [1, 3, 5, 6, 16, 20, 26, 41, 44, 45, 47, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 78, 79, 80, 81, 82, 83, 84, 85, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 113, 115, 118, 122, 125], "go": [2, 5, 6, 7, 8, 9, 10, 13, 16, 19, 20, 23, 24, 28, 31, 32, 33, 36, 39, 40, 41, 46, 113], "end": [2, 5, 6, 7, 8, 9, 10, 13, 16, 19, 20, 23, 24, 28, 31, 32, 33, 36, 39, 40, 41, 65, 68, 86], "download": [2, 5, 6, 7, 8, 9, 10, 13, 16, 19, 20, 23, 24, 26, 28, 31, 32, 33, 36, 39, 40, 41, 62], "full": [2, 5, 6, 7, 8, 9, 10, 13, 16, 19, 20, 23, 24, 28, 31, 32, 33, 36, 39, 40, 41, 49, 104, 115, 123], "exampl": [2, 5, 6, 7, 8, 10, 11, 13, 16, 19, 20, 23, 24, 27, 28, 31, 32, 33, 36, 39, 40, 41, 46, 48, 49, 51, 53, 54, 69, 72, 74, 75, 76, 77, 103, 104, 113, 114, 115, 121, 123, 126], "code": [2, 5, 6, 7, 8, 9, 10, 13, 16, 19, 20, 23, 24, 26, 28, 31, 32, 33, 36, 39, 40, 41, 49], "thi": [2, 5, 7, 8, 9, 10, 13, 19, 20, 28, 31, 32, 33, 39, 40, 41, 43, 44, 45, 46, 47, 49, 51, 54, 55, 59, 60, 61, 62, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 113, 115, 118, 122, 123, 124, 126, 127], "show": [2, 5, 7, 8, 9, 10, 13, 16, 19, 20, 23, 28, 31, 32, 33, 39, 40, 41, 43, 44, 47, 55, 62, 63, 115, 123], "differ": [2, 5, 6, 8, 10, 13, 19, 28, 31, 36, 39, 40, 41, 44, 46, 47, 50, 55, 60, 61, 64, 65, 66, 67, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 90, 93, 94, 97, 101, 113, 114, 115, 122, 123, 124, 125, 128], "usag": [2, 5, 6, 7, 8, 9, 10, 13, 16, 19, 20, 23, 24, 28, 31, 32, 33, 35, 37, 39, 40, 41, 82, 86, 87, 92, 115, 123, 124], "paramet": [2, 5, 16, 28, 31, 33, 39, 43, 45, 46, 47, 48, 51, 54, 55, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 113, 115, 117, 118, 120, 121, 122, 123, 124, 125, 126], "famili": 2, "sampler": [2, 4, 5, 8, 9, 11, 12, 14, 18, 21, 24, 26, 28, 30, 33, 34, 35, 37, 38, 41, 42, 43, 44, 46, 55, 59, 60, 61, 64, 65, 67, 68, 69, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 104, 113, 114, 115, 117, 120, 121, 122, 123, 124, 126], "e": [2, 5, 8, 12, 13, 26, 40, 46, 51, 54, 55, 64, 65, 66, 67, 68, 69, 71, 81, 85, 86, 97, 113, 115, 122, 123], "clean": [2, 7, 12, 13, 26, 38, 39, 41, 43, 60, 61, 92, 95, 101, 114, 115, 116, 122], "g": [2, 5, 6, 7, 8, 9, 10, 13, 16, 19, 20, 23, 24, 28, 31, 32, 33, 36, 39, 40, 41, 46, 54, 55, 60, 61, 64, 65, 66, 67, 71, 81, 86, 113], "lemaitre58": [2, 5, 6, 7, 8, 9, 10, 13, 16, 19, 20, 23, 24, 28, 31, 32, 33, 36, 39, 40, 41], "gmail": [2, 5, 6, 7, 8, 9, 10, 13, 16, 19, 20, 23, 24, 28, 31, 32, 33, 36, 39, 40, 41], "com": [2, 5, 6, 7, 8, 9, 10, 13, 16, 19, 20, 23, 24, 28, 31, 32, 33, 36, 39, 40, 41, 49], "licens": [2, 5, 6, 7, 8, 9, 10, 13, 16, 19, 20, 23, 24, 28, 31, 32, 33, 36, 39, 40, 41, 48], "mit": [2, 5, 6, 7, 8, 9, 10, 13, 16, 19, 20, 23, 24, 28, 31, 32, 33, 36, 39, 40, 41, 48], "print": [2, 5, 6, 7, 8, 9, 10, 13, 16, 19, 20, 23, 24, 28, 31, 32, 33, 36, 39, 40, 41, 43, 44, 45, 54, 55, 59, 60, 61, 63, 64, 65, 66, 70, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 113, 115, 123], "__doc__": [2, 5, 6, 7, 8, 9, 10, 13, 16, 19, 20, 23, 24, 28, 31, 32, 33, 36, 39, 40, 41, 115, 117], "import": [2, 5, 6, 7, 8, 9, 10, 13, 16, 19, 20, 23, 24, 28, 31, 32, 33, 36, 39, 40, 41, 43, 44, 45, 46, 47, 48, 54, 55, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 103, 113, 114, 115, 123, 124, 125], "seaborn": [2, 8, 10, 13, 16, 20, 28, 31, 32, 33, 39, 40, 41, 49, 53, 115, 121], "sn": [2, 8, 10, 13, 16, 20, 28, 31, 32, 33, 39, 40, 41], "set_context": [2, 8, 13, 16, 20, 28, 31, 32, 33, 39, 40, 41], "poster": [2, 8, 13, 16, 20, 28, 31, 32, 33, 39, 40, 41], "first": [2, 5, 7, 10, 16, 19, 20, 24, 28, 31, 33, 36, 39, 40, 44, 54, 55, 59, 65, 67, 86, 99, 113, 115, 116], "data": [2, 5, 6, 8, 13, 19, 20, 23, 24, 26, 30, 32, 36, 39, 40, 41, 45, 47, 54, 55, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 114, 115, 118, 122, 123, 126, 128], "set": [2, 7, 10, 16, 18, 19, 20, 24, 26, 33, 36, 44, 45, 47, 51, 55, 59, 60, 61, 63, 64, 65, 66, 67, 70, 71, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 103, 108, 114, 115, 117, 118, 122, 123, 128], "from": [2, 6, 7, 8, 9, 10, 13, 16, 19, 20, 23, 24, 28, 31, 33, 36, 39, 40, 41, 43, 44, 45, 46, 47, 50, 51, 54, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 103, 113, 114, 115, 117, 120, 121, 122, 123, 124, 125, 126, 128], "iri": [2, 6, 45, 68], "sklearn": [2, 5, 6, 7, 8, 9, 10, 13, 16, 19, 20, 23, 24, 28, 31, 33, 36, 39, 40, 43, 44, 45, 46, 47, 48, 51, 54, 55, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 72, 74, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 103, 113, 115, 120, 123, 124, 125], "load_iri": [2, 6, 45, 63, 68, 69], "imblearn": [2, 5, 6, 7, 8, 9, 10, 13, 15, 16, 19, 20, 23, 24, 26, 28, 31, 33, 36, 39, 41, 43, 44, 45, 46, 47, 48, 49, 51, 54, 55, 56, 57, 58, 69, 72, 74, 75, 76, 77, 88, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 115, 122, 123, 124, 125, 126], "make_imbal": [2, 5, 6, 16, 44, 45, 68, 69, 104, 115, 121, 124], "as_fram": [2, 5, 44, 45, 55, 113], "true": [2, 5, 8, 10, 16, 19, 20, 24, 39, 44, 45, 46, 47, 51, 54, 55, 59, 60, 61, 62, 64, 65, 66, 67, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 102, 113, 115, 118], "0": [2, 5, 6, 7, 8, 9, 10, 11, 13, 16, 19, 20, 23, 24, 28, 31, 32, 33, 34, 36, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 113], "10": [2, 5, 7, 8, 10, 13, 16, 19, 20, 23, 24, 28, 31, 32, 33, 36, 39, 40, 41, 45, 49, 51, 52, 53, 54, 55, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 74, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 128], "20": [2, 9, 23, 24, 28, 31, 45, 46, 51, 55, 59, 60, 61, 62, 63, 64, 66, 78, 79, 81, 82, 83, 84, 85, 86, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 115, 122, 128], "2": [2, 3, 5, 6, 7, 8, 9, 10, 13, 16, 19, 20, 23, 24, 26, 28, 31, 32, 33, 36, 38, 39, 41, 43, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 77, 78, 79, 80, 81, 82, 84, 85, 86, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 113, 116, 117, 123, 127, 128], "47": [2, 5, 11, 45], "x": [2, 6, 7, 8, 10, 13, 16, 19, 20, 23, 24, 28, 31, 33, 36, 39, 43, 44, 46, 47, 51, 54, 55, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 74, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 113, 115, 122, 123, 124], "y": [2, 5, 6, 7, 8, 10, 13, 16, 19, 20, 23, 24, 28, 31, 32, 33, 36, 39, 43, 44, 45, 47, 51, 54, 55, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 74, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 113, 115, 122, 123, 124, 125], "target": [2, 6, 8, 9, 10, 20, 39, 45, 46, 50, 51, 54, 55, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 113, 115, 120, 122, 124, 126], "matplotlib": [2, 7, 8, 10, 13, 16, 20, 28, 31, 32, 33, 39, 40, 41, 49, 53], "pyplot": [2, 7, 8, 10, 13, 16, 20, 28, 31, 32, 33, 39, 40, 41], "plt": [2, 7, 8, 10, 13, 16, 20, 28, 31, 32, 33, 39, 40, 41], "fig": [2, 8, 13, 16, 20, 28, 31, 33, 39, 40, 41], "ax": [2, 8, 10, 13, 16, 20, 28, 31, 32, 33, 39, 40, 41], "subplot": [2, 8, 13, 16, 20, 28, 31, 32, 33, 39, 40, 41], "ncol": [2, 16, 20, 31, 39, 41], "figsiz": [2, 8, 13, 16, 20, 28, 31, 32, 33, 39, 40, 41], "autopct": 2, "2f": [2, 20, 28, 40], "value_count": [2, 5, 8, 19], "plot": [2, 7, 8, 13, 16, 26, 27, 29, 31, 32, 39, 40, 41, 82, 86, 87], "pie": 2, "set_titl": [2, 8, 13, 16, 20, 31, 39, 40, 41], "origin": [2, 5, 13, 16, 31, 39, 45, 46, 55, 60, 61, 64, 65, 66, 67, 68, 69, 78, 79, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 102, 113, 115, 118, 122, 123], "tight_layout": [2, 8, 13, 16, 20, 28, 31, 32, 33, 39, 40, 41], "can": [2, 5, 7, 8, 9, 10, 13, 19, 20, 22, 24, 26, 28, 30, 31, 33, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 49, 50, 51, 54, 55, 59, 64, 65, 66, 67, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 100, 101, 113, 115, 121, 122, 124], "given": [2, 13, 26, 30, 31, 39, 44, 45, 51, 55, 60, 61, 64, 65, 66, 67, 68, 69, 71, 74, 81, 86, 87, 113, 115, 124, 125], "For": [2, 19, 44, 46, 50, 54, 55, 65, 67, 71, 76, 78, 79, 80, 82, 83, 84, 85, 86, 96, 101, 113, 115, 117], "correspond": [2, 24, 40, 41, 44, 45, 46, 50, 55, 59, 60, 61, 63, 64, 65, 66, 67, 78, 79, 80, 81, 82, 83, 84, 85, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101], "ratio": [2, 5, 8, 9, 16, 19, 20, 26, 30, 33, 39, 44, 45, 50, 60, 61, 62, 63, 64, 65, 66, 67, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 90, 93, 94, 97, 101, 115, 121, 122, 123, 124], "alpha_": [2, 60, 61, 64, 65, 66, 67, 78, 79, 80, 81, 82, 83, 84, 85, 90, 93, 94, 97, 101], "u": [2, 44, 49, 64, 65, 66, 67, 90, 93, 94, 97, 101], "defin": [2, 5, 7, 40, 45, 51, 54, 55, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 74, 78, 79, 80, 81, 82, 83, 84, 85, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 113], "n_": [2, 60, 61, 64, 65, 66, 67, 78, 79, 80, 81, 82, 83, 84, 85, 90, 93, 94, 97, 101], "rm": [2, 60, 61, 64, 65, 66, 67, 78, 79, 80, 81, 82, 83, 84, 85, 90, 93, 94, 97, 101], "time": [2, 5, 6, 7, 8, 9, 13, 16, 19, 20, 23, 24, 28, 31, 32, 33, 36, 39, 40, 41, 44, 55, 64, 86, 87, 89, 98, 101, 113], "m": [2, 39, 45, 60, 61, 62, 64, 65, 66, 67, 71, 78, 79, 80, 81, 82, 83, 84, 85, 90, 93, 94, 96, 97, 101, 113, 115, 120, 128], "where": [2, 8, 36, 45, 51, 55, 60, 61, 64, 65, 66, 67, 71, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 90, 93, 94, 95, 97, 101, 113, 115, 117, 118, 122, 123, 126], "ar": [2, 5, 7, 8, 9, 12, 13, 18, 19, 20, 24, 26, 30, 31, 33, 39, 40, 41, 43, 44, 45, 46, 47, 51, 54, 55, 59, 60, 61, 62, 64, 65, 66, 67, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 113, 115, 122, 123, 124, 125], "class": [2, 5, 6, 7, 8, 13, 16, 19, 20, 28, 31, 32, 33, 36, 39, 40, 41, 43, 44, 45, 46, 47, 48, 50, 51, 54, 59, 60, 61, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 113, 114, 115, 117, 118, 120, 121, 122, 124, 126, 128], "after": [2, 13, 31, 39, 43, 60, 61, 63, 64, 65, 66, 67, 78, 79, 80, 81, 82, 83, 84, 85, 86, 90, 93, 94, 95, 97, 101, 115, 124], "minor": [2, 5, 8, 9, 19, 20, 26, 30, 32, 33, 39, 40, 41, 45, 46, 55, 60, 61, 62, 64, 65, 66, 67, 78, 79, 80, 81, 82, 83, 84, 85, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 113, 115, 116, 117, 118, 120, 124, 128], "respect": [2, 19, 55, 67, 95, 101], "select": [2, 16, 19, 31, 32, 38, 42, 44, 45, 47, 48, 55, 59, 68, 71, 80, 81, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 104, 114, 115, 116, 120, 122, 126, 128], "onli": [2, 5, 8, 24, 31, 33, 40, 41, 44, 51, 54, 55, 59, 60, 61, 64, 65, 66, 67, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 115, 117, 120, 122, 123, 125, 126], "sinc": [2, 40, 41, 64, 65, 66, 67, 73, 78, 79, 81, 82, 83, 84, 85, 113, 115, 118, 125], "make": [2, 5, 8, 10, 19, 20, 28, 31, 32, 39, 40, 41, 44, 49, 55, 80, 86, 113, 114, 115, 117, 121, 122, 123, 126, 127], "sens": 2, "case": [2, 6, 28, 31, 33, 40, 44, 55, 59, 60, 61, 64, 65, 66, 67, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 113, 115, 120, 122, 128], "binary_mask": 2, "isin": [2, 8], "binary_i": 2, "binary_x": 2, "under_sampl": [2, 5, 6, 9, 19, 36, 39, 41, 44, 54, 59, 68, 69, 111, 113, 115, 120, 121, 122, 124, 125, 126], "randomundersampl": [2, 5, 9, 19, 39, 44, 47, 54, 59, 64, 65, 67, 68, 69, 88, 93, 94, 99, 104, 113, 115, 118, 122, 124], "8": [2, 6, 13, 28, 31, 32, 39, 40, 41, 43, 45, 46, 47, 51, 54, 55, 62, 64, 70, 72, 74, 81, 83, 113, 118], "ru": [2, 97, 113], "x_re": [2, 13, 31, 33, 39, 41, 54, 55, 59, 60, 61, 63, 78, 79, 80, 81, 82, 83, 84, 85, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], "y_re": [2, 5, 13, 31, 33, 39, 41, 54, 55, 59, 60, 61, 63, 78, 79, 80, 81, 82, 83, 84, 85, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], "fit_resampl": [2, 7, 13, 31, 33, 39, 41, 43, 44, 50, 54, 55, 59, 60, 61, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 113, 115, 122], "_": [2, 7, 13, 20, 33, 40, 41], "o": [2, 10, 23, 60, 61, 78, 79, 80, 81, 82, 83, 84, 85, 101, 128], "over_sampl": [2, 8, 13, 19, 23, 24, 28, 31, 33, 36, 55, 86, 108, 115, 120, 122, 123, 124, 125, 126], "randomoversampl": [2, 8, 19, 31, 33, 55, 104, 115, 118, 122, 124, 126], "ro": [2, 55, 81], "string": [2, 51, 55, 59, 60, 61, 64, 65, 66, 67, 70, 74, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 113, 115, 117, 121, 122, 126], "which": [2, 4, 5, 6, 7, 10, 13, 20, 23, 24, 26, 28, 31, 32, 36, 39, 40, 44, 45, 46, 47, 51, 54, 55, 56, 59, 60, 61, 64, 65, 66, 67, 68, 69, 73, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 103, 113, 115, 120, 122, 123, 125], "specifi": [2, 16, 36, 39, 60, 61, 62, 64, 65, 66, 67, 71, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 103, 113, 115, 118, 122], "With": [2, 5, 39, 40, 50], "equal": [2, 9, 51, 60, 61, 64, 65, 66, 67, 72, 74, 78, 79, 80, 81, 82, 83, 84, 85, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101], "note": [2, 5, 9, 44, 45, 46, 51, 55, 59, 60, 61, 62, 63, 64, 65, 66, 67, 71, 73, 74, 78, 79, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], "multipl": [2, 6, 55, 113, 115, 121], "now": [2, 5, 16, 24, 28, 33, 36, 44, 51, 78, 79, 82, 83, 84, 85, 115, 118, 124], "each": [2, 8, 10, 20, 31, 36, 39, 40, 41, 44, 46, 47, 50, 51, 55, 59, 60, 61, 62, 63, 64, 65, 66, 67, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 103, 113, 115, 122], "even": [2, 65, 113, 115, 123, 126], "tomeklink": [2, 39, 41, 61, 104, 113], "tl": [2, 99], "when": [2, 7, 13, 24, 31, 33, 36, 44, 46, 47, 48, 51, 55, 59, 60, 61, 63, 64, 65, 66, 67, 68, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 113, 115, 118, 120, 121, 122, 123, 124, 125, 126, 128], "kei": [2, 19, 44, 45, 48, 59, 60, 61, 63, 64, 65, 66, 67, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 115, 125], "valu": [2, 5, 10, 28, 33, 44, 45, 55, 59, 60, 61, 63, 64, 65, 66, 67, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 114, 115, 124, 125, 126], "desir": [2, 19, 47, 60, 61, 63, 64, 65, 66, 67, 78, 79, 80, 81, 82, 83, 84, 85, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 115, 120], "work": [2, 5, 36, 45, 51, 55, 59, 60, 61, 64, 65, 66, 67, 71, 74, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 113, 115, 117, 125, 127], "both": [2, 5, 41, 44, 45, 46, 55, 78, 79, 80, 82, 83, 84, 85, 101, 113, 115, 122], "instead": [2, 5, 19, 20, 31, 45, 46, 55, 62, 64, 65, 66, 67, 71, 78, 79, 82, 83, 84, 85, 86, 87, 101, 113, 115, 117, 118, 120, 121, 122, 126], "15": [2, 10, 13, 16, 20, 21, 31, 32, 39, 40, 41, 45, 46, 62], "25": [2, 6, 7, 10, 13, 16, 19, 21, 31, 36, 39, 45, 62, 72, 73, 128], "35": [2, 3, 45], "contain": [2, 8, 31, 46, 48, 51, 55, 59, 60, 61, 62, 63, 64, 65, 66, 67, 74, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 111, 113, 115, 122, 126], "It": [2, 7, 9, 16, 31, 39, 45, 46, 55, 64, 65, 67, 78, 79, 81, 82, 83, 84, 85, 101, 113, 115, 117, 121, 124, 126], "rais": [2, 5, 60, 61, 62, 64, 65, 66, 67, 70, 78, 79, 80, 81, 82, 83, 84, 85, 86, 90, 93, 94, 97, 100, 101, 115, 118, 120, 121, 122, 125], "error": [2, 60, 61, 64, 65, 66, 67, 78, 79, 80, 81, 82, 83, 84, 85, 86, 90, 93, 94, 97, 100, 101, 114, 115, 121, 122, 125], "otherwis": [2, 64, 65, 66, 67, 71, 74, 75, 76, 77, 86, 90, 113], "function": [2, 7, 9, 13, 16, 19, 31, 36, 39, 40, 41, 45, 46, 47, 50, 51, 54, 55, 59, 60, 61, 63, 64, 65, 66, 67, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 106, 113, 115, 120, 121, 123, 124, 125, 126, 128], "take": [2, 5, 8, 32, 47, 55, 59, 60, 61, 63, 64, 65, 66, 67, 71, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 113, 115, 118, 121, 124], "return": [2, 5, 7, 10, 13, 16, 19, 31, 39, 45, 46, 54, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 115, 120, 121, 122, 126], "def": [2, 7, 10, 13, 16, 19, 31, 39, 40, 41, 45, 46, 54, 59, 103], "ratio_multipli": [2, 45], "collect": [2, 6, 9, 10, 13, 16, 19, 31, 33, 43, 44, 45, 55, 59, 60, 61, 62, 63, 64, 65, 66, 67, 78, 79, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 113], "counter": [2, 6, 9, 10, 13, 16, 19, 20, 31, 33, 43, 44, 45, 55, 59, 60, 61, 63, 64, 66, 78, 79, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 113], "multipli": [2, 16, 45, 65], "7": [2, 13, 28, 31, 32, 33, 36, 40, 41, 45, 49, 51, 52, 53, 55, 62, 64, 74, 122, 124], "95": [2, 6, 8, 9, 45, 93, 128], "target_stat": [2, 16, 45], "item": [2, 31, 41, 43, 44, 45, 55, 59, 113], "int": [2, 16, 45, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "total": [2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 16, 17, 19, 20, 21, 23, 24, 25, 28, 29, 31, 32, 33, 34, 36, 37, 39, 40, 41, 42, 51, 65, 67, 70, 71, 75, 76, 77], "run": [2, 5, 6, 7, 8, 9, 10, 13, 16, 19, 20, 23, 24, 28, 31, 32, 33, 36, 39, 40, 41, 46, 49, 98, 103, 113], "script": [2, 5, 6, 7, 8, 9, 10, 13, 16, 19, 20, 23, 24, 28, 31, 32, 33, 36, 39, 40, 41, 115, 121], "minut": [2, 5, 6, 7, 8, 9, 10, 13, 16, 19, 20, 23, 24, 28, 31, 32, 33, 36, 39, 40, 41], "076": [2, 3], "second": [2, 5, 6, 7, 8, 9, 10, 13, 16, 19, 20, 23, 24, 28, 31, 32, 33, 36, 39, 40, 41, 54, 67], "estim": [2, 4, 5, 6, 8, 9, 10, 11, 13, 16, 19, 20, 23, 24, 26, 28, 31, 32, 33, 35, 36, 39, 40, 41, 44, 47, 50, 54, 59, 60, 61, 64, 65, 66, 67, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 103, 109, 113, 115, 117, 120, 122, 123], "memori": [2, 5, 6, 7, 8, 9, 10, 13, 16, 19, 20, 23, 24, 28, 31, 32, 33, 36, 39, 40, 41, 50, 64, 66, 74, 86, 87, 115, 122, 125, 128], "mb": [2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 16, 17, 19, 20, 21, 23, 24, 25, 28, 29, 31, 32, 33, 34, 36, 37, 39, 40, 41, 42], "sourc": [2, 5, 6, 7, 8, 9, 10, 13, 16, 19, 20, 23, 24, 26, 28, 31, 32, 33, 36, 39, 40, 41, 46, 48, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "plot_sampling_strategy_usag": [2, 3], "py": [2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 16, 17, 19, 20, 21, 23, 24, 25, 28, 29, 31, 32, 33, 34, 36, 37, 39, 40, 41, 42, 46, 49, 103, 115, 123, 126], "jupyt": [2, 5, 6, 7, 8, 9, 10, 13, 16, 19, 20, 23, 24, 26, 28, 31, 32, 33, 36, 39, 40, 41], "notebook": [2, 5, 6, 7, 8, 9, 10, 13, 16, 19, 20, 23, 24, 26, 28, 31, 32, 33, 36, 39, 40, 41], "ipynb": [2, 5, 6, 7, 8, 9, 10, 13, 16, 19, 20, 23, 24, 28, 31, 32, 33, 36, 39, 40, 41], "galleri": [2, 5, 6, 7, 8, 9, 10, 13, 16, 19, 20, 23, 24, 26, 28, 31, 32, 33, 36, 39, 40, 41, 48, 49, 53], "gener": [2, 5, 6, 8, 9, 10, 12, 20, 23, 24, 26, 28, 30, 31, 33, 34, 36, 40, 41, 43, 44, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 103, 104, 114, 115, 120, 122, 124, 126], "sphinx": [2, 5, 6, 7, 8, 9, 10, 13, 16, 19, 20, 23, 24, 26, 28, 31, 32, 33, 36, 39, 40, 41, 49, 53, 115, 126], "00": [3, 6, 7, 9, 11, 14, 17, 21, 25, 29, 34, 36, 37, 42, 70, 86], "02": [3, 13, 14, 25, 31, 39, 42], "execut": [3, 11, 14, 17, 21, 25, 29, 34, 36, 37, 42], "auto_examples_api": 3, "file": [3, 11, 14, 17, 21, 25, 29, 34, 37, 42, 46, 49, 115, 126], "imbalanc": [3, 4, 8, 9, 10, 11, 13, 15, 17, 22, 23, 25, 28, 31, 33, 36, 39, 43, 44, 46, 47, 49, 54, 57, 62, 63, 64, 65, 68, 69, 70, 71, 72, 73, 78, 79, 80, 81, 82, 85, 86, 87, 88, 94, 96, 97, 99, 104, 105, 110, 114, 115, 116, 121, 122, 125, 126, 127, 128], "learn": [3, 7, 10, 13, 20, 22, 23, 25, 31, 35, 39, 43, 44, 45, 46, 47, 49, 51, 54, 60, 62, 63, 64, 65, 66, 67, 71, 73, 78, 79, 80, 81, 82, 85, 86, 87, 90, 93, 94, 97, 99, 104, 107, 112, 113, 114, 115, 116, 117, 118, 121, 122, 123, 124, 125, 126, 127, 128], "word": [4, 26, 113], "multiclass": [4, 11, 26, 63, 70, 71, 75, 76, 77, 86, 87, 94, 102, 115, 121], "classif": [4, 5, 8, 11, 19, 22, 25, 26, 31, 33, 48, 55, 60, 61, 63, 64, 65, 66, 67, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 93, 94, 97, 101, 104, 114, 115, 122, 126, 128], "topic": [4, 11, 26, 70, 86, 87, 97], "text": [4, 11, 26, 70, 86, 87, 97, 113], "document": [4, 11, 26, 44, 46, 70, 86, 87, 97, 104, 124], "custom": [4, 11, 26, 59, 86, 87, 114, 115, 118], "an": [4, 6, 8, 10, 11, 13, 15, 17, 18, 26, 28, 31, 36, 39, 45, 46, 48, 51, 54, 55, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 113, 115, 117, 121, 122, 123, 124, 126, 128], "outlier": [4, 11, 26, 43, 54, 55, 59, 86, 87, 113], "reject": [4, 11, 26, 54, 59, 86, 87, 113, 115, 117], "benchmark": [4, 11, 26, 49, 53, 59, 62, 78, 81, 82, 86, 87, 114, 115, 121], "face": [4, 11, 26, 59, 78, 81, 82, 86, 87], "recognit": [4, 11, 26, 59, 71, 78, 81, 82, 86, 87, 128], "task": [4, 11, 26, 59, 78, 81, 82, 86, 87], "porto": [4, 11, 26, 54, 68], "seguro": [4, 11, 26, 54, 68], "balanc": [4, 6, 11, 16, 18, 20, 23, 24, 26, 27, 30, 39, 44, 45, 50, 51, 54, 60, 61, 64, 65, 66, 67, 68, 69, 70, 71, 73, 80, 88, 95, 111, 113, 114, 115, 120, 122, 128], "mini": [4, 11, 26, 54, 68, 88, 115, 122], "batch": [4, 11, 26, 54, 68, 69, 88, 104, 115, 122, 123], "kera": [4, 11, 26, 69, 104, 114, 115, 122, 123, 125], "fit": [4, 6, 7, 8, 9, 10, 11, 13, 20, 23, 24, 26, 31, 36, 39, 40, 47, 50, 51, 54, 55, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 74, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 115, 118, 124, 126], "model": [4, 7, 8, 9, 10, 11, 19, 20, 24, 28, 31, 36, 39, 44, 54, 63, 64, 65, 68, 69, 86, 87, 88, 97, 122, 128], "fight": [4, 11, 26, 55, 63, 64, 65, 86, 87, 97], "bia": [4, 11, 26, 44, 63, 64, 65, 86, 87, 97, 115, 123], "illustr": [5, 6, 7, 13, 16, 19, 22, 26, 32, 38, 39, 40, 42, 44, 50, 51, 54, 55, 99, 113], "induc": [5, 20, 65], "subsequ": [5, 50, 51, 65, 67, 74], "compar": [5, 10, 12, 14, 18, 21, 26, 30, 34, 38, 42, 43, 47, 51, 55, 59, 60, 61, 62, 64, 65, 66, 67, 71, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 113], "approach": [5, 31, 55, 67, 78, 94, 115, 116, 128], "allevi": [5, 20, 44, 67, 71, 128], "neg": [5, 19, 39, 51, 65, 71, 72, 75, 76, 77, 113, 115, 121], "effect": [5, 10, 13, 26, 30, 34, 44, 50, 64, 65, 66, 67, 73, 81, 86, 113, 115, 118, 128], "drop": [5, 10], "featur": [5, 10, 16, 31, 33, 44, 51, 55, 59, 60, 61, 64, 65, 66, 67, 74, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 113, 125], "fnlwgt": 5, "wa": [5, 10, 46, 64, 65, 66, 74, 78, 79, 82, 83, 84, 85, 102, 115, 117, 118, 120, 122, 123, 124, 125, 126], "creat": [5, 6, 8, 13, 15, 17, 18, 19, 24, 26, 31, 32, 33, 36, 39, 45, 46, 51, 54, 55, 59, 63, 64, 65, 66, 68, 69, 79, 82, 83, 84, 85, 87, 88, 90, 91, 92, 94, 95, 96, 100, 115, 120, 121, 122], "while": [5, 10, 12, 19, 26, 31, 44, 51, 55, 65, 71, 75, 76, 77, 86, 87, 113], "studi": [5, 44, 60, 61, 94, 128], "adult": [5, 44, 55, 113], "thu": [5, 64, 65, 66, 89, 92, 95, 98, 113, 115, 122], "acquir": 5, "survei": 5, "educ": 5, "num": 5, "encod": [5, 10, 51, 74, 83, 84, 102, 115, 118, 122, 125], "same": [5, 8, 20, 24, 31, 32, 40, 46, 47, 50, 55, 59, 60, 61, 65, 67, 70, 78, 79, 80, 81, 82, 83, 84, 85, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 113, 115, 120, 122, 123, 125], "inform": [5, 44, 46, 48, 55, 59, 60, 61, 62, 63, 64, 65, 66, 67, 74, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 115, 123, 128], "than": [5, 8, 9, 13, 20, 24, 33, 39, 43, 44, 51, 55, 64, 65, 66, 67, 89, 92, 95, 98, 113, 115, 118, 125], "remov": [5, 10, 39, 41, 46, 60, 64, 66, 67, 78, 79, 82, 83, 84, 85, 86, 89, 92, 95, 98, 99, 113, 115, 117, 118, 121, 122, 123, 124, 125, 126], "one": [5, 10, 19, 31, 39, 44, 45, 46, 47, 55, 62, 65, 71, 75, 76, 77, 78, 79, 82, 83, 84, 85, 86, 89, 91, 92, 93, 95, 96, 98, 99, 102, 113, 115, 120, 122, 128], "fetch_openml": [5, 44, 45, 55, 113], "df": [5, 45], "version": [5, 6, 31, 39, 45, 46, 48, 49, 53, 55, 59, 60, 61, 62, 64, 65, 66, 67, 68, 70, 72, 74, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 103, 113], "return_x_i": [5, 44, 45, 55, 69, 113], "column": [5, 10, 16, 31, 51, 55, 64, 65, 66, 76, 84, 115, 124], "home": [5, 39], "circleci": [5, 39], "mambaforg": 5, "env": 5, "testenv": 5, "lib": 5, "python3": 5, "site": [5, 62], "packag": [5, 31, 39, 45, 46, 49, 115, 121, 124, 126], "_openml": 5, "1002": [5, 115, 118], "futurewarn": [5, 46, 115, 125], "default": [5, 31, 46, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 113, 115, 118, 121, 123, 125], "parser": 5, "liac": 5, "arff": 5, "auto": [5, 7, 10, 41, 47, 59, 60, 61, 64, 65, 66, 67, 74, 78, 79, 80, 81, 82, 83, 84, 85, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 113, 115, 118], "4": [5, 7, 9, 11, 13, 23, 24, 28, 29, 31, 32, 33, 37, 39, 40, 41, 42, 45, 49, 52, 53, 62, 64, 65, 66, 67, 68, 79, 81, 84, 85, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99], "silenc": 5, "warn": [5, 39, 46, 65, 67, 70, 76, 115, 118, 120, 122, 123, 126], "therefor": [5, 9, 13, 31, 33, 40, 44, 47, 50, 51, 55, 60, 61, 64, 65, 66, 67, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 93, 94, 97, 113, 115, 120, 124], "importerror": 5, "dens": [5, 10, 54, 68, 69, 88, 115, 118, 123], "panda": [5, 8, 10, 16, 19, 45, 49, 51, 53, 55, 84, 86, 113, 115, 124], "instal": [5, 48, 53], "mai": [5, 64, 66, 86, 115, 127], "type": [5, 46, 50, 54, 55, 59, 71, 74, 75, 76, 77, 79, 87, 101, 102, 113, 115, 116, 117, 118, 120, 121, 122, 126], "see": [5, 8, 10, 28, 33, 43, 44, 45, 48, 50, 51, 59, 60, 61, 63, 64, 65, 66, 67, 71, 73, 78, 79, 80, 82, 83, 84, 85, 86, 89, 91, 92, 93, 94, 95, 96, 98, 99, 106], "section": [5, 19, 44, 46, 106, 113], "": [5, 8, 10, 13, 19, 28, 32, 33, 36, 40, 41, 43, 44, 45, 46, 49, 51, 54, 55, 59, 60, 61, 62, 64, 65, 66, 67, 71, 74, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 114, 128], "doc": [5, 46, 49, 53], "about": [5, 44, 48], "3": [5, 7, 8, 9, 13, 16, 19, 20, 24, 28, 31, 32, 33, 36, 39, 41, 43, 45, 47, 49, 52, 53, 54, 55, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 78, 79, 81, 82, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 113, 116, 118, 120, 122, 128], "classes_count": 5, "50k": [5, 44], "37155": 5, "11687": 5, "name": [5, 10, 16, 19, 45, 47, 55, 59, 60, 61, 62, 64, 65, 66, 67, 70, 74, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 103], "count": [5, 31, 71, 74, 75, 76, 77, 83], "dtype": [5, 7, 8, 19, 31, 51, 54, 55, 65, 74, 83, 84, 113, 115, 122], "int64": [5, 54, 84], "slightli": [5, 9, 39, 55], "To": [5, 9, 44, 46, 48, 50, 54, 71], "better": [5, 8, 9, 80, 115, 124], "highlight": [5, 40, 41, 44, 113], "increas": [5, 20, 33, 39, 44, 113], "its": [5, 20, 40, 46, 55, 65, 76, 86, 101, 103, 115, 122], "30": [5, 31, 45, 55, 63, 68, 69, 74, 83], "df_re": 5, "idxmin": [5, 8], "max": [5, 13, 19, 31, 39], "1238": 5, "perform": [5, 8, 10, 19, 20, 26, 30, 39, 44, 45, 46, 47, 55, 64, 65, 66, 70, 71, 75, 76, 77, 81, 82, 86, 87, 94, 96, 97, 106, 108, 113, 115, 126], "cross": [5, 8, 10, 28, 44, 60, 61, 64, 65, 66, 78, 79, 80, 82, 83, 84, 85, 86, 89, 91, 92, 93, 94, 95, 96, 98, 99, 113], "valid": [5, 8, 10, 20, 26, 27, 29, 44, 54, 59, 60, 61, 64, 65, 66, 78, 79, 80, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 101, 104, 113, 114, 115, 117, 120, 121, 124, 126], "evalu": [5, 8, 19, 20, 24, 25, 28, 44, 51, 64, 70, 82, 86, 87, 115, 122, 128], "get": [5, 8, 19, 23, 24, 44, 48, 51, 59, 60, 61, 62, 64, 65, 66, 67, 74, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 113, 115, 118, 121, 123], "test": [5, 6, 7, 8, 9, 10, 20, 23, 24, 44, 53, 64, 65, 66, 67, 103, 104, 115, 122, 125, 126], "score": [5, 7, 19, 28, 36, 44, 64, 65, 66, 67, 71, 73, 75, 76, 77, 86, 106, 115, 120, 124], "As": [5, 9, 44, 46, 50, 55, 113, 115, 122], "could": [5, 9, 78, 79, 80, 82, 83, 84, 85, 113, 115, 123, 126], "alwai": [5, 46, 113], "predict": [5, 6, 7, 9, 10, 13, 20, 23, 24, 31, 36, 39, 44, 47, 50, 64, 65, 66, 67, 86], "independ": [5, 31, 55, 66, 81, 90, 97, 113], "provid": [5, 6, 8, 13, 23, 24, 36, 45, 46, 47, 48, 50, 54, 55, 56, 57, 64, 65, 66, 67, 74, 86, 105, 107, 108, 110, 111, 115, 120, 122, 127], "dummyclassifi": 5, "model_select": [5, 6, 8, 10, 19, 20, 23, 24, 28, 36, 44, 47, 64, 66, 86, 115, 120], "cross_valid": [5, 19, 44, 115, 120], "dummy_clf": 5, "most_frequ": [5, 10], "accuraci": [5, 7, 10, 20, 24, 36, 44, 51, 54, 64, 65, 66, 67, 68, 69, 70, 71, 73, 86], "balanced_accuraci": [5, 19, 44, 54], "cv_result": [5, 19, 44], "f": [5, 6, 8, 9, 10, 13, 16, 19, 20, 24, 31, 32, 39, 40, 44, 45, 51, 54, 59, 62, 63, 71, 74, 75, 76, 77, 83, 84, 86, 128], "test_accuraci": 5, "mean": [5, 8, 19, 20, 24, 28, 44, 54, 60, 61, 64, 65, 66, 67, 70, 71, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 89, 91, 92, 93, 94, 95, 96, 98, 99, 113, 114, 128], "3f": [5, 10, 19, 24, 44, 54], "968": 5, "account": [5, 24, 32, 71, 75, 76, 77, 115, 118, 124], "issu": [5, 20, 31, 39, 43, 44, 46, 48, 50, 55, 115, 120, 123, 124, 125], "test_balanced_accuraci": 5, "500": [5, 7, 39, 91, 115, 123], "dictionari": [5, 45, 46, 51, 54, 59, 60, 61, 63, 65, 70, 78, 79, 80, 81, 82, 83, 84, 85, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 115, 121, 122, 126], "list": [5, 31, 39, 40, 49, 50, 64, 65, 66, 67, 70, 74, 86, 87, 89, 91, 92, 95, 96, 98, 99, 101, 103, 115, 120, 122, 124], "continu": [5, 31, 49, 55, 78, 79, 80, 81, 82, 83, 84, 85, 115, 122], "store": [5, 44, 62, 64, 66], "result": [5, 6, 9, 20, 28, 31, 43, 44, 55, 65, 71, 75, 76, 77, 86, 113, 115, 122, 123, 124, 125], "our": [5, 7, 44, 54, 113], "experi": [5, 20, 89, 98, 128], "them": [5, 8, 55, 72, 113], "datafram": [5, 10, 16, 45, 50, 51, 55, 59, 60, 61, 63, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 113, 115, 124], "index": [5, 24, 65, 70, 73, 99], "befor": [5, 7, 20, 31, 36, 44, 47, 49, 50, 55, 63, 64, 73, 79, 80, 81, 82, 83, 84, 85, 86, 87, 115, 122, 123], "real": [5, 44, 64, 65, 66, 67, 115, 121], "obtain": [5, 43, 64, 65, 113, 115, 120, 122], "pd": [5, 8, 10, 16, 19, 115, 118], "append": [5, 8, 10, 44, 46, 80], "df_score": 5, "967755": 5, "pipelin": [5, 6, 8, 13, 19, 23, 24, 28, 31, 37, 39, 43, 44, 54, 59, 60, 61, 64, 65, 66, 67, 74, 78, 79, 80, 81, 82, 83, 84, 85, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 104, 115, 120, 121, 122, 123, 124, 125], "logisticregress": [5, 6, 7, 13, 23, 24, 31, 39, 55, 103, 113], "In": [5, 8, 10, 13, 18, 19, 20, 26, 28, 33, 40, 41, 43, 44, 46, 47, 51, 54, 55, 61, 64, 65, 66, 67, 78, 91, 92, 94, 96, 99, 113, 115, 122, 124, 128], "need": [5, 28, 51, 55, 73, 81, 86, 100, 115, 125], "hot": [5, 10, 84], "categor": [5, 10, 26, 31, 38, 51, 55, 74, 78, 79, 80, 81, 82, 83, 84, 85, 115, 118, 122, 125, 126], "standard": [5, 10, 84, 115, 122, 125], "numer": [5, 10, 31, 44, 51, 55, 81, 84, 97, 115, 125], "inject": 5, "imput": [5, 10], "simpleimput": [5, 10], "make_pipelin": [5, 6, 7, 8, 9, 10, 13, 23, 24, 28, 31, 36, 39, 44, 86, 104, 115, 122], "preprocess": [5, 6, 10, 23, 24, 44, 51, 59, 73, 74, 87, 128], "onehotencod": [5, 10, 84, 115, 118], "standardscal": [5, 6, 10, 23, 24, 87], "num_pip": 5, "add_ind": 5, "cat_pip": 5, "constant": 5, "fill_valu": 5, "miss": [5, 93, 97], "handle_unknown": [5, 84], "ignor": [5, 64, 65, 66, 67, 70, 71, 75, 76, 77, 84, 86], "Then": [5, 40, 54, 55, 113], "preprocessor": [5, 10], "dispatch": 5, "compos": [5, 10, 31, 51], "make_column_selector": 5, "selector": 5, "make_column_transform": 5, "preprocessor_linear": 5, "dtype_includ": 5, "categori": [5, 9, 10, 31, 46, 51, 55, 74, 115, 118], "n_job": [5, 44, 60, 61, 64, 65, 66, 78, 79, 80, 82, 83, 84, 85, 89, 91, 92, 93, 94, 95, 96, 98, 99, 115, 117, 125], "final": [5, 36, 46, 65, 86, 87, 115, 123], "connect": [5, 55], "linear_model": [5, 6, 7, 13, 23, 24, 31, 39, 55, 103, 113], "lr_clf": 5, "max_it": [5, 23, 24, 98], "1000": [5, 10, 31, 39, 59, 60, 61, 64, 65, 66, 67, 78, 79, 81, 82, 84, 85, 86, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 115, 118], "logist": [5, 31, 54], "regress": [5, 31, 54, 64, 65, 66, 115, 117, 122, 128], "500000": 5, "970880": 5, "575012": 5, "howev": [5, 9, 13, 20, 31, 44, 47, 55, 84, 113], "impact": [5, 16, 28, 31, 113, 115, 117], "imbal": [5, 20, 44, 66, 67, 71, 73, 75, 76, 77, 107, 128], "verifi": 5, "someth": [5, 55], "similar": [5, 23, 44, 51, 64, 78, 113], "happen": [5, 9, 24, 36, 46, 51, 86], "tree": [5, 28, 64, 65, 67, 103, 114, 115, 122, 123], "base": [5, 50, 64, 65, 66, 67, 70, 73, 74, 78, 80, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 113, 115, 120, 121, 126, 128], "randomforestclassifi": [5, 20, 47], "scale": [5, 10], "ordin": [5, 51, 72, 83, 115, 126, 128], "ensembl": [5, 7, 19, 21, 44, 62, 71, 104, 114, 115, 116, 120, 121, 122, 123, 124, 125, 126, 128], "ordinalencod": [5, 51, 74, 83, 115, 118], "use_encoded_valu": 5, "unknown_valu": 5, "preprocessor_tre": 5, "rf_clf": 5, "random_st": [5, 6, 7, 8, 10, 13, 16, 19, 20, 23, 24, 28, 31, 33, 36, 39, 43, 44, 45, 47, 54, 55, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 113, 115, 120, 122, 124], "42": [5, 6, 7, 8, 10, 23, 24, 28, 31, 36, 45, 54, 55, 60, 61, 62, 63, 64, 66, 68, 69, 78, 79, 80, 81, 82, 84, 85, 86, 90, 91, 93, 96, 97], "random": [5, 7, 8, 10, 16, 19, 26, 30, 32, 34, 40, 41, 54, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 78, 79, 80, 81, 82, 83, 84, 85, 88, 90, 91, 93, 94, 96, 97, 114, 115, 116, 122, 124, 126, 128], "forest": [5, 64, 65, 66, 67, 114, 115, 122, 128], "971740": 5, "642223": 5, "affect": [5, 7, 20, 50, 113], "less": [5, 7, 9, 31, 33, 55, 65, 89, 92, 95, 98, 113], "present": [5, 10, 40, 43, 55, 60, 61, 62, 71, 75, 76, 77, 82, 115, 124], "improv": [5, 8, 9, 10, 20, 95, 115, 121, 124, 128], "most": [5, 18, 26, 28, 39, 55, 113], "comput": [5, 8, 19, 40, 51, 55, 64, 65, 66, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 89, 91, 92, 94, 95, 96, 98, 106, 113, 115, 124, 126, 128], "loss": [5, 10, 54, 68, 69, 72], "criterion": [5, 65, 67, 113, 115, 120], "penal": 5, "fals": [5, 10, 16, 19, 20, 40, 46, 47, 54, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 75, 76, 77, 86, 87, 88, 89, 97, 102, 115, 126], "weight": [5, 7, 13, 19, 23, 24, 28, 31, 33, 36, 39, 43, 47, 51, 54, 55, 59, 60, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 81, 82, 84, 85, 86, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 113], "appli": [5, 9, 13, 43, 44, 55, 64, 65, 66, 67, 79, 80, 81, 82, 83, 84, 85, 86, 89, 95, 113, 115, 122, 123], "invers": [5, 65, 86, 115, 122], "proport": [5, 19, 51, 55, 64, 65, 66], "frequenc": [5, 65], "parametr": [5, 85, 103], "set_param": [5, 31, 59, 60, 61, 64, 65, 66, 67, 74, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], "logisticregression__class_weight": 5, "811137": 5, "821215": 5, "randomforestclassifier__class_weight": 5, "964837": 5, "639436": 5, "realli": 5, "still": [5, 46, 115, 122], "bias": [5, 31], "toward": [5, 31, 44, 74, 128], "mainli": [5, 9, 24, 44, 113, 115, 127], "due": [5, 9, 31, 33, 44, 113, 115, 124, 125], "suit": 5, "enough": [5, 113], "anoth": [5, 20, 46, 47, 62, 86, 113], "wai": [5, 39, 40, 44, 55, 113], "do": [5, 6, 39, 44, 46, 54, 64, 66, 113], "process": [5, 26, 38, 44, 46, 55, 64, 65, 66], "make_pipeline_with_sampl": 5, "803740": 5, "819741": 5, "809288": 5, "811267": 5, "allow": [5, 6, 9, 10, 13, 20, 31, 33, 40, 41, 45, 46, 47, 51, 54, 55, 59, 64, 65, 66, 67, 86, 89, 103, 113, 115, 117, 118, 122, 123, 124], "focu": [5, 31, 55, 113], "cost": [5, 9, 65], "more": [5, 9, 13, 33, 43, 44, 48, 51, 55, 59, 60, 61, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 113, 115, 118], "mistak": 5, "decreas": [5, 65], "ani": [5, 13, 18, 24, 26, 31, 43, 44, 46, 51, 54, 55, 59, 65, 73, 78, 79, 80, 82, 83, 84, 85, 86, 113, 115, 118, 126], "find": [5, 19, 46, 49, 55, 71, 75, 76, 77, 80, 89, 91, 92, 94, 95, 96, 98, 113], "best": [5, 65, 71, 72, 75, 77], "current": [5, 7, 46, 49, 51, 55, 65, 102, 113, 115, 122], "intern": [5, 20, 39, 46, 65, 76, 78, 85, 113, 115, 124, 128], "alreadi": [5, 31, 78, 79, 82, 83, 84, 85], "decis": [5, 13, 31, 39, 50, 55, 64, 65, 66, 67, 92, 113, 115, 123], "onc": [5, 54, 55], "bootstrap": [5, 19, 20, 31, 33, 47, 55, 64, 65, 66, 67, 81, 113, 115, 122, 126], "balancedrandomforestclassifi": [5, 20, 47, 64, 66, 67, 104, 115, 118, 122, 124, 125], "balancedbaggingclassifi": [5, 19, 20, 47, 65, 66, 67, 104, 115, 117, 125, 126], "all": [5, 8, 9, 20, 26, 39, 41, 44, 45, 46, 47, 49, 54, 55, 59, 60, 61, 62, 64, 65, 66, 67, 74, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 113, 115, 117, 121, 122, 124], "replac": [5, 19, 20, 39, 47, 55, 64, 65, 66, 67, 81, 86, 90, 97, 113, 115, 116, 117, 118, 120, 122], "835803": 5, "820692": 5, "singl": [5, 51, 54, 55, 65, 80, 98, 115, 120], "gradient": [5, 54, 68, 69, 88], "boost": [5, 19, 64, 65, 66, 67, 104, 114, 115, 122, 128], "within": [5, 19, 46, 54, 86, 87, 115, 126], "histgradientboostingclassifi": [5, 44], "bag_clf": 5, "n_estim": [5, 20, 47, 64, 65, 66, 67], "bag": [5, 18, 21, 26, 59, 64, 65, 66, 67, 81, 82, 86, 97, 104, 114, 115, 122, 126, 128], "histogram": 5, "839893": 5, "827095": 5, "last": [5, 31, 55, 80, 84, 86, 115, 122, 128], "bring": [5, 115, 122], "divers": [5, 19, 64, 128], "gbdt": 5, "portion": 5, "158": [5, 11], "109": [5, 115, 120], "plot_impact_imbalanced_class": [5, 11], "those": [6, 31, 43, 51, 55], "binari": [6, 8, 19, 46, 48, 55, 60, 61, 64, 65, 66, 67, 71, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 90, 93, 94, 97, 101, 102, 115, 120, 122], "train": [6, 7, 8, 9, 10, 18, 20, 23, 24, 26, 44, 47, 50, 54, 55, 60, 61, 64, 65, 66, 67, 68, 69, 71, 74, 81, 86, 88, 96, 113, 115, 122, 128], "statist": [6, 19, 44, 55, 59, 60, 61, 64, 74, 78, 79, 80, 81, 82, 83, 84, 85, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 128], "38": 6, "12": [6, 31, 40, 41, 42, 45, 48, 62, 64, 65, 66, 67, 74, 78, 79, 82, 83, 84, 85, 117, 122, 128], "pre": [6, 9, 23, 49, 70, 113], "rec": [6, 9, 23, 70], "spe": [6, 9, 23, 70], "f1": [6, 7, 9, 23, 36, 70, 86], "geo": [6, 9, 23, 70], "iba": [6, 9, 23, 24, 70, 73], "sup": [6, 9, 23, 51, 70], "88": [6, 9, 23], "58": [6, 32], "70": [6, 9, 70], "74": [6, 23, 45, 62], "53": 6, "69": [6, 9], "92": [6, 7, 9, 81, 128], "75": [6, 7, 9, 16, 54, 70, 77], "79": [6, 9], "83": [6, 9], "avg": [6, 7, 9, 23, 36, 40, 51, 70, 86], "84": [6, 9, 23], "81": [6, 9], "89": [6, 9, 23], "71": 6, "32": [6, 45, 54, 62, 68, 69, 88], "train_test_split": [6, 20, 23, 24, 36, 44, 47, 64, 66, 86], "metric": [6, 7, 8, 9, 10, 20, 22, 23, 25, 26, 28, 36, 44, 47, 54, 55, 64, 65, 66, 67, 68, 69, 72, 74, 75, 76, 77, 82, 86, 87, 104, 114, 115, 120, 122, 124, 125, 126], "classification_report_imbalanc": [6, 9, 23, 51, 104, 115, 118, 122, 126], "nearmiss": [6, 26, 38, 39, 42, 68, 69, 93, 97, 104, 113, 115, 116, 120, 121, 122], "folder": [6, 62], "fetch": [6, 45, 62, 64, 66, 115, 121], "50": [6, 7, 10, 20, 31, 45, 55, 63, 67, 68, 69, 70], "x_train": [6, 7, 9, 10, 20, 23, 24, 36, 47, 64, 66, 86], "x_test": [6, 7, 9, 10, 20, 23, 24, 36, 47, 51, 64, 66, 74, 86], "y_train": [6, 7, 9, 10, 20, 23, 24, 36, 47, 64, 66, 86], "y_test": [6, 7, 9, 10, 20, 23, 24, 36, 47, 64, 66, 86], "classifi": [6, 7, 8, 9, 13, 18, 21, 23, 24, 26, 28, 31, 36, 39, 44, 50, 51, 55, 59, 62, 64, 65, 66, 67, 70, 71, 72, 75, 76, 77, 81, 82, 85, 86, 93, 94, 97, 113, 114, 115, 122, 125], "report": [6, 9, 10, 20, 22, 25, 26, 44, 70, 71, 75, 76, 77, 82, 86, 87], "220": [6, 11, 113], "9": [6, 8, 9, 11, 14, 16, 17, 19, 20, 21, 23, 24, 25, 28, 29, 32, 33, 34, 36, 37, 40, 41, 42, 45, 49, 51, 52, 53, 54, 59, 60, 61, 62, 64, 65, 66, 67, 74, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 117, 125], "plot_multi_class_under_sampl": [6, 11], "easili": [7, 54], "vari": [7, 28, 50, 89], "dure": [7, 18, 26, 28, 31, 33, 54, 55, 59, 60, 61, 64, 65, 66, 67, 68, 74, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 115, 120, 122, 124], "usual": [7, 13, 20, 50, 51, 74], "limit": 7, "numpi": [7, 8, 10, 13, 19, 31, 32, 39, 40, 41, 44, 49, 50, 51, 53, 54, 55, 59, 70, 72, 74, 75, 76, 77, 80, 83, 84, 113, 115, 124], "np": [7, 8, 10, 13, 19, 31, 32, 39, 40, 41, 44, 51, 54, 55, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 88, 90, 91, 93, 96, 97, 113], "make_blob": [7, 80], "make_moon": [7, 16], "isolationforest": 7, "classification_report": [7, 36, 86], "rng": [7, 31, 32, 40, 41, 54, 55], "randomst": [7, 31, 32, 40, 41, 54, 55, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 78, 79, 80, 81, 82, 83, 84, 85, 88, 90, 91, 93, 96, 97], "plot_scatt": 7, "scatter": [7, 13, 16, 28, 31, 32, 33, 39, 40, 41], "figur": [7, 10, 41, 55, 113], "label": [7, 8, 28, 32, 40, 41, 45, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], "legend": [7, 8, 28, 32, 33, 40, 41], "non": [7, 20, 65, 72, 115, 124], "gaussian": 7, "contamin": 7, "unform": 7, "nois": [7, 16, 33, 39, 55, 113], "moon": 7, "n_sampl": [7, 13, 16, 19, 23, 24, 28, 31, 33, 36, 39, 43, 47, 54, 55, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 113], "05": [7, 31, 39, 43, 47, 54, 55, 113], "blob": [7, 80], "center": [7, 80], "cluster_std": 7, "uniform": [7, 32], "low": [7, 9, 39], "high": [7, 65, 67], "size": [7, 19, 31, 32, 54, 55, 84, 85, 89, 91, 92, 94, 95, 96, 98], "vstack": [7, 41, 113], "hstack": [7, 19], "ones": 7, "shape": [7, 10, 13, 31, 39, 40, 41, 45, 54, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 113, 115, 120], "int8": [7, 8], "zero": [7, 65, 70, 71], "randint": [7, 31, 32, 55, 84], "without": [7, 19, 31, 44, 55, 81, 89, 97, 115, 125], "elimin": 7, "pass": [7, 19, 45, 46, 54, 55, 59, 63, 64, 65, 66, 67, 78, 79, 80, 82, 83, 84, 85, 86, 100, 101, 115, 117, 118, 121, 122, 124, 125, 126], "call": [7, 24, 36, 46, 47, 51, 54, 59, 64, 65, 66, 68, 80, 86, 113, 115, 126], "outlier_reject": 7, "resampl": [7, 8, 9, 13, 18, 19, 21, 24, 26, 31, 36, 39, 44, 45, 47, 50, 55, 59, 60, 61, 62, 63, 64, 65, 66, 67, 71, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 113, 115, 121, 122, 124, 126], "max_sampl": [7, 64, 65, 115, 124], "100": [7, 8, 10, 13, 31, 32, 33, 45, 47, 54, 59, 60, 61, 62, 64, 65, 66, 78, 79, 80, 81, 82, 84, 85, 86, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99], "y_pred": [7, 9, 10, 24, 36, 46, 47, 54, 64, 66, 70, 71, 72, 73, 75, 76, 77, 86, 115, 122], "reject_sampl": 7, "func": [7, 10, 19, 54, 59], "x_inlier": 7, "y_inlier": 7, "By": [7, 31, 59, 62, 64, 65, 68, 69, 76, 80, 86, 87, 88, 89, 90, 94, 95, 113, 115, 116, 120, 121, 122], "elimn": 7, "pipe": 7, "solver": [7, 113], "lbfg": [7, 113], "multi_class": [7, 113], "clf": [7, 13, 31, 39, 55, 65, 67], "precis": [7, 36, 51, 70, 71, 75, 76, 77, 86, 99], "recal": [7, 9, 36, 46, 51, 70, 71, 75, 76, 77, 86], "support": [7, 31, 36, 46, 48, 50, 51, 55, 59, 60, 61, 64, 65, 66, 67, 71, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 113, 115, 116, 117, 118, 120, 121, 122, 123], "macro": [7, 36, 71, 72, 75, 76, 77, 86, 114], "85": [7, 9, 20, 45, 54, 62, 64], "82": [7, 9, 70], "90": [7, 9, 33, 45, 62, 70], "91": [7, 9], "493": [7, 11], "plot_outlier_reject": [7, 11], "two": [8, 10, 13, 19, 24, 31, 36, 39, 43, 44, 46, 47, 51, 55, 74, 99, 113, 115, 120, 128], "lfw": 8, "wild": 8, "sever": [8, 19, 31, 47, 60, 86, 89, 98, 100, 128], "conjunct": [8, 19], "3nn": 8, "order": [8, 36, 39, 62, 64, 65, 66, 67, 70, 71, 75, 76, 77, 86, 89, 91, 92, 95, 96, 98, 111, 115, 121], "examin": [8, 28], "output": [8, 50, 51, 59, 60, 61, 65, 67, 70, 72, 74, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 113, 115, 124], "qualiti": [8, 51, 65], "imag": [8, 49, 51, 53, 55], "know": 8, "person": 8, "build": [8, 44, 47, 49, 53, 64, 65, 66, 67, 70, 91, 96, 109, 115, 121], "recogn": 8, "problem": [8, 19, 23, 24, 65, 67, 71, 80, 114, 115, 120, 121, 128], "pictur": [8, 44], "georg": 8, "w": [8, 64, 65, 66, 67, 79, 82, 83, 84, 85, 128], "bush": 8, "bill": 8, "clinton": 8, "fetch_lfw_peopl": 8, "george_bush_id": 8, "1871": 8, "photo": 8, "bill_clinton_id": 8, "531": [8, 45, 62, 115, 123], "classes_nam": 8, "arrai": [8, 31, 32, 41, 46, 51, 54, 55, 59, 60, 61, 63, 64, 65, 66, 67, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 113, 115, 118, 120, 122, 124], "b": [8, 31, 45, 46, 55, 61, 62, 66, 83, 128], "object": [8, 31, 36, 46, 50, 55, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 74, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 113, 115, 117, 120, 121, 122], "mask_photo": 8, "astyp": [8, 10, 31, 54, 55], "check": [8, 20, 44, 46, 48, 54, 59, 60, 61, 64, 65, 66, 67, 74, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 115, 121, 124], "between": [8, 19, 31, 32, 33, 39, 43, 46, 51, 55, 65, 67, 71, 74, 75, 76, 77, 113, 115, 120, 126], "class_distribut": 8, "seri": [8, 19, 50, 115, 124], "normal": [8, 19, 31, 33, 36, 46, 65, 67, 81, 113, 115, 123], "barh": 8, "distribut": [8, 9, 13, 16, 19, 28, 44, 46, 63, 78, 94, 95, 128], "pos_label": [8, 71, 75, 76, 77], "posit": [8, 51, 71, 75, 76, 77, 113, 115, 125], "consid": [8, 31, 39, 51, 55, 65, 89, 91, 92, 94, 95, 96, 98, 113, 115, 122], "belong": [8, 55, 99, 113], "knn": [8, 36, 86, 94, 128], "presid": 8, "through": [8, 45, 49, 50, 65, 113], "roc": [8, 10], "curv": [8, 26, 27, 29, 82, 86, 87], "neighbor": [8, 28, 31, 36, 39, 40, 41, 55, 74, 78, 79, 80, 82, 83, 84, 85, 86, 89, 90, 91, 92, 95, 96, 98, 100, 114, 115, 117, 128], "kneighborsclassifi": [8, 36, 86, 91, 96], "functionsampl": [8, 19, 31, 39, 54, 104, 115, 124, 126], "adasyn": [8, 79, 80, 81, 82, 83, 84, 85, 104, 114, 115, 116, 117, 120, 122, 124, 128], "n_neighbor": [8, 36, 40, 78, 89, 91, 92, 94, 95, 96, 98, 113, 115, 120, 123], "stratifiedkfold": [8, 10], "cv": [8, 28, 93, 113], "n_split": [8, 10], "split": [8, 9, 10, 20, 23, 24, 36, 44, 65], "roccurvedisplai": 8, "auc": [8, 10], "roc_curv": 8, "disp": [8, 20], "fpr": 8, "tpr": 8, "mean_tpr": 8, "mean_fpr": 8, "linspac": 8, "y_proba": [8, 86], "predict_proba": [8, 10, 36, 64, 65, 66, 67, 86, 93, 113], "pos_label_idx": 8, "flatnonzero": [8, 19], "classes_": [8, 46, 64, 65, 66, 67, 86], "threshold": [8, 80, 93, 95, 114, 115, 116], "interp": 8, "get_n_split": 8, "mean_auc": 8, "displai": [8, 70], "reus": [8, 19, 51, 64, 65, 66], "aggreg": 8, "roc_auc": [8, 10], "estimator_nam": 8, "__class__": [8, 13, 31, 39], "__name__": [8, 13, 31, 39], "previou": [8, 20, 64, 65, 66, 113], "cell": 8, "d": [8, 19, 50, 64, 92, 93, 113, 128], "linestyl": 8, "color": [8, 40, 51, 55], "axi": [8, 10, 28, 40, 54, 113], "squar": [8, 24, 71, 73], "suptitl": [8, 28, 31, 41], "comparison": [8, 20, 31, 39], "nwith": 8, "set_xlim": [8, 28, 32, 40, 41], "set_ylim": [8, 28, 32, 40, 41], "despin": [8, 10, 13, 16, 28, 31, 32, 39, 40, 41], "offset": [8, 13, 16, 28, 31, 32, 39, 40, 41], "loc": [8, 28, 33, 40, 41], "lower": [8, 28, 33, 41, 67, 113], "right": [8, 10, 28, 41, 44, 65, 115, 120], "fontsiz": [8, 28, 32, 40], "new": [8, 26, 30, 31, 32, 33, 43, 46, 48, 55, 59, 60, 61, 62, 64, 65, 66, 67, 68, 70, 72, 74, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 111, 113, 118, 128], "interpol": [8, 32, 43, 55], "34": [8, 11, 32, 45, 62, 128], "693": [8, 11], "190": [8, 11], "plot_over_sampling_benchmark_lfw": [8, 11], "signific": 9, "part": [9, 20, 66, 67, 128], "newsgroup": 9, "load": [9, 62, 114], "loader": 9, "ha": [9, 20, 23, 24, 46, 51, 59, 60, 61, 64, 65, 66, 67, 68, 69, 70, 74, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 113, 115, 117, 120, 121, 122, 124], "almost": [9, 113], "twice": 9, "fetch_20newsgroup": 9, "alt": 9, "atheism": 9, "talk": 9, "religion": 9, "misc": 9, "comp": 9, "graphic": 9, "sci": 9, "space": [9, 13, 31, 39, 43, 86, 113], "newsgroups_train": 9, "subset": [9, 16, 47, 58, 64, 65, 66, 67, 94, 113, 115, 122], "newsgroups_test": 9, "summari": [9, 70, 114], "593": 9, "584": 9, "480": [9, 115, 122], "377": 9, "394": [9, 115, 122], "389": [9, 45, 62], "319": 9, "251": 9, "might": [9, 44, 55, 64, 65, 115, 123, 124, 125], "combin": [9, 14, 24, 36, 58, 82, 86, 87, 104, 114, 115, 120, 121], "tf": [9, 54], "idf": 9, "vector": [9, 31, 51, 55, 74, 99, 115, 116, 124], "feed": 9, "multinomi": 9, "naiv": [9, 39, 114], "bay": 9, "summar": [9, 51], "expect": [9, 50, 55, 59, 64, 66, 74, 83, 86], "feature_extract": 9, "tfidfvector": 9, "naive_bay": [9, 87], "multinomialnb": 9, "67": [9, 54, 70], "94": [9, 31, 43, 47, 54, 55, 113], "86": [9, 20, 23], "96": [9, 51, 74, 86], "99": [9, 36, 86], "87": [9, 20, 23, 70, 86], "98": [9, 23, 31, 39, 86], "97": [9, 51, 96, 128], "36": [9, 45, 62, 64, 71, 128], "52": [9, 45, 62], "60": [9, 70], "33": [9, 11, 31, 39, 42, 45, 49, 52, 53, 62, 75, 76], "78": 9, "1353": 9, "interest": [9, 40, 41, 89, 92, 95, 98, 113], "also": [9, 39, 43, 44, 45, 48, 49, 51, 55, 59, 65, 66, 67, 70, 81, 86, 113, 115, 122, 124, 126], "properli": [9, 115, 123], "handl": [9, 31, 87, 115, 118, 120, 121, 124], "make_pipeline_imb": 9, "although": 9, "ident": [9, 39, 43, 59], "seen": [9, 31, 55, 59, 60, 61, 64, 65, 66, 67, 74, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 113], "correct": [9, 44, 70, 71, 72, 73, 75, 76, 77, 115, 120, 123], "poor": 9, "reduc": [9, 10, 26, 38, 64, 66, 113], "other": [9, 41, 43, 45, 51, 55, 64, 65, 66, 67, 71, 74, 86, 113, 115, 120, 121, 128], "overal": 9, "76": [9, 20], "80": [9, 70], "685": [9, 11], "111": [9, 11, 62], "plot_topic_class": [9, 11], "strategi": [10, 31, 55, 60, 61, 63, 68, 69, 71, 88, 89, 90, 92, 95, 98, 113, 115, 117, 123, 128], "kaggl": 10, "www": 10, "c": [10, 13, 16, 31, 33, 39, 49, 51, 55, 60, 64, 67, 74, 83, 95, 113, 128], "safe": [10, 55], "driver": 10, "should": [10, 24, 31, 36, 39, 44, 46, 51, 55, 59, 60, 61, 64, 65, 66, 67, 68, 69, 74, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 102, 113, 115, 122], "link": [10, 12, 13, 26, 38, 40, 42, 43, 48, 60, 61, 78, 89, 98, 99, 114, 115, 116, 124], "introduct": [10, 114], "training_data": 10, "read_csv": 10, "input": [10, 46, 54, 59, 60, 61, 64, 65, 66, 67, 68, 69, 74, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 115, 124], "csv": 10, "testing_data": 10, "id": [10, 45, 62, 103], "set_index": 10, "columntransform": 10, "functiontransform": 10, "convert_float64": 10, "float64": [10, 19], "want": [10, 19, 47, 49], "numerical_column": 10, "_calc_": 10, "_bin": 10, "numerical_pipelin": 10, "categorical_column": 10, "_cat": 10, "categorical_pipelin": 10, "missing_valu": 10, "numerical_preprocess": 10, "categorical_preprocess": 10, "remaind": 10, "environ": 10, "variabl": [10, 54], "avoid": [10, 44, 50, 74, 75, 76, 77, 115, 120, 122], "gpu": 10, "cuda_visible_devic": 10, "tensorflow": [10, 68, 69, 88, 104, 114, 115, 122, 123], "layer": [10, 54, 68, 69, 115, 123], "activ": [10, 54, 68, 69, 115, 123, 125], "batchnorm": [10, 115, 123], "dropout": 10, "sequenti": [10, 54, 68, 69, 86], "make_model": 10, "n_featur": [10, 13, 19, 23, 24, 28, 31, 33, 36, 39, 43, 47, 54, 55, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 74, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 113], "add": [10, 33, 46, 51, 54, 64, 65, 66, 68, 69, 80, 113, 115, 117, 120, 121, 122, 123, 124, 126], "200": [10, 16, 40, 41, 47], "input_shap": 10, "kernel_initi": 10, "glorot_norm": 10, "relu": 10, "use_bia": 10, "sigmoid": 10, "compil": [10, 22, 25, 26, 54, 68, 69, 70, 82, 86, 87], "binary_crossentropi": 10, "optim": [10, 54, 55, 68, 69], "adam": 10, "decor": [10, 40, 46, 73, 103], "functool": 10, "wrap": [10, 51, 73], "timeit": 10, "wrapper": 10, "arg": [10, 59], "kwd": 10, "start_tim": 10, "elapsed_tim": 10, "elaps": [10, 86, 87], "sec": 10, "roc_auc_scor": 10, "util": [10, 54, 64, 65, 66, 67, 68, 69, 86, 100, 101, 102, 103, 104, 105, 109, 110, 114, 115, 121, 123, 124, 126], "parse_vers": 10, "tf_version": 10, "__version__": 10, "fit_predict_imbalanced_model": 10, "epoch": [10, 54, 68, 69, 88], "verbos": [10, 54, 62, 63, 64, 65, 66, 68, 69, 86, 87], "batch_siz": [10, 54, 68, 69, 88], "6": [10, 13, 14, 19, 28, 31, 32, 40, 45, 47, 49, 52, 53, 59, 60, 62, 64, 65, 89, 98, 99, 128], "predict_method": 10, "els": [10, 31, 40], "getattr": 10, "contrari": [10, 55, 113], "yield": [10, 54, 67], "balancedbatchgener": [10, 54, 104], "fit_predict_balanced_model": 10, "training_gener": [10, 54, 68, 69], "fold": [10, 44, 93, 113], "previous": [10, 40, 43, 54, 78, 79, 82, 83, 84, 85], "skf": 10, "cv_results_imbalanc": 10, "cv_time_imbalanc": 10, "cv_results_balanc": 10, "cv_time_balanc": 10, "train_idx": 10, "valid_idx": 10, "x_local_train": 10, "fit_transform": [10, 51, 74, 86], "iloc": 10, "y_local_train": 10, "ravel": [10, 13, 16, 31, 39], "x_local_test": 10, "transform": [10, 24, 36, 51, 59, 60, 61, 74, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 109], "y_local_test": 10, "df_result": 10, "unstack": 10, "reset_index": 10, "df_time": 10, "boxplot": 10, "level_0": 10, "top": [10, 46], "left": [10, 33, 40, 44, 64, 65], "xlabel": [10, 32], "ylabel": [10, 32], "whi": 10, "gca": 10, "xaxi": 10, "set_major_formatt": 10, "funcformatt": 10, "lambda": [10, 55], "po": 10, "term": [10, 20, 44], "000": [10, 11, 45, 62], "porto_seguro_keras_under_sampl": [10, 11, 115, 123], "01": [11, 17, 25, 31, 32, 37, 39, 42, 43, 47, 54, 55, 113], "250": [11, 86], "auto_examples_appl": 11, "108": 11, "09": 11, "mix": [12, 26, 31, 55, 115, 118], "enn": [12, 26, 36, 60, 89, 91, 92, 95, 98, 113, 115, 116], "tomek": [12, 13, 26, 38, 42, 43, 60, 61, 89, 98, 99, 114, 115, 116, 128], "algorithm": [13, 19, 31, 39, 45, 47, 50, 55, 60, 61, 63, 64, 65, 66, 67, 68, 69, 78, 79, 80, 81, 82, 83, 84, 85, 88, 90, 91, 92, 93, 94, 96, 97, 98, 100, 104, 114, 115, 122], "literatur": [13, 20, 51, 115, 122], "edit": [13, 43, 49, 60, 61, 89, 90, 91, 92, 95, 96, 98, 99, 114, 115, 116, 128], "nearest": [13, 31, 39, 40, 41, 43, 55, 60, 61, 78, 79, 80, 82, 83, 84, 85, 89, 90, 91, 92, 94, 95, 96, 98, 99, 100, 114, 115, 116, 117, 120, 128], "neighbour": [13, 40, 43, 60, 61, 78, 79, 82, 83, 84, 85, 89, 91, 92, 94, 95, 98, 99, 114, 115, 116, 120], "avail": [13, 31, 39, 44, 45, 46, 50, 51, 54, 55, 60, 61, 62, 64, 65, 66, 67, 78, 79, 80, 81, 82, 83, 84, 85, 90, 93, 94, 97, 101, 113, 115, 122], "coupl": [13, 19, 51], "make_classif": [13, 19, 23, 24, 28, 31, 33, 36, 39, 43, 47, 54, 55, 59, 60, 61, 64, 65, 66, 67, 78, 79, 81, 82, 84, 85, 86, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 113], "n_inform": [13, 23, 24, 28, 31, 36, 39, 43, 47, 54, 55, 59, 60, 61, 64, 65, 66, 67, 78, 79, 81, 82, 84, 85, 86, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 113], "n_redund": [13, 23, 24, 28, 31, 33, 36, 39, 43, 47, 54, 55, 59, 60, 61, 64, 66, 78, 79, 81, 82, 84, 85, 86, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 113], "n_repeat": [13, 31, 39, 43, 47, 54, 55, 113], "n_class": [13, 23, 24, 28, 31, 36, 39, 43, 47, 54, 55, 59, 60, 61, 64, 65, 66, 67, 68, 69, 74, 78, 79, 81, 82, 84, 85, 86, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 113], "n_clusters_per_class": [13, 23, 24, 28, 31, 36, 39, 43, 47, 54, 55, 59, 60, 61, 64, 66, 78, 79, 81, 82, 84, 85, 86, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 113], "class_sep": [13, 19, 23, 24, 28, 31, 36, 39, 43, 47, 54, 55, 59, 60, 61, 64, 66, 78, 79, 81, 82, 84, 85, 86, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 113], "alpha": [13, 24, 28, 31, 32, 33, 39, 40, 41, 51, 70, 73], "edgecolor": [13, 31, 39], "characterist": [13, 62], "plot_resampl": [13, 31, 39], "plot_decision_funct": [13, 31, 39], "plot_step": [13, 31, 39], "x_min": [13, 31, 39], "x_max": [13, 31, 39], "min": [13, 19, 31, 39], "y_min": [13, 31, 39], "y_max": [13, 31, 39], "xx": [13, 31, 39], "yy": [13, 31, 39], "meshgrid": [13, 31, 39], "arang": [13, 31, 39, 40, 54], "z": [13, 31, 32, 39, 45, 62, 66, 67, 113], "c_": [13, 31, 39], "reshap": [13, 31, 39, 51, 55, 74, 83], "contourf": [13, 31, 39], "doe": [13, 19, 44, 47, 55, 65, 71, 75, 76, 77, 87, 113, 115, 122], "knowledg": [13, 64, 73, 81, 85, 128], "underli": 13, "noisi": [13, 39, 43, 95, 96, 113], "cannot": [13, 39, 73, 86, 87], "separ": [13, 71, 86], "henc": 13, "benefici": 13, "ii": [13, 24, 26, 38, 39, 43, 45, 55, 113], "readi": [13, 43], "smotetomek": [13, 43, 60, 104, 115, 120, 121, 123], "smoteenn": [13, 43, 61, 104, 115, 120, 121, 123], "zip": [13, 16, 26, 31, 32, 39, 40, 41, 54], "543": [13, 14], "plot_comparison_combin": [13, 14], "auto_examples_combin": 14, "concern": [15, 26], "modul": [15, 26, 46, 51, 58, 106, 109, 112, 115, 120, 121, 122, 124, 125], "abil": [16, 75, 76, 77], "deal": [16, 31, 48, 51, 55, 73, 105, 110, 128], "oliveira": [16, 115, 116, 120], "convert": [16, 50, 65, 67, 74, 101, 115, 123], "arbitrari": [16, 59], "shuffl": [16, 62], "colormap": 16, "viridi": 16, "colorbar": [16, 20], "helper": [16, 36, 86], "ratio_func": 16, "minority_class": [16, 19], "nrow": [16, 31, 39, 41], "x_resampl": [16, 31, 43, 44, 55, 59, 60, 61, 63, 78, 79, 80, 81, 82, 83, 84, 85, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 113], "y_resampl": [16, 31, 43, 44, 45, 55, 59, 60, 61, 63, 78, 79, 80, 81, 82, 83, 84, 85, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 113], "827": [16, 17], "plot_make_imbal": [16, 17], "auto_examples_dataset": 17, "impli": [18, 26, 113], "lost": [18, 26], "procedur": [18, 26, 44, 67, 96], "offer": [18, 26, 51, 55, 113], "altern": [18, 19, 26, 46, 65, 67], "fact": [18, 26, 31, 33, 55, 113], "later": [18, 26, 36, 40, 44, 113], "larg": [19, 64, 80], "varieti": 19, "give": [19, 31, 44, 46, 47, 51, 65, 72, 113, 115, 123, 124, 125], "publish": 19, "synthet": [19, 55, 78, 79, 80, 82, 83, 84, 85, 115, 116, 122, 128], "toi": [19, 31, 33, 39, 41, 63, 113], "10_000": [19, 23, 24, 54], "8977": 19, "1023": 19, "propos": [19, 31, 51, 62, 65, 70, 79, 82, 83, 84, 85, 89, 91, 92, 93, 95, 96, 98, 99], "intend": 19, "baggingclassifi": [19, 20, 47], "ebb": 19, "test_scor": [19, 28, 44], "std": [19, 28, 44], "709": 19, "018": 19, "These": [19, 46, 55, 100], "749": 19, "014": [19, 44], "over_bag": 19, "700": 19, "016": 19, "known": [19, 47, 48, 51, 55, 65, 66, 67, 81, 115, 126], "smote_bag": 19, "745": 19, "017": 19, "spirit": 19, "framework": 19, "binomi": 19, "here": [19, 20, 44, 46], "charg": 19, "integr": [19, 49, 67], "roughly_balanced_bag": 19, "class_count": 19, "majority_class": 19, "draw": [19, 32, 64, 65], "n_minority_class": 19, "n_majority_resampl": 19, "negative_binomi": 19, "n": [19, 39, 65, 79, 81, 82, 83, 84, 85, 90, 113, 128], "p": [19, 51, 64, 65, 66, 67, 74, 79, 82, 83, 84, 85, 86, 87, 91], "randomli": [19, 32, 39, 47, 55, 64, 65, 66, 67, 97, 99, 113], "majority_indic": 19, "choic": [19, 31, 54, 55, 60, 61, 64, 65, 66, 67, 78, 79, 80, 81, 82, 83, 84, 85, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101], "minority_indic": 19, "indic": [19, 54, 55, 64, 65, 66, 68, 70, 76, 81, 84, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 102, 115, 120, 121, 122], "rbb": 19, "kw_arg": [19, 54, 59], "750": 19, "r": [19, 28, 32, 40, 41, 47, 51, 60, 64, 65, 66, 67, 71, 74, 93, 128], "maclin": [19, 64, 128], "opitz": [19, 64, 128], "empir": [19, 64, 128], "aaai": [19, 64, 128], "iaai": [19, 64, 128], "1997": [19, 64, 71, 96, 128], "546": [19, 64, 128], "551": [19, 64, 128], "wang": [19, 64, 128], "yao": [19, 64, 128], "analysi": [19, 64, 93, 128], "2009": [19, 64, 66, 85, 128], "ieee": [19, 64, 66, 67, 78, 89, 91, 92, 98, 99, 128], "symposium": [19, 64, 128], "intellig": [19, 64, 78, 79, 82, 83, 84, 85, 128], "mine": [19, 64, 81, 128], "hido": [19, 64, 128], "h": [19, 64, 66, 79, 85], "kashima": [19, 64, 128], "takahashi": [19, 64, 128], "asa": [19, 64, 128], "scienc": [19, 64, 128], "412": [19, 64, 115, 122, 128], "426": [19, 64, 128], "509": [19, 21], "plot_bagging_classifi": [19, 21], "shown": [20, 55], "learner": [20, 47, 66, 115, 123], "thei": [20, 39, 41, 46, 55, 64, 65, 66, 86], "benefit": 20, "geometr": [20, 24, 70, 71], "wide": 20, "uci": [20, 45, 62], "satimag": [20, 45, 62], "fetch_dataset": [20, 45, 104, 115, 121], "stratifi": [20, 24, 36, 44], "baselin": [20, 44], "rest": [20, 46, 55, 71, 78, 79, 82, 83, 84, 85, 89, 91, 92, 93, 95, 98, 99], "decisiontreeclassifi": [20, 28, 47, 64, 65, 67, 115, 123], "y_pred_tre": 20, "balanced_accuracy_scor": [20, 44, 47, 51], "geometric_mean_scor": [20, 24, 51, 73, 104], "73": [20, 23], "confusionmatrixdisplai": 20, "from_estim": 20, "ax_": 20, "actual": [20, 46], "balanced_bag": 20, "y_pred_bc": 20, "y_pred_bbc": 20, "significantli": 20, "68": 20, "popular": [20, 55], "outperform": 20, "vanilla": 20, "counterpart": 20, "rf": 20, "brf": [20, 47], "y_pred_rf": 20, "y_pred_brf": 20, "similarli": [20, 45, 47, 55, 115, 121, 124, 125], "manner": [20, 55, 81, 113], "easi": [20, 55, 113], "adaboost": [20, 47, 64, 65, 66, 67, 115, 122], "slower": [20, 64, 66], "achiev": [20, 47, 66, 67], "wors": [20, 44], "adaboostclassifi": [20, 47, 66], "easyensembleclassifi": [20, 47, 64, 65, 67, 104, 115, 117, 122, 125], "rusboostclassifi": [20, 47, 64, 65, 66, 104, 115, 117, 122, 123, 125], "eec": [20, 47, 66], "y_pred_eec": 20, "rusboost": [20, 47, 67, 128], "y_pred_rusboost": 20, "174": [20, 21, 113], "229": [20, 21], "plot_comparison_ensemble_classifi": [20, 21], "40": [21, 31, 45, 67, 68, 69, 83, 128], "682": 21, "auto_examples_ensembl": 21, "done": [22, 26, 46], "specif": [22, 23, 25, 26, 31, 39, 40, 45, 47, 54, 55, 59, 63, 65, 70, 71, 73, 75, 76, 77, 78, 80, 81, 82, 84, 85, 86, 87, 103, 113, 114, 115, 120, 122], "develop": [23, 24, 49, 114], "56": 23, "123": [23, 64], "93": [23, 45, 62, 86], "1127": 23, "1250": [23, 36], "pl": 23, "flip_i": [23, 24, 28, 36, 59, 60, 61, 64, 66, 78, 79, 81, 82, 84, 85, 86, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99], "5000": [23, 24, 28, 31, 36, 43, 54, 55, 113], "y_pred_bal": 23, "329": [23, 25], "plot_classification_report": [23, 25], "made": [24, 55, 76, 83], "associ": [24, 54, 55, 65, 68, 69, 88, 100], "Be": [24, 49, 51, 55, 65], "awar": [24, 49, 51, 55, 65], "root": [24, 51, 65, 71], "product": [24, 51, 71], "sensit": [24, 39, 71, 75, 76, 113, 114], "940": 24, "make_index_balanced_accuraci": [24, 51, 104, 115, 125], "geo_mean": 24, "884": 24, "813": [24, 25], "plot_metr": [24, 25], "142": [25, 54], "auto_examples_evalu": 25, "purpos": [26, 49, 53, 86], "introductori": 26, "relat": [26, 27], "reach": [26, 30], "like": [26, 30, 31, 34, 36, 43, 59, 60, 61, 63, 64, 65, 66, 67, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 115, 118, 122], "shrinkag": [26, 30, 31, 34, 55, 81, 115, 118, 126], "factor": [26, 30, 34, 70, 73, 81, 115, 121], "includ": [26, 35, 44, 46, 55, 58, 64, 65, 70, 71, 75, 76, 77, 106, 112, 114, 115, 124], "embed": [26, 35, 37, 82, 86, 87, 92], "group": [26, 38, 39, 55, 113], "fix": [26, 31, 38, 39, 114, 123, 127], "definit": [26, 38, 42, 74, 99, 115, 123], "auto_examples_python": 26, "auto_examples_jupyt": 26, "k_neighbor": [28, 55, 79, 80, 82, 83, 84, 85, 94, 115, 120], "cart": 28, "let": [28, 33, 36, 44, 51, 54, 55, 113], "aim": 28, "search": [28, 55, 65, 93], "adequ": [28, 81], "validation_curv": 28, "inspect": [28, 65, 67, 86, 87, 113], "cohen_kappa_scor": 28, "make_scor": 28, "scorer": 28, "param_rang": 28, "rang": [28, 54, 55], "11": [28, 31, 34, 45, 62, 65, 125, 127], "train_scor": 28, "param_nam": 28, "smote__k_neighbor": 28, "train_scores_mean": 28, "train_scores_std": 28, "test_scores_mean": 28, "test_scores_std": 28, "tri": [28, 51, 71], "fill_between": 28, "idx_max": 28, "argmax": [28, 54], "cohen": 28, "kappa": 28, "pm": 28, "format": [28, 65, 70, 86, 115, 123, 124], "set_xlabel": [28, 33, 40, 41], "set_ylabel": [28, 33, 40, 41], "nice": [28, 40, 41], "610": [28, 29], "plot_validation_curv": [28, 29], "06": [29, 45, 62], "auto_examples_model_select": 29, "attend": [31, 39], "qualit": [31, 39], "create_dataset": [31, 39], "n_cluster": [31, 39, 46, 90], "none": [31, 39, 46, 54, 55, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 115, 117, 118, 121, 123], "linear": [31, 50], "boundari": [31, 92, 113], "weights_arr": 31, "300": [31, 44, 45, 62], "greater": [31, 50, 65], "poorer": 31, "repeat": [31, 33, 39, 55, 89, 91, 92, 98, 113, 115, 116], "trivial": 31, "ad": [31, 33, 43, 46, 50, 54, 65, 81, 113, 115, 120, 121, 122, 126], "small": [31, 33, 64, 65, 81, 95, 128], "perturb": [31, 33, 81], "smooth": [31, 33, 55, 81, 115, 126], "below": [31, 43, 55, 62, 86, 113], "look": [31, 44, 65, 99], "superimpos": 31, "heurist": [31, 39, 40, 113], "idend": 31, "150": 31, "isinst": 31, "difficult": [31, 95, 128], "rule": [31, 39, 40, 55, 81, 89, 91, 92, 95, 96, 98, 113, 115, 116, 128], "regular": [31, 55], "distinct": [31, 55], "depend": [31, 46, 49, 50, 51, 53, 55, 78, 115, 121, 123], "particular": [31, 46, 55], "rise": [31, 47], "variant": [31, 78, 79, 80, 81, 82, 83, 84, 85, 113, 114], "identifi": [31, 64, 66], "borderlin": [31, 55, 78, 79, 80, 81, 82, 83, 84, 85, 115, 116, 122, 128], "borderlinesmot": [31, 55, 78, 80, 81, 82, 83, 84, 85, 104, 115, 117, 122, 123, 124], "detect": [31, 79, 84, 85, 99, 113], "point": [31, 32, 40, 43, 46, 64, 65, 70, 72, 94, 99, 115, 123], "border": [31, 55], "svm": [31, 50, 55, 78, 79, 80, 81, 82, 83, 84, 85, 115, 116, 122], "svmsmote": [31, 55, 78, 79, 80, 81, 82, 83, 84, 104, 115, 117, 122, 123, 124], "found": [31, 39, 55, 65, 90], "kmean": [31, 55, 80, 90, 115, 125], "kmeanssmot": [31, 55, 79, 81, 82, 83, 84, 85, 104, 115, 123, 124], "cluster": [31, 39, 55, 63, 79, 80, 81, 82, 83, 84, 85, 90, 113, 115, 116, 123, 125], "densiti": [31, 55, 80], "minibatchkmean": [31, 39, 80, 90], "kind": [31, 55, 79, 115, 122, 124], "kmeans_estim": [31, 80], "n_init": [31, 39, 80, 90], "smotenc": [31, 55, 78, 79, 80, 81, 82, 83, 85, 104, 115, 117, 118, 122, 123, 124, 125], "empti": [31, 55], "randn": [31, 55], "sort": [31, 43, 45, 55, 59, 64, 66, 76, 113, 115, 122], "smote_nc": [31, 55, 115, 122], "categorical_featur": [31, 55, 84, 115, 118], "nc": [31, 55, 84], "14021849735700803": 31, "033193400066544886": 31, "7490765234433554": 31, "7783820070908942": 31, "948842857719016": 31, "5246469549655818": [31, 55], "3657680728116921": [31, 55], "9344237230779993": [31, 55], "3710891618824609": [31, 55], "3327240726719727": [31, 55], "smoten": [31, 55, 78, 80, 81, 82, 84, 85, 104, 115, 117, 118, 126], "int32": [31, 51, 74, 83], "536": [31, 34, 45, 62], "29": [31, 34, 49, 52, 53, 60, 74, 115, 126, 128], "plot_comparison_over_sampl": [31, 34], "neighbourhood": [32, 55, 89, 91, 92, 94, 95, 96, 98], "65284": 32, "52623": 32, "51468": 32, "22199": 32, "21": [32, 45, 62, 73, 85, 115, 122, 123, 128], "43": 32, "45": [32, 40, 41, 45], "211": [32, 54], "y_2": 32, "z_2": 32, "idx": 32, "len": [32, 44, 99], "annot": [32, 61, 128], "x_i": [32, 55], "x_": [32, 51, 55, 74], "zi": [32, 55], "xytext": 32, "tupl": [32, 62, 69, 76, 86, 88, 113], "005": 32, "circl": [32, 55], "radiu": 32, "sqrt": [32, 65], "add_artist": [32, 33], "line": [32, 40, 55, 64, 115, 123], "step": [32, 36, 39, 40, 44, 46, 54, 64, 69, 85, 86, 87, 88, 113, 115, 121], "y_gen": 32, "z_gen": 32, "nicer": 32, "x_1": [32, 40, 41], "x_2": [32, 40, 41], "568": [32, 34], "plot_illustration_generation_sampl": [32, 34], "few": 33, "class_legend": 33, "legend_el": 33, "mani": [33, 65, 67, 94, 128], "observ": [33, 44, 84], "transpar": 33, "inde": [33, 44, 55], "float": [33, 60, 61, 64, 65, 66, 67, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 90, 93, 94, 95, 97, 101, 115, 121, 122, 123], "overlap": [33, 55], "anymor": [33, 55], "dispers": [33, 55], "forc": [33, 65, 115, 122], "equival": [33, 44, 55, 60, 61, 64, 65, 66, 67, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101], "handi": 33, "manual": [33, 44, 80], "tune": 33, "201": [33, 34], "plot_shrinkage_effect": [33, 34], "305": [34, 36, 37], "auto_examples_ov": 34, "04": [34, 47, 51, 74, 128], "individu": 36, "decomposit": [36, 86], "pca": [36, 86], "editednearestneighbour": [36, 39, 60, 89, 90, 91, 95, 96, 98, 99, 104, 113], "n_compon": 36, "disabl": 36, "decision_funct": [36, 64, 66, 67, 86], "375": 36, "875": 36, "plot_pipeline_classif": [36, 37], "auto_examples_pipelin": 37, "clustercentroid": [39, 104, 113, 115, 124, 125, 126], "centroid": [39, 90, 113, 115, 116], "400": 39, "subdivid": 39, "control": [39, 47, 54, 55, 60, 61, 64, 65, 66, 67, 68, 69, 78, 79, 80, 81, 82, 83, 84, 85, 88, 90, 91, 93, 96, 97, 114, 115, 126], "averag": [39, 40, 64, 66, 71, 72, 73, 75, 76, 77, 94, 113, 114, 115, 126], "distanc": [39, 40, 51, 55, 74, 94, 106, 113, 115, 126, 128], "smallest": [39, 40, 113], "farthest": [39, 40, 113], "kept": [39, 113], "largest": [39, 40, 65, 113], "_prototype_select": 39, "_nearmiss": 39, "203": 39, "userwarn": 39, "larger": [39, 50, 51], "ensur": [39, 44, 46, 49, 100, 115, 125], "siev": 39, "principl": [39, 40], "repeatededitednearestneighbour": [39, 89, 91, 92, 104, 113, 115, 120], "allknn": [39, 91, 92, 98, 104, 113, 115, 120, 122], "neighor": 39, "iter": [39, 47, 54, 67, 86, 88, 98, 113, 115, 122], "allow_minor": [39, 89], "condensednearestneighbour": [39, 89, 90, 92, 98, 99, 104, 113, 115, 122], "nn": [39, 40, 46, 54, 80, 89, 91, 94, 95, 96, 100], "decid": [39, 55, 113], "preserv": [39, 115, 122], "onesidedselect": [39, 104, 113, 115, 120], "neighbourhoodcleaningrul": [39, 104, 113, 115, 120, 122], "addition": 39, "agre": [39, 89, 92, 95, 98, 113], "instancehardnessthreshold": [39, 94, 104, 113, 115, 122, 124], "exclud": [39, 71, 75, 76, 77, 89, 92, 95, 98, 113], "probabl": [39, 51, 64, 65, 66, 67, 74, 113], "652": [39, 42], "plot_comparison_under_sampl": [39, 42], "make_plot_despin": [40, 41], "set_xtick": 40, "set_ytick": 40, "upper": 40, "x_minor": [40, 41], "transpos": [40, 41], "55": [40, 41], "x_major": [40, 41], "13": [40, 41, 45, 46, 62, 65, 73, 115, 118, 128], "14": [40, 41, 45, 49, 52, 53, 62, 91, 128], "green": [40, 41, 51, 55, 74, 113], "dash": 40, "smaller": [40, 51, 65], "nearestneighbor": [40, 78, 79, 80, 82, 83, 84, 85, 115, 117], "marker": [40, 41], "nearest_neighbor": 40, "dist": [40, 46], "ind": 40, "kneighbor": [40, 78, 79, 80, 82, 83, 84, 85, 100], "dist_avg": 40, "sum": [40, 65, 80], "positive_idx": 40, "enumer": [40, 44], "make_plot": 40, "sample_idx": 40, "configur": [40, 86], "divid": [40, 113], "short": 40, "selected_idx": 40, "return_dist": 40, "uniqu": [40, 65, 67, 74, 113], "137": [40, 42], "plot_illustration_nearmiss": [40, 42], "what": 41, "abov": [41, 46, 62], "form": [41, 59, 60, 61, 64, 65, 66, 67, 74, 78, 79, 80, 81, 82, 83, 84, 85, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], "869": [41, 42], "plot_illustration_tomek_link": [41, 42], "657": 42, "auto_examples_und": 42, "08": [42, 48], "margin": [43, 113], "inlier": [43, 55], "solv": [43, 115, 120], "cleaner": 43, "undersampl": [43, 66, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 128], "bpm04": [43, 128], "bbm03": [43, 128], "former": [43, 113], "64": [43, 45, 62, 70, 113], "262": [43, 113], "4674": [43, 55, 113], "smote_enn": 43, "4060": 43, "4381": 43, "3502": 43, "smote_tomek": 43, "4499": 43, "4566": 43, "4413": 43, "tend": [43, 80], "complement": [44, 45], "misus": 44, "lead": [44, 55, 86, 115, 124, 126], "optimist": 44, "mention": [44, 45], "occur": [44, 46, 115, 120], "entir": [44, 86], "partit": [44, 65], "Such": 44, "potenti": 44, "natur": 44, "either": [44, 50, 51, 55, 65, 68, 69, 84, 88, 101, 102], "typic": [44, 67], "demonstr": 44, "wrong": [44, 115, 121, 123, 124], "emphas": 44, "tool": [44, 48, 107, 114, 115, 125], "fall": 44, "trap": 44, "censu": 44, "sake": 44, "simplic": 44, "wrongdo": 44, "data_id": 44, "1119": 44, "select_dtyp": 44, "988": 44, "011": 44, "keep": [44, 51, 71, 90, 99, 113], "asid": 44, "out": [44, 48, 64, 65], "x_left_out": 44, "y_left_out": 44, "via": [44, 49, 55], "return_train_scor": 44, "return_estim": 44, "dev": [44, 46, 115, 125], "609": 44, "024": 44, "good": [44, 45, 48, 62], "close": [44, 92, 99], "fold_id": 44, "cv_model": 44, "628": 44, "009": 44, "pattern": [44, 64, 71, 115, 121, 128], "come": [44, 49], "724": 44, "042": 44, "698": 44, "gave": 44, "too": 44, "reason": [44, 74, 128], "state": [44, 62, 70, 113, 115, 122, 124], "earlier": 44, "becaus": 44, "deleg": [44, 115, 118], "requir": [44, 55, 64, 65, 66, 67, 69, 73, 85, 86, 87, 113, 115, 118, 121, 122, 126], "732": 44, "019": 44, "727": 44, "008": 44, "veri": 44, "sign": 44, "systemat": 45, "27": [45, 62], "binar": 45, "repositori": [45, 46, 48, 62], "ecoli": [45, 62], "imu": [45, 62], "336": [45, 62], "optical_digit": [45, 62], "620": [45, 62, 115, 124], "435": [45, 62, 115, 123], "pen_digit": [45, 62], "992": [45, 62], "abalon": [45, 62], "177": [45, 62], "sick_euthyroid": [45, 62], "sick": [45, 62], "euthyroid": [45, 62], "163": [45, 62], "spectromet": [45, 62], "44": [45, 51, 62, 73, 74], "car_eval_34": [45, 62], "v": [45, 49, 55, 62, 71, 78, 79, 82, 83, 84, 85, 89, 91, 92, 93, 95, 96, 98, 99, 102, 115, 122, 128], "728": [45, 62], "isolet": [45, 62], "797": [45, 62], "617": [45, 62, 115, 124], "us_crim": [45, 62], "65": [45, 62], "994": [45, 62], "yeast_ml8": [45, 62], "libsvm": [45, 62], "417": [45, 62], "103": [45, 62, 64], "scene": [45, 62], "407": [45, 62], "294": [45, 62], "libras_mov": [45, 62], "360": [45, 62], "thyroid_sick": [45, 62], "772": [45, 62, 99, 128], "coil_2000": [45, 62], "kdd": [45, 62], "coil": [45, 62], "822": [45, 62], "arrhythmia": [45, 62], "452": [45, 62, 89, 98, 115, 122, 128], "278": [45, 62], "solar_flare_m0": [45, 62], "19": [45, 62, 84], "oil": [45, 62], "22": [45, 62, 65, 115, 121], "937": [45, 62], "49": [45, 62], "car_eval_4": [45, 62], "vgood": [45, 62], "26": [45, 62, 86, 115, 116], "wine_qu": [45, 62], "wine": [45, 62], "898": [45, 62], "letter_img": [45, 62], "yeast_me2": [45, 62], "me2": [45, 62], "28": [45, 62, 81, 115, 117, 123, 128], "484": [45, 62], "23": [45, 49, 52, 53, 62, 64, 66, 115, 125], "webpag": [45, 62], "w7a": [45, 62], "780": [45, 62, 115, 126], "24": [45, 62, 64, 113, 128], "ozone_level": [45, 62], "ozon": [45, 62], "72": [45, 62], "mammographi": [45, 62], "183": [45, 62, 115, 120], "protein_homo": [45, 62], "cup": [45, 62], "2004": [45, 60, 62, 64, 65, 128], "145": [45, 62], "751": [45, 62], "abalone_19": [45, 62], "130": [45, 62], "301": 45, "turn": [45, 54, 59, 63, 64, 115, 121], "behaviour": [45, 51, 86, 113], "driven": 45, "behav": 45, "x_imb": 45, "y_imb": 45, "directli": [45, 86, 87, 115, 123], "df_resampl": [45, 55, 113], "setosa": 45, "versicolor": 45, "head": [45, 55, 113], "sepallength": 45, "sepalwidth": 45, "petallength": 45, "petalwidth": 45, "39": [45, 66, 128], "virginica": 45, "help": 46, "locat": 46, "meant": [46, 113], "guarante": 46, "stabl": [46, 115, 116], "backport": 46, "evolv": 46, "write": 46, "accept": [46, 50, 54, 64, 66, 113, 115, 117, 118, 120, 121, 124, 125], "matric": [46, 64, 66, 81, 113, 115, 118, 121, 122, 123], "spars": [46, 59, 60, 61, 64, 65, 66, 67, 70, 78, 79, 80, 81, 82, 83, 84, 85, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 113, 115, 118, 121, 122, 123, 124], "argument": [46, 59, 63, 86, 101, 103, 115, 121, 122, 125], "applic": [46, 51, 62, 71, 75, 76, 77, 128], "check_neighbors_object": [46, 104], "consist": [46, 65, 100, 101, 115, 121, 125], "check_target_typ": [46, 104], "conform": [46, 102], "check_sampling_strategi": [46, 104], "onsist": 46, "pixel": 46, "apart": [46, 55, 84], "deprecate_paramet": 46, "taken": [46, 71, 115, 118], "pleas": [46, 49, 59, 60, 61, 64, 65, 66, 67, 74, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], "publicli": 46, "access": [46, 86, 115, 118, 123], "attribut": [46, 54, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 74, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 115, 118, 122], "renam": [46, 64, 66], "old": [46, 115, 123], "zero_on": 46, "zero_one_loss": 46, "y_true": [46, 54, 70, 71, 72, 73, 75, 76, 77, 115, 122], "behavior": [46, 55, 60, 115, 122, 128], "properti": [46, 64, 65, 66, 67, 71, 84, 86, 92, 128], "labels_": 46, "self": [46, 59, 60, 61, 64, 65, 66, 67, 74, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], "appropri": 46, "example_funct": 46, "deprecationwarn": 46, "messag": [46, 115, 125], "sai": 46, "docstr": [46, 115, 122], "explain": 46, "direct": [46, 55], "On": [46, 55, 73, 113, 128], "necessari": [46, 55, 62, 74, 99, 115, 122], "updat": [46, 59, 60, 61, 64, 65, 66, 67, 68, 69, 74, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 115, 123, 124], "whats_new": 46, "v0": 46, "rst": 46, "date": [46, 48], "statu": 46, "bumpvers": [46, 115, 120], "dev0": [46, 48], "tag": 46, "commit": [46, 49], "git": [46, 49], "am": 46, "branch": 46, "checkout": 46, "push": 46, "upstream": [46, 50], "remot": 46, "symlink": 46, "websit": [46, 115, 126], "latest": [46, 113, 115, 127], "clone": [46, 49, 86, 87, 100, 115, 122], "unlink": 46, "ln": 46, "correctli": [46, 64, 65, 66, 67], "l": [46, 64, 79, 82, 83, 84, 85, 115, 123, 128], "your": [46, 49, 54, 66, 104, 113], "wheel": 46, "setup": [46, 49, 115, 126], "sdist": 46, "bdist_wheel": 46, "upload": [46, 115, 121], "pypi": 46, "twine": 46, "switch": 46, "master": 46, "offici": 46, "click": 46, "draft": 46, "mark": [46, 55, 103], "conda": [46, 53, 115, 121], "forg": 46, "feedstock": 46, "pr": 46, "synchron": [46, 115, 124], "merg": 46, "hash": 46, "wish": [46, 49], "back": 46, "port": 46, "log": [46, 54, 64, 65, 66, 67], "lastest": 46, "cherri": 46, "pick": [46, 55, 81, 97, 115, 120], "interact": 46, "rebas": 46, "bump": 46, "patch": [46, 64], "oppos": 46, "dirti": 46, "favor": [47, 50, 115, 121, 122], "10000": 47, "bc": 47, "base_estim": [47, 64, 66, 67, 115, 117], "doctest": [47, 115, 120], "77": [47, 70], "further": [47, 106], "bbc": [47, 64], "mo97": [47, 128], "hkt09": [47, 128], "wy09": [47, 128], "practic": [47, 86, 114], "clb": [47, 128], "advantag": [47, 86, 87, 115, 124], "design": [47, 55, 84, 128], "skvhn09": [47, 128], "samm": [47, 67], "easyensembl": [47, 66, 115, 116, 120, 122, 124], "lwz08": [47, 128], "construct": [47, 59, 64, 65, 87], "jul": 48, "2023": [48, 115, 118], "idea": 48, "q": 48, "open": 48, "librari": 48, "reli": [48, 55, 100], "guid": [48, 59, 60, 61, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 106, 115, 121, 123], "extra": [48, 55], "contribut": [48, 67, 115, 123], "guidelin": [48, 114], "user": [48, 59, 60, 61, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 106, 113, 115, 116, 118, 121, 122], "depth": [48, 54, 65, 115, 123], "concept": 48, "background": 48, "explan": 48, "descript": [48, 62], "place": [48, 113], "action": 48, "dive": 48, "complet": [49, 86, 87], "tabl": [49, 51, 62], "minimum": [49, 51, 53, 65], "scipi": [49, 50, 53, 115, 123], "joblib": [49, 53, 60, 61, 64, 65, 66, 78, 79, 80, 82, 83, 84, 85, 86, 87, 89, 91, 92, 93, 94, 95, 96, 98, 99, 115, 125], "threadpoolctl": [49, 53], "cython": [49, 53], "memory_profil": [49, 53], "57": [49, 52, 53], "pytest": [49, 53, 103, 115, 121, 122], "cov": [49, 53], "ruff": [49, 53], "272": [49, 52, 53], "black": [49, 53], "mypi": [49, 53], "pyamg": [49, 53], "copybutton": [49, 53], "numpydoc": [49, 53], "pillow": [49, 53], "pooch": [49, 53], "prompt": [49, 53], "sphinxext": [49, 53], "opengraph": [49, 53], "plotli": [49, 53], "lock": [49, 53], "mainten": [49, 53, 117, 118], "pip": 49, "releas": [49, 114, 116, 117, 118, 122, 124, 127], "anaconda": 49, "cloud": 49, "platform": 49, "prefer": 49, "command": [49, 115, 123], "copi": [49, 50], "contrib": 49, "cd": 49, "mode": [49, 65, 89, 92, 95, 98, 113], "isol": 49, "pull": 49, "request": [49, 64, 65, 66, 67, 86], "advis": 49, "sure": [49, 115, 117], "unit": [49, 115, 121], "obj": 50, "data_resampl": 50, "targets_resampl": 50, "ndarrai": [50, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102], "csr_matrix": [50, 65], "csc_matrix": [50, 65], "unlik": [50, 84], "compress": 50, "row": [50, 51, 113], "represent": 50, "being": [50, 55, 65, 76, 101, 115, 118], "fed": 50, "unnecessari": 50, "recommend": [50, 114], "choos": 50, "csr": [50, 65, 67, 115, 121], "phase": [50, 94], "level": [50, 51, 54, 73, 93, 128], "greatli": 50, "upon": 50, "medic": 51, "rate": [51, 67], "field": 51, "pair": [51, 99], "sensitivity_specificity_support": [51, 104], "sensitivity_scor": [51, 104], "specificity_scor": [51, 104], "possibl": [51, 54, 55, 59, 60, 61, 64, 65, 66, 67, 74, 78, 79, 80, 81, 82, 83, 84, 85, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 113, 115, 122, 123, 126], "bsanchezgr03": [51, 128], "km": [51, 128], "wise": [51, 71], "measur": [51, 65, 71, 128], "maxim": [51, 71], "garciasanchezm12": [51, 128], "rank": 51, "among": [51, 55], "movi": 51, "macro_averaged_mean_absolute_error": [51, 104, 115, 126], "ebs09": [51, 128], "per": [51, 68, 69, 74, 81, 84, 88], "output_dict": [51, 70, 115, 118, 126], "instanc": [51, 54, 55, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 103, 114, 115, 116, 117, 128], "bottom": 51, "submodul": [51, 111, 115, 121, 123], "valuedifferencemetr": [51, 55, 104, 115, 126], "sw86": [51, 128], "proxim": 51, "correl": 51, "closer": [51, 67], "wm97": [51, 128], "repres": [51, 55, 64, 66, 113], "whether": [51, 59, 62, 64, 65, 66, 67, 95, 97, 99], "appl": [51, 55], "red": [51, 55, 74], "blue": [51, 55, 74], "x_encod": [51, 74], "three": [51, 55, 113], "vdm": [51, 55, 74], "x_test_encod": [51, 74], "whenev": [51, 115, 122], "much": 51, "mathemat": [51, 114], "formul": [51, 114], "delta": [51, 74], "sum_": [51, 74], "y_": [51, 71, 74, 75, 76, 77], "condit": [51, 74], "expon": [51, 74, 80], "fast": [54, 74, 107, 113], "prototyp": [54, 104, 107, 114], "own": [54, 65, 66, 104], "retain": [54, 64, 65, 66, 67, 86], "element": [54, 65], "make_regress": 54, "x_reg": 54, "y_reg": 54, "dummy_sampl": 54, "41": 54, "49112498": 54, "78526195": 54, "55095317": 54, "141": 54, "43321419": 54, "46571114": 54, "49177372": 54, "159": 54, "72700509": 54, "169": 54, "80498923": 54, "95889757": 54, "balanced_batch_gener": [54, 104], "float32": [54, 65], "steps_per_epoch": [54, 69, 88], "sample_weight": [54, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 86, 88], "descent": 54, "initi": [54, 67, 115, 120], "intercept": 54, "normal_initi": 54, "random_normal_initi": 54, "stddev": 54, "coef": 54, "logistic_regress": 54, "softmax": [54, 68, 69], "matmul": 54, "cross_entropi": 54, "one_hot": 54, "clip_by_valu": 54, "1e": 54, "reduce_mean": 54, "reduce_sum": 54, "math": 54, "cm": 54, "confusion_matrix": [54, 64, 66], "cast": 54, "per_class": 54, "diag": 54, "sgd": [54, 68, 69], "learning_r": [54, 67], "run_optim": 54, "gradienttap": 54, "apply_gradi": 54, "minim": [54, 65], "bal_acc": 54, "x_batch": [54, 69, 88], "y_batch": [54, 69, 88], "next": [54, 55, 113], "higher": [54, 65, 67, 71, 81, 115, 122], "fit_gener": [54, 69], "to_categor": [54, 68, 69], "input_dim": [54, 68, 69], "categorical_crossentropi": [54, 68, 69], "callback_histori": [54, 68, 69], "One": [55, 84, 115, 116], "scheme": [55, 60, 61, 78, 79, 82, 83, 84, 85, 89, 91, 92, 93, 95, 96, 98, 99], "augment": 55, "consequ": 55, "heterogen": [55, 81, 97, 113, 115, 122, 128], "x_hetero": [55, 113], "xxx": [55, 113], "yyi": [55, 113], "zzz": [55, 113], "y_hetero": [55, 113], "df_adult": [55, 113], "y_adult": [55, 113], "rose": [55, 81, 115, 126], "mt14": [55, 128], "oversampl": [55, 78, 79, 80, 81, 82, 83, 84, 85, 128], "techniqu": [55, 79, 82, 83, 84, 85, 114, 115, 116, 120, 128], "cbhk02": [55, 128], "adapt": [55, 78, 115, 116, 121, 128], "hbgl08": [55, 128], "clf_smote": 55, "4673": 55, "4662": 55, "clf_adasyn": 55, "duplic": 55, "wrongli": [55, 115, 122], "basic": [55, 104], "hard": [55, 90, 93, 114, 115, 116, 126], "peculiar": 55, "sole": 55, "sub": [55, 64, 65, 66, 67, 86], "option": [55, 64, 65, 66, 67, 70, 71, 79, 81, 86, 102, 115, 122, 126], "opposit": 55, "hwm05": [55, 128], "nck09": [55, 128], "ldb17": [55, 128], "extens": 55, "treat": 55, "boolean": [55, 99], "mask": [55, 84], "infer": [55, 84, 115, 118], "categoricaldtyp": [55, 84], "euclidean": 55, "common": [55, 114, 115, 125], "strongli": 55, "neareast": 55, "frequent": 55, "ahead": [55, 68, 69, 88], "cf": 55, "impos": [55, 115, 122, 125], "up": [55, 65, 115, 124], "danger": [55, 79, 85], "least": [55, 65, 71], "half": [55, 115, 122], "iii": 55, "neighborhood": [55, 78, 79, 80, 82, 83, 84, 85], "m_neighbor": [55, 79, 85, 115, 120, 122, 124], "area": 55, "inter": 55, "against": 55, "insid": [58, 64, 65, 66, 67, 86], "accept_spars": 59, "callabl": [59, 60, 61, 63, 64, 65, 66, 67, 73, 78, 79, 80, 81, 82, 83, 84, 85, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 115, 121], "read": [59, 60, 61, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], "kwarg": [59, 63, 86, 101], "forward": 59, "bool": [59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 73, 74, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 102, 115, 118], "dict": [59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 74, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 115, 122], "keyword": [59, 61, 63, 86, 101, 103, 115, 125, 128], "bypass": 59, "off": [59, 67, 115, 121], "sampling_strategy_": [59, 60, 61, 78, 79, 80, 81, 82, 83, 84, 85, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], "n_features_in_": [59, 60, 61, 64, 65, 66, 67, 74, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], "feature_names_in_": [59, 60, 61, 64, 65, 66, 67, 74, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 115, 117], "functiontransfom": 59, "stateless": 59, "ten": 59, "matrix": [59, 60, 61, 63, 64, 65, 66, 67, 70, 78, 79, 80, 81, 82, 83, 84, 85, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 113], "itself": [59, 60, 61, 74, 78, 79, 80, 81, 82, 83, 84, 85, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], "n_samples_new": [59, 60, 61, 63, 78, 79, 80, 81, 82, 83, 84, 85, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], "get_feature_names_out": [59, 60, 61, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 115, 117], "input_featur": [59, 60, 61, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], "str": [59, 60, 61, 62, 64, 65, 66, 67, 70, 71, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 115, 118], "x0": [59, 60, 61, 78, 79, 80, 81, 82, 83, 84, 85, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], "x1": [59, 60, 61, 78, 79, 80, 81, 82, 83, 84, 85, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], "must": [59, 60, 61, 67, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], "match": [59, 60, 61, 70, 78, 79, 80, 81, 82, 83, 84, 85, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], "feature_names_out": [59, 60, 61, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], "get_metadata_rout": [59, 60, 61, 64, 65, 66, 67, 74, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], "metadata": [59, 60, 61, 64, 65, 66, 67, 74, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], "rout": [59, 60, 61, 64, 65, 66, 67, 74, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], "mechan": [59, 60, 61, 64, 65, 66, 67, 74, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], "metadatarequest": [59, 60, 61, 64, 65, 66, 67, 74, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], "encapsul": [59, 60, 61, 64, 65, 66, 67, 74, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], "get_param": [59, 60, 61, 64, 65, 66, 67, 74, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], "deep": [59, 60, 61, 64, 65, 66, 67, 74, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], "subobject": [59, 60, 61, 64, 65, 66, 67, 74, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], "param": [59, 60, 61, 64, 65, 66, 67, 74, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], "map": [59, 60, 61, 64, 65, 66, 67, 74, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], "simpl": [59, 60, 61, 63, 64, 65, 66, 67, 74, 78, 79, 80, 81, 82, 83, 84, 85, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], "nest": [59, 60, 61, 64, 65, 66, 67, 74, 78, 79, 80, 81, 82, 83, 84, 85, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], "latter": [59, 60, 61, 64, 65, 66, 67, 74, 78, 79, 80, 81, 82, 83, 84, 85, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 113], "compon": [59, 60, 61, 64, 65, 66, 67, 71, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], "__": [59, 60, 61, 64, 65, 66, 67, 74, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], "so": [59, 60, 61, 64, 65, 66, 67, 74, 78, 79, 80, 81, 82, 83, 84, 85, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 113, 115, 120], "express": [60, 61, 64, 65, 66, 67, 73, 78, 79, 80, 81, 82, 83, 84, 85, 90, 93, 94, 97], "multi": [60, 61, 64, 65, 66, 67, 71, 78, 79, 80, 81, 82, 83, 84, 85, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 114, 115, 121], "seed": [60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 78, 79, 80, 81, 82, 83, 84, 85, 88, 90, 91, 93, 96, 97, 113], "cpu": [60, 61, 64, 65, 66, 78, 79, 80, 82, 83, 84, 85, 89, 91, 92, 93, 94, 95, 96, 98, 99], "core": [60, 61, 64, 65, 66, 78, 79, 80, 82, 83, 84, 85, 89, 91, 92, 93, 94, 95, 96, 98, 99], "loop": [60, 61, 64, 65, 66, 78, 79, 80, 82, 83, 84, 85, 89, 91, 92, 93, 94, 95, 96, 98, 99], "unless": [60, 61, 64, 65, 66, 78, 79, 80, 82, 83, 84, 85, 89, 91, 92, 93, 94, 95, 96, 98, 99], "parallel_backend": [60, 61, 64, 65, 66, 78, 79, 80, 82, 83, 84, 85, 89, 91, 92, 93, 94, 95, 96, 98, 99], "context": [60, 61, 64, 65, 66, 78, 79, 80, 82, 83, 84, 85, 89, 91, 92, 93, 94, 95, 96, 98, 99, 115, 126], "processor": [60, 61, 64, 65, 66, 78, 79, 80, 82, 83, 84, 85, 89, 91, 92, 93, 94, 95, 96, 98, 99], "glossari": [60, 61, 64, 65, 66, 78, 79, 80, 82, 83, 84, 85, 89, 91, 92, 93, 94, 95, 96, 98, 99], "smote_": [60, 61], "enn_": [60, 89, 98], "batista": [60, 61, 128], "prati": [60, 128], "monard": [60, 61, 128], "acm": [60, 74, 128], "sigkdd": [60, 128], "explor": [60, 128], "newslett": [60, 128], "900": [60, 61, 64, 66, 78, 79, 81, 82, 84, 85, 86, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99], "sme": 60, "881": 60, "tomek_": 61, "bazzan": [61, 128], "autom": [61, 128], "wob": [61, 128], "2003": [61, 71, 94, 128], "smt": [61, 86], "data_hom": 62, "filter_data": 62, "download_if_miss": 62, "zenodo": 62, "cach": [62, 86, 87], "scikit_learn_data": 62, "subfold": 62, "ioerror": 62, "local": [62, 78], "try": 62, "ordereddict": 62, "bunch": [62, 86, 115, 124], "descr": 62, "ding": 62, "zejin": 62, "diversifi": 62, "highli": [62, 71], "bioinformat": 62, "dissert": 62, "georgia": 62, "univers": [62, 64, 65, 128], "2011": 62, "visual": 63, "max_featur": [64, 65], "bootstrap_featur": 64, "oob_scor": [64, 65], "warm_start": [64, 65, 66], "deprec": [64, 66, 67, 78, 79, 82, 83, 84, 85, 114, 120, 123], "serv": 64, "basi": [64, 71], "variou": [64, 86, 91, 92, 98, 112], "exactli": 64, "roughli": [64, 128], "drawn": [64, 66, 81], "solut": [64, 65, 66], "just": [64, 65, 66], "whole": [64, 65, 66], "estimator_": [64, 65, 66, 67, 90, 91, 93, 96], "grow": [64, 65, 66, 67], "base_estimator_": [64, 65, 66, 67], "n_features_": [64, 65, 66, 84], "estimators_": [64, 65, 66, 67], "sampler_": [64, 68], "estimators_samples_": [64, 66], "estimators_features_": [64, 66], "n_classes_": [64, 65, 66, 67], "oob_score_": [64, 65], "oob_decision_function_": [64, 65], "never": [64, 65], "nan": [64, 65], "were": [64, 65, 66, 115, 121, 122], "round": [64, 65, 66, 70], "breiman": [64, 65, 128], "past": 64, "vote": [64, 65, 66, 89, 90, 92, 95, 98, 115, 126], "databas": [64, 92], "1999": 64, "predictor": 64, "140": 64, "1996": 64, "t": [64, 65, 66, 67, 95], "ho": 64, "subspac": 64, "832": 64, "844": 64, "1998": 64, "loupp": 64, "geurt": 64, "discoveri": [64, 81, 128], "346": 64, "361": 64, "2012": [64, 73, 128], "chen": [64, 65, 128], "chao": [64, 65, 128], "liaw": [64, 65, 128], "california": [64, 65, 128], "berkelei": [64, 65, 128], "110": [64, 65, 128], "225": [64, 66, 93, 128], "appear": [64, 66], "special": [64, 66, 67], "dynam": [64, 66], "member": [64, 66], "re": [64, 66, 94], "footprint": [64, 66], "highest": [64, 65, 66], "resort": [64, 66], "predict_log_proba": [64, 65, 66, 67, 86], "harsh": [64, 65, 66, 67], "n_output": [64, 65, 66, 67, 72], "set_fit_request": [64, 65, 66, 67], "union": [64, 65, 66, 67, 86, 113], "unchang": [64, 65, 66, 67, 80, 86], "relev": [64, 65, 66, 67, 86], "enable_metadata_rout": [64, 65, 66, 67, 86], "set_config": [64, 65, 66, 67, 86], "meta": [64, 65, 66, 67, 86, 115, 122], "alia": [64, 65, 66, 67, 86, 115, 122], "metadata_rout": [64, 65, 66, 67, 86], "exist": [64, 65, 66, 67, 86, 113], "set_score_request": [64, 65, 66, 67, 86], "gini": [65, 67], "max_depth": [65, 67, 115, 123], "min_samples_split": 65, "min_samples_leaf": [65, 115, 125], "min_weight_fraction_leaf": 65, "max_leaf_nod": 65, "min_impurity_decreas": 65, "class_weight": 65, "ccp_alpha": [65, 115, 124], "entropi": 65, "criteria": [65, 113, 115, 120], "impur": [65, 67], "gain": 65, "maximum": [65, 67, 98], "node": [65, 115, 122], "expand": 65, "until": [65, 113], "leav": [65, 80], "pure": 65, "percentag": 65, "ceil": 65, "leaf": 65, "fraction": 65, "log2": 65, "stop": [65, 67, 89, 115, 120], "fashion": [65, 102], "rel": 65, "reduct": [65, 67], "unlimit": 65, "equat": 65, "n_t": 65, "n_t_r": 65, "right_impur": 65, "n_t_l": 65, "left_impur": 65, "child": 65, "balanced_subsampl": 65, "class_label": 65, "suppos": 65, "multioutput": 65, "multilabel": [65, 71, 75, 76, 77, 102, 115, 122], "everi": [65, 68, 99], "four": 65, "automat": [65, 73, 84, 87, 115, 117, 118, 121], "adjust": 65, "bincount": 65, "except": [65, 115, 121], "grown": 65, "complex": [65, 93, 128], "prune": 65, "subtre": 65, "chosen": 65, "interv": 65, "base_sampler_": [65, 67], "samplers_": [65, 67], "pipelines_": [65, 67], "n_outputs_": 65, "feature_importances_": [65, 67], "andi": [65, 128], "leo": [65, 128], "x_leav": 65, "datapoint": 65, "decision_path": 65, "path": [65, 86, 87], "n_node": 65, "goe": 65, "n_nodes_ptr": 65, "th": 65, "brought": [65, 67], "mislead": [65, 67], "cardin": [65, 67], "permutation_import": [65, 67], "net": 65, "carri": 65, "That": 65, "across": [65, 115, 126], "inner": [66, 114], "describ": [66, 80, 115, 122], "liu": [66, 128], "j": [66, 67, 71, 95], "wu": [66, 128], "zhou": [66, 128], "exploratori": [66, 128], "transact": [66, 67, 89, 91, 92, 98, 99, 128], "system": [66, 67, 73, 89, 92, 98, 99, 115, 123, 128], "man": [66, 67, 89, 92, 98, 99, 128], "cybernet": [66, 67, 89, 98, 99, 128], "vol": [66, 89, 91, 92, 96, 98, 99], "pp": [66, 71, 78, 81, 85, 89, 91, 92, 96, 98, 99], "539": [66, 115, 123, 128], "550": [66, 128], "april": 66, "built": 67, "proper": [67, 115, 125], "termin": 67, "perfect": 67, "earli": [67, 89], "shrink": 67, "There": [67, 115, 122], "trade": 67, "calcul": [67, 71, 75, 76, 77], "discret": 67, "converg": 67, "faster": 67, "fewer": 67, "estimator_weights_": 67, "estimator_errors_": 67, "seiffert": [67, 128], "khoshgoftaar": [67, 128], "van": [67, 128], "huls": [67, 128], "napolitano": [67, 128], "hybrid": [67, 128], "human": [67, 128], "2010": 67, "185": [67, 128], "197": [67, 128], "csc": 67, "coo": [67, 115, 123], "dok": 67, "lil": 67, "staged_decision_funct": 67, "monitor": 67, "determin": [67, 71, 75, 76, 77, 79, 80, 85], "staged_predict": 67, "stage": [67, 86, 115, 122], "staged_predict_proba": 67, "staged_scor": 67, "keep_spars": [68, 69, 88], "sequenc": 68, "sample_indices_": [68, 69, 81, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 115, 122], "conserv": [68, 69, 88, 89, 92, 95, 98, 113], "sparsiti": [68, 69, 88], "indices_": 68, "class_dict": [68, 69], "on_epoch_end": 68, "sampler_weight_batch": [69, 88], "target_nam": [70, 115, 118], "digit": 70, "zero_divis": 70, "art": 70, "1d": 70, "ground": [70, 71, 72, 75, 76, 77], "truth": [70, 71, 72, 75, 76, 77], "n_label": 70, "divis": 70, "act": 70, "structur": 70, "61": 70, "66": [70, 76, 77, 128], "54": 70, "worst": [71, 75, 77], "tradition": 71, "unrecogn": 71, "resolv": [71, 115, 124], "pred": [71, 75, 76, 77], "micro": [71, 75, 76, 77], "global": [71, 75, 76, 77], "unweight": [71, 75, 76, 77], "No": [71, 113], "alter": [71, 75, 76, 77, 113], "meaning": [71, 75, 76, 77], "accuracy_scor": [71, 75, 76, 77], "substitut": [71, 115, 117], "geometric_mean": 71, "kubat": [71, 96, 128], "matwin": [71, 96, 128], "address": [71, 96, 128], "side": [71, 96, 115, 116, 128], "icml": [71, 96, 128], "barandela": [71, 128], "s\u00e1nchez": [71, 73], "garc\u0131a": 71, "rangel": [71, 128], "849": [71, 128], "851": [71, 128], "001": 71, "010": 71, "471": 71, "866": 71, "mae": [72, 114, 115, 126], "mean_absolute_error": 72, "y_true_balanc": 72, "y_true_imbalanc": 72, "factori": 73, "y_score": [73, 86], "domin": 73, "iba_scoring_func": 73, "garc\u00eda": 73, "vicent": [73, 128], "javier": 73, "salvador": [73, 128], "ram\u00f3n": 73, "alberto": [73, 128], "mollineda": [73, 128], "gmean": 73, "pairwis": [74, 104, 114, 115, 126], "n_categori": 74, "propo": 74, "categories_": 74, "deduc": 74, "n_categories_": 74, "proba_per_class_": 74, "length": [74, 80], "distancemetr": 74, "interfac": [74, 87], "stanfil": [74, 128], "craig": [74, 128], "david": [74, 128], "waltz": [74, 128], "commun": [74, 128], "1986": [74, 128], "1213": [74, 128], "1228": [74, 128], "pairwise_dist": 74, "distance_matrix": 74, "tp": [75, 76], "fn": [75, 76], "quantifi": [75, 76, 77], "n_unique_label": [75, 76, 77], "specifc": 75, "warn_for": 76, "negatives_": 76, "tn": [76, 77], "fp": [76, 77], "positives_": 76, "occurr": 76, "wikipedia": 76, "entri": 76, "cat": 76, "dog": 76, "pig": 76, "kneighbors_graph": [78, 79, 80, 82, 83, 84, 85], "extend": [78, 79, 80, 82, 83, 84, 85, 113, 115, 121], "nn_": [78, 89, 92, 94, 95, 98], "he": [78, 128], "haibo": [78, 128], "yang": [78, 128], "bai": [78, 128], "edwardo": [78, 128], "garcia": [78, 128], "shutao": [78, 128], "li": [78, 115, 120, 128], "joint": [78, 128], "confer": [78, 128], "neural": [78, 128], "network": [78, 128], "world": [78, 128], "congress": [78, 128], "1322": [78, 128], "1328": [78, 128], "2008": [78, 128], "ada": 78, "904": 78, "nn_k_": [79, 80, 82, 83, 84, 85], "nn_m_": [79, 85], "chawla": [79, 82, 83, 84, 85, 128], "bowyer": [79, 82, 83, 84, 85, 128], "hall": [79, 82, 83, 84, 85, 128], "kegelmey": [79, 82, 83, 84, 85, 128], "artifici": [79, 82, 83, 84, 85, 128], "321": [79, 82, 83, 84, 85, 115, 121, 128], "357": [79, 82, 83, 84, 85, 128], "2002": [79, 82, 83, 84, 85, 128], "han": [79, 128], "wen": [79, 128], "yuan": [79, 128], "bing": [79, 128], "huan": [79, 128], "advanc": [79, 115, 125], "878": [79, 128], "887": [79, 89, 92, 98, 115, 117, 128], "2005": [79, 128], "sm": [79, 80, 82, 84, 85], "cluster_balance_threshold": 80, "density_expon": 80, "kmeans_estimator_": 80, "cluster_balance_threshold_": 80, "felix": [80, 128], "georgio": [80, 128], "douza": [80, 128], "bacao": [80, 128], "arxiv": [80, 128], "ab": 80, "1711": [80, 128], "00837": [80, 128], "800": 80, "middl": 80, "concaten": 80, "n_res_in_middl": 80, "801": [80, 115, 126], "covari": 81, "n_new_sampl": [81, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99], "shrinkage_": 81, "menardi": [81, 128], "torelli": [81, 128], "assess": [81, 128], "122": [81, 128], "categorical_encod": [83, 84, 115, 118], "nomin": [83, 84], "categorical_encoder_": [83, 84, 115, 118], "n_cat_featur": 84, "ohe_": [84, 115, 118], "categorical_features_": 84, "continuous_features_": 84, "n_cont_featur": 84, "median_std_": 84, "median": [84, 115, 122, 125], "deviat": [84, 115, 122, 125], "simul": 84, "svm_estim": [85, 115, 122, 124], "out_step": [85, 115, 122, 124], "svc": 85, "expos": [85, 90, 115, 118, 122], "support_": 85, "extrapol": 85, "svm_estimator_": 85, "nguyen": [85, 128], "cooper": [85, 128], "kamei": [85, 128], "engin": 85, "soft": [85, 90], "paradigm": 85, "intermedi": 86, "assembl": 86, "enabl": [86, 87, 115, 122], "passthrough": 86, "chain": [86, 109], "directori": [86, 87], "trigger": [86, 87], "named_step": [86, 87], "consum": [86, 87], "surpris": 86, "break": [86, 115, 122], "contract": 86, "estimm": 86, "semant": 86, "tt": 86, "y_hat": 86, "224": 86, "fulfil": [86, 113], "fit_param": 86, "prefix": 86, "s__p": 86, "fit_predict": 86, "xt": 86, "n_transformed_featur": 86, "yt": 86, "constructor": [86, 87], "inverse_transform": [86, 115, 122], "revers": 86, "predict_param": 86, "uncertainti": 86, "return_std": 86, "return_cov": 86, "propag": 86, "predict_log_proba_param": 86, "y_log_proba": 86, "predict_proba_param": 86, "score_sampl": 86, "set_output": 86, "prior": [86, 87], "shorthand": 87, "permit": 87, "lowercas": 87, "gaussiannb": 87, "kind_sel": [89, 92, 95, 98, 113], "inherit": [89, 91, 92, 94, 95, 96, 98], "kneighborsmixin": [89, 91, 92, 94, 95, 96, 98, 100, 113, 115, 120], "becom": [89, 115, 120], "condens": [89, 90, 91, 92, 98, 99, 114, 128], "448": [89, 98, 128], "june": [89, 98, 115, 123, 125], "1976": [89, 98, 99, 128], "coordin": 90, "cluster_centers_": 90, "voting_": 90, "cc": [90, 113], "n_seeds_": [91, 96, 113], "extract": [91, 94, 96, 115, 116, 128], "hart": [91, 128], "theori": [91, 128], "515": [91, 128], "516": [91, 128], "1968": [91, 128], "fetch_mldata": 91, "pima": 91, "diabetes_scal": 91, "268": 91, "cnn": [91, 99, 113, 128], "227": 91, "wilson": [92, 128], "asymptot": [92, 128], "cybernetr": 92, "408": [92, 128], "421": [92, 128], "1972": [92, 128], "smith": [93, 128], "michael": [93, 115, 123, 128], "toni": [93, 128], "martinez": [93, 128], "christoph": [93, 128], "giraud": [93, 128], "carrier": [93, 128], "256": [93, 128], "iht": [93, 113], "n_neighbors_ver3": [94, 113], "zhang": [94, 128], "unbalanc": [94, 128], "involv": [94, 128], "proceed": [94, 128], "workshop": [94, 128], "nm": 94, "threshold_clean": 95, "ci": 95, "theta": 95, "laurikkala": [95, 128], "identif": [95, 128], "springer": [95, 128], "berlin": 95, "heidelberg": 95, "2001": [95, 128], "ncr": [95, 113], "877": 95, "179": [96, 128], "186": [96, 128], "oss": [96, 113], "496": 96, "n_iter_": 98, "renn": [98, 113], "modif": [99, 128], "769": [99, 115, 126, 128], "897": 99, "static": 99, "is_tomek": 99, "nn_index": 99, "class_typ": 99, "track": 99, "nn_name": 100, "nn_object": 100, "additional_neighbor": 100, "initialis": 100, "integ": 100, "said": 100, "sometim": 100, "sampling_typ": 101, "basesampl": 101, "sampling_strategy_convert": 101, "indicate_one_vs_al": 102, "is_one_vs_al": 102, "indicate_multilabel": 102, "estimator_check": 103, "pprint": 103, "test_check_estim": 103, "check_estimators_fit_returns_self": 103, "decisiontreeregressor": 103, "test_sklearn_compatible_estim": 103, "miscellan": [104, 114], "parametrize_with_check": 104, "composit": 109, "prototype_gener": [111, 115, 121], "prototype_select": [111, 115, 121], "remain": [113, 115, 120], "synthes": 113, "effici": 113, "mind": 113, "ineffici": 113, "contrast": 113, "192": 113, "181": 113, "mz03": [113, 128], "nm1": 113, "x_resampled_nm1": 113, "closest": 113, "presenc": 113, "around": 113, "yellow": 113, "rather": 113, "imagin": 113, "tom76b": [113, 128], "neighboorhood": [113, 115, 116], "wil72": [113, 128], "213": 113, "4568": 113, "234": 113, "4666": 113, "subclass": 113, "tom76a": [113, 128], "delet": 113, "208": 113, "4551": 113, "4601": 113, "har68": [113, 128], "misclassifi": [113, 115, 120], "noth": 113, "reiter": 113, "115": 113, "4404": 113, "put": [113, 115, 120], "lau01": [113, 128], "smgc14": [113, 128], "statement": 114, "ill": 114, "pose": 114, "manag": [114, 115, 126], "deriv": [114, 115, 121], "absolut": 114, "ma": 114, "pitfal": 114, "leakag": 114, "bug": 114, "juli": [115, 118], "989": [115, 118], "ayy7": [115, 118], "convers": [115, 118], "1003": [115, 118], "spuriou": [115, 118], "1007": [115, 118, 128], "999": [115, 118], "1006": [115, 118], "1001": [115, 118], "attempt": [115, 118], "1004": [115, 118], "1008": [115, 118], "glemaitr": [115, 118, 122], "1009": [115, 118], "decemb": [115, 116, 117, 124], "2022": [115, 117, 127], "unvalid": [115, 117], "964": [115, 117], "prakhyath": [115, 117], "bhandari": [115, 117], "oo": [115, 117], "953": [115, 117], "bu": [115, 117], "946": [115, 117], "947": [115, 117], "949": [115, 117], "955": [115, 117], "959": [115, 117], "duck": [115, 117], "cuml": [115, 117], "858": [115, 117], "nv": [115, 117], "jpt": [115, 117], "januari": [115, 120, 127], "septemb": [115, 126], "2020": [115, 124, 125, 126], "864": [115, 126], "februari": [115, 121, 124, 126], "2021": [115, 126], "aur\u00e9lien": [115, 126], "massiot": [115, 126], "796": [115, 126], "802": [115, 126], "unlock": [115, 126], "808": [115, 126], "770": [115, 126], "754": [115, 126], "andrea": [115, 126], "lorenzon": [115, 126], "790": [115, 126], "favour": [115, 126], "extras_requir": [115, 126], "816": [115, 126], "templat": [115, 123, 126], "pydata": [115, 126], "theme": [115, 126], "815": [115, 126], "687": [115, 125], "refactor": [115, 122, 125], "710": [115, 125], "721": [115, 125], "711": [115, 125], "zerolfx": [115, 125], "unus": [115, 125], "720": [115, 125], "null": [115, 125], "675": [115, 125], "bganglia": [115, 125], "718": [115, 125], "lazi": [115, 125], "719": [115, 125], "673": [115, 124], "plain": [115, 124], "681": [115, 124], "2019": [115, 123, 124], "primarili": [115, 124], "bad": [115, 124], "oob": [115, 124], "656": [115, 124], "determinist": [115, 122, 124], "cross_val_predict": [115, 124], "parallel": [115, 124], "599": [115, 124], "shihab": [115, 124], "shahriar": [115, 124], "khan": [115, 124], "privat": [115, 122, 124], "_base": [115, 124], "_set_random_st": [115, 124], "_forest": [115, 124], "_parallel_build_tre": [115, 124], "_classif": [115, 124], "_check_target": [115, 124], "_prf_divid": [115, 124], "_safe_index": [115, 124], "_test": [115, 124], "assert_allclos": [115, 124], "assert_array_equ": [115, 124], "skiptest": [115, 124], "621": [115, 124], "636": [115, 124], "637": [115, 124], "finit": [115, 124], "643": [115, 124], "644": [115, 124], "speed": [115, 124], "596": [115, 124], "649": [115, 124], "matt": [115, 124], "ed": [115, 124], "cycl": [115, 120, 124], "balancecascad": [115, 116, 120, 121, 122, 124], "check_ratio": [115, 121, 124], "return_indic": [115, 122, 124], "stump": [115, 123], "525": [115, 123], "ariel": [115, 123], "rossanigo": [115, 123], "documen": [115, 123], "530": [115, 123], "parallelis": [115, 123], "547": [115, 123], "hsieh": [115, 123], "_show_vers": [115, 123], "557": [115, 123], "alexand": [115, 123], "hay": [115, 123], "stephan": [115, 123], "heijl": [115, 123], "576": [115, 123], "move": [115, 120, 121, 123], "stack": [115, 123], "554": [115, 123], "oliv": [115, 123], "rausch": [115, 123], "578": [115, 123], "weak": [115, 123], "545": [115, 123], "octob": [115, 122], "2018": [115, 121, 122], "491": [115, 122], "490": [115, 122], "densifi": [115, 122], "495": [115, 122], "tie": [115, 122], "497": [115, 122], "strengthen": [115, 122], "foundat": [115, 122], "consolid": [115, 122], "simplifi": [115, 122], "down": [115, 122], "introduc": [115, 122], "411": [115, 122], "fit_sampl": [115, 122], "backward": [115, 122], "462": [115, 122], "409": [115, 122], "455": [115, 122], "459": [115, 122], "469": [115, 122], "imblern": [115, 122], "deni": [115, 122], "dudnik": [115, 122], "372": [115, 122], "367": [115, 122], "440": [115, 122], "439": [115, 122], "hugo": [115, 122], "gascon": [115, 122], "451": [115, 122], "ol": [115, 122], "silvig": [115, 122], "klizter": [115, 122], "354": [115, 122], "447": [115, 122], "446": [115, 122], "450": [115, 122], "458": [115, 122], "331": [115, 122, 128], "upgrad": [115, 122], "379": [115, 122], "catch": [115, 122], "441": [115, 122], "style": [115, 122], "470": [115, 122], "454": [115, 122], "editednearestneighbor": [115, 120, 122], "repeatededitednearestneighbor": [115, 122], "exact": [115, 122], "472": [115, 122], "474": [115, 122], "nosetest": [115, 121], "joan": [115, 121], "massich": [115, 121], "295": [115, 121], "312": [115, 121], "abl": [115, 121], "307": [115, 121], "249": [115, 121], "316": [115, 121], "check_estim": [115, 121], "242": [115, 121], "264": [115, 121], "290": [115, 121], "__init__": [115, 121], "samplermixin": [115, 120, 121], "mixin": [115, 121], "creation": [115, 120, 121], "recurr": [115, 121], "clearer": [115, 121], "dinstinct": [115, 121], "277": [115, 121], "min_c_": [115, 121], "disappear": [115, 120], "condensedneareastneigbour": [115, 120], "emb": [115, 120], "231": [115, 120], "188": [115, 120], "sel_x": [115, 120], "aliaksei": [115, 120], "halachkin": [115, 120], "230": [115, 120, 128], "aleksandr": [115, 120], "loskutov": [115, 120], "235": [115, 120], "rafael": [115, 120], "wampfler": [115, 120], "204": [115, 120], "moment": [115, 120], "size_ngh": [115, 120], "basebinaryclasssampl": [115, 120], "basemulticlasssampl": [115, 120], "abnorm": [115, 120], "assign": [115, 120], "182": [115, 120], "unbalanceddataset": [115, 120], "francoi": [115, 120], "magimel": [115, 120], "2016": [115, 116], "fmfn": [115, 116], "condensend": [115, 116], "bsmote": [115, 116], "ricardo": 128, "jo": 128, "\u00e9": 128, "\u00e1": 128, "nchez": 128, "garca": 128, "edgar": 128, "gustavo": 128, "eapa": 128, "ana": 128, "lc": 128, "maria": 128, "carolina": 128, "ronaldo": 128, "nitesh": 128, "kevin": 128, "lawrenc": 128, "philip": 128, "esuli": 128, "baccianella": 128, "sebastiani": 128, "283": 128, "287": 128, "dec": 128, "doi": 128, "ieeecomputersocieti": 128, "1109": 128, "isda": 128, "garc": 128, "\u00ed": 128, "ram": 128, "\u00f3": 128, "hui": 128, "mao": 128, "peter": 128, "corresp": 128, "shohei": 128, "hisashi": 128, "yutaka": 128, "miroslav": 128, "stan": 128, "nashvil": 128, "usa": 128, "preprint": 128, "jorma": 128, "medicin": 128, "europ": 128, "63": 128, "xu": 128, "ying": 128, "jianxin": 128, "zhi": 128, "hua": 128, "richard": 128, "inderjeet": 128, "126": 128, "giovanna": 128, "nicola": 128, "s10618": 128, "012": 128, "0295": 128, "hien": 128, "eric": 128, "katsuari": 128, "fifth": 128, "smc": 128, "hiroshima": 128, "chapter": 128, "chri": 128, "taghi": 128, "jason": 128, "amri": 128, "ivan": 128, "tran": 128, "shuo": 128, "xin": 128, "324": 128, "randal": 128, "denni": 128}, "objects": {"imblearn": [[59, 0, 1, "", "FunctionSampler"], [56, 2, 0, "-", "combine"], [57, 2, 0, "-", "datasets"], [58, 2, 0, "-", "ensemble"], [105, 2, 0, "-", "keras"], [106, 2, 0, "-", "metrics"], [108, 2, 0, "-", "over_sampling"], [109, 2, 0, "-", "pipeline"], [110, 2, 0, "-", "tensorflow"], [111, 2, 0, "-", "under_sampling"], [112, 2, 0, "-", "utils"]], "imblearn.FunctionSampler": [[59, 1, 1, "", "fit"], [59, 1, 1, "", "fit_resample"], [59, 1, 1, "", "get_feature_names_out"], [59, 1, 1, "", "get_metadata_routing"], [59, 1, 1, "", "get_params"], [59, 1, 1, "", "set_params"]], "imblearn.combine": [[60, 0, 1, "", "SMOTEENN"], [61, 0, 1, "", "SMOTETomek"]], "imblearn.combine.SMOTEENN": [[60, 1, 1, "", "fit"], [60, 1, 1, "", "fit_resample"], [60, 1, 1, "", "get_feature_names_out"], [60, 1, 1, "", "get_metadata_routing"], [60, 1, 1, "", "get_params"], [60, 1, 1, "", "set_params"]], "imblearn.combine.SMOTETomek": [[61, 1, 1, "", "fit"], [61, 1, 1, "", "fit_resample"], [61, 1, 1, "", "get_feature_names_out"], [61, 1, 1, "", "get_metadata_routing"], [61, 1, 1, "", "get_params"], [61, 1, 1, "", "set_params"]], "imblearn.datasets": [[62, 3, 1, "", "fetch_datasets"], [63, 3, 1, "", "make_imbalance"]], "imblearn.ensemble": [[64, 0, 1, "", "BalancedBaggingClassifier"], [65, 0, 1, "", "BalancedRandomForestClassifier"], [66, 0, 1, "", "EasyEnsembleClassifier"], [67, 0, 1, "", "RUSBoostClassifier"]], "imblearn.ensemble.BalancedBaggingClassifier": [[64, 4, 1, "", "base_estimator_"], [64, 1, 1, "", "decision_function"], [64, 4, 1, "", "estimator_"], [64, 4, 1, "", "estimators_samples_"], [64, 1, 1, "", "fit"], [64, 1, 1, "", "get_metadata_routing"], [64, 1, 1, "", "get_params"], [64, 4, 1, "", "n_features_"], [64, 1, 1, "", "predict"], [64, 1, 1, "", "predict_log_proba"], [64, 1, 1, "", "predict_proba"], [64, 1, 1, "", "score"], [64, 1, 1, "", "set_fit_request"], [64, 1, 1, "", "set_params"], [64, 1, 1, "", "set_score_request"]], "imblearn.ensemble.BalancedRandomForestClassifier": [[65, 1, 1, "", "apply"], [65, 4, 1, "", "base_estimator_"], [65, 1, 1, "", "decision_path"], [65, 4, 1, "", "estimator_"], [65, 4, 1, "", "feature_importances_"], [65, 1, 1, "", "fit"], [65, 1, 1, "", "get_metadata_routing"], [65, 1, 1, "", "get_params"], [65, 4, 1, "", "n_features_"], [65, 1, 1, "", "predict"], [65, 1, 1, "", "predict_log_proba"], [65, 1, 1, "", "predict_proba"], [65, 1, 1, "", "score"], [65, 1, 1, "", "set_fit_request"], [65, 1, 1, "", "set_params"], [65, 1, 1, "", "set_score_request"]], "imblearn.ensemble.EasyEnsembleClassifier": [[66, 4, 1, "", "base_estimator_"], [66, 1, 1, "", "decision_function"], [66, 4, 1, "", "estimator_"], [66, 4, 1, "", "estimators_samples_"], [66, 1, 1, "", "fit"], [66, 1, 1, "", "get_metadata_routing"], [66, 1, 1, "", "get_params"], [66, 4, 1, "", "n_features_"], [66, 1, 1, "", "predict"], [66, 1, 1, "", "predict_log_proba"], [66, 1, 1, "", "predict_proba"], [66, 1, 1, "", "score"], [66, 1, 1, "", "set_fit_request"], [66, 1, 1, "", "set_params"], [66, 1, 1, "", "set_score_request"]], "imblearn.ensemble.RUSBoostClassifier": [[67, 4, 1, "", "base_estimator_"], [67, 1, 1, "", "decision_function"], [67, 4, 1, "", "estimator_"], [67, 4, 1, "", "feature_importances_"], [67, 1, 1, "", "fit"], [67, 1, 1, "", "get_metadata_routing"], [67, 1, 1, "", "get_params"], [67, 1, 1, "", "predict"], [67, 1, 1, "", "predict_log_proba"], [67, 1, 1, "", "predict_proba"], [67, 1, 1, "", "score"], [67, 1, 1, "", "set_fit_request"], [67, 1, 1, "", "set_params"], [67, 1, 1, "", "set_score_request"], [67, 1, 1, "", "staged_decision_function"], [67, 1, 1, "", "staged_predict"], [67, 1, 1, "", "staged_predict_proba"], [67, 1, 1, "", "staged_score"]], "imblearn.keras": [[68, 0, 1, "", "BalancedBatchGenerator"], [69, 3, 1, "", "balanced_batch_generator"]], "imblearn.keras.BalancedBatchGenerator": [[68, 1, 1, "", "on_epoch_end"]], "imblearn.metrics": [[70, 3, 1, "", "classification_report_imbalanced"], [71, 3, 1, "", "geometric_mean_score"], [72, 3, 1, "", "macro_averaged_mean_absolute_error"], [73, 3, 1, "", "make_index_balanced_accuracy"], [106, 2, 0, "-", "pairwise"], [75, 3, 1, "", "sensitivity_score"], [76, 3, 1, "", "sensitivity_specificity_support"], [77, 3, 1, "", "specificity_score"]], "imblearn.metrics.pairwise": [[74, 0, 1, "", "ValueDifferenceMetric"]], "imblearn.metrics.pairwise.ValueDifferenceMetric": [[74, 1, 1, "", "fit"], [74, 1, 1, "", "get_metadata_routing"], [74, 1, 1, "", "get_params"], [74, 1, 1, "", "pairwise"], [74, 1, 1, "", "set_params"]], "imblearn.over_sampling": [[78, 0, 1, "", "ADASYN"], [79, 0, 1, "", "BorderlineSMOTE"], [80, 0, 1, "", "KMeansSMOTE"], [81, 0, 1, "", "RandomOverSampler"], [82, 0, 1, "", "SMOTE"], [83, 0, 1, "", "SMOTEN"], [84, 0, 1, "", "SMOTENC"], [85, 0, 1, "", "SVMSMOTE"]], "imblearn.over_sampling.ADASYN": [[78, 1, 1, "", "fit"], [78, 1, 1, "", "fit_resample"], [78, 1, 1, "", "get_feature_names_out"], [78, 1, 1, "", "get_metadata_routing"], [78, 1, 1, "", "get_params"], [78, 1, 1, "", "set_params"]], "imblearn.over_sampling.BorderlineSMOTE": [[79, 1, 1, "", "fit"], [79, 1, 1, "", "fit_resample"], [79, 1, 1, "", "get_feature_names_out"], [79, 1, 1, "", "get_metadata_routing"], [79, 1, 1, "", "get_params"], [79, 1, 1, "", "set_params"]], "imblearn.over_sampling.KMeansSMOTE": [[80, 1, 1, "", "fit"], [80, 1, 1, "", "fit_resample"], [80, 1, 1, "", "get_feature_names_out"], [80, 1, 1, "", "get_metadata_routing"], [80, 1, 1, "", "get_params"], [80, 1, 1, "", "set_params"]], "imblearn.over_sampling.RandomOverSampler": [[81, 1, 1, "", "fit"], [81, 1, 1, "", "fit_resample"], [81, 1, 1, "", "get_feature_names_out"], [81, 1, 1, "", "get_metadata_routing"], [81, 1, 1, "", "get_params"], [81, 1, 1, "", "set_params"]], "imblearn.over_sampling.SMOTE": [[82, 1, 1, "", "fit"], [82, 1, 1, "", "fit_resample"], [82, 1, 1, "", "get_feature_names_out"], [82, 1, 1, "", "get_metadata_routing"], [82, 1, 1, "", "get_params"], [82, 1, 1, "", "set_params"]], "imblearn.over_sampling.SMOTEN": [[83, 1, 1, "", "fit"], [83, 1, 1, "", "fit_resample"], [83, 1, 1, "", "get_feature_names_out"], [83, 1, 1, "", "get_metadata_routing"], [83, 1, 1, "", "get_params"], [83, 1, 1, "", "set_params"]], "imblearn.over_sampling.SMOTENC": [[84, 1, 1, "", "fit"], [84, 1, 1, "", "fit_resample"], [84, 1, 1, "", "get_feature_names_out"], [84, 1, 1, "", "get_metadata_routing"], [84, 1, 1, "", "get_params"], [84, 4, 1, "", "ohe_"], [84, 1, 1, "", "set_params"]], "imblearn.over_sampling.SVMSMOTE": [[85, 1, 1, "", "fit"], [85, 1, 1, "", "fit_resample"], [85, 1, 1, "", "get_feature_names_out"], [85, 1, 1, "", "get_metadata_routing"], [85, 1, 1, "", "get_params"], [85, 1, 1, "", "set_params"]], "imblearn.pipeline": [[86, 0, 1, "", "Pipeline"], [87, 3, 1, "", "make_pipeline"]], "imblearn.pipeline.Pipeline": [[86, 4, 1, "", "classes_"], [86, 1, 1, "", "decision_function"], [86, 4, 1, "", "feature_names_in_"], [86, 1, 1, "", "fit"], [86, 1, 1, "", "fit_predict"], [86, 1, 1, "", "fit_resample"], [86, 1, 1, "", "fit_transform"], [86, 1, 1, "", "get_feature_names_out"], [86, 1, 1, "", "get_metadata_routing"], [86, 1, 1, "", "get_params"], [86, 1, 1, "", "inverse_transform"], [86, 4, 1, "", "n_features_in_"], [86, 4, 1, "", "named_steps"], [86, 1, 1, "", "predict"], [86, 1, 1, "", "predict_log_proba"], [86, 1, 1, "", "predict_proba"], [86, 1, 1, "", "score"], [86, 1, 1, "", "score_samples"], [86, 1, 1, "", "set_output"], [86, 1, 1, "", "set_params"], [86, 1, 1, "", "set_score_request"], [86, 1, 1, "", "transform"]], "imblearn.tensorflow": [[88, 3, 1, "", "balanced_batch_generator"]], "imblearn.under_sampling": [[89, 0, 1, "", "AllKNN"], [90, 0, 1, "", "ClusterCentroids"], [91, 0, 1, "", "CondensedNearestNeighbour"], [92, 0, 1, "", "EditedNearestNeighbours"], [93, 0, 1, "", "InstanceHardnessThreshold"], [94, 0, 1, "", "NearMiss"], [95, 0, 1, "", "NeighbourhoodCleaningRule"], [96, 0, 1, "", "OneSidedSelection"], [97, 0, 1, "", "RandomUnderSampler"], [98, 0, 1, "", "RepeatedEditedNearestNeighbours"], [99, 0, 1, "", "TomekLinks"], [111, 2, 0, "-", "_prototype_generation"], [111, 2, 0, "-", "_prototype_selection"]], "imblearn.under_sampling.AllKNN": [[89, 1, 1, "", "fit"], [89, 1, 1, "", "fit_resample"], [89, 1, 1, "", "get_feature_names_out"], [89, 1, 1, "", "get_metadata_routing"], [89, 1, 1, "", "get_params"], [89, 1, 1, "", "set_params"]], "imblearn.under_sampling.ClusterCentroids": [[90, 1, 1, "", "fit"], [90, 1, 1, "", "fit_resample"], [90, 1, 1, "", "get_feature_names_out"], [90, 1, 1, "", "get_metadata_routing"], [90, 1, 1, "", "get_params"], [90, 1, 1, "", "set_params"]], "imblearn.under_sampling.CondensedNearestNeighbour": [[91, 1, 1, "", "fit"], [91, 1, 1, "", "fit_resample"], [91, 1, 1, "", "get_feature_names_out"], [91, 1, 1, "", "get_metadata_routing"], [91, 1, 1, "", "get_params"], [91, 1, 1, "", "set_params"]], "imblearn.under_sampling.EditedNearestNeighbours": [[92, 1, 1, "", "fit"], [92, 1, 1, "", "fit_resample"], [92, 1, 1, "", "get_feature_names_out"], [92, 1, 1, "", "get_metadata_routing"], [92, 1, 1, "", "get_params"], [92, 1, 1, "", "set_params"]], "imblearn.under_sampling.InstanceHardnessThreshold": [[93, 1, 1, "", "fit"], [93, 1, 1, "", "fit_resample"], [93, 1, 1, "", "get_feature_names_out"], [93, 1, 1, "", "get_metadata_routing"], [93, 1, 1, "", "get_params"], [93, 1, 1, "", "set_params"]], "imblearn.under_sampling.NearMiss": [[94, 1, 1, "", "fit"], [94, 1, 1, "", "fit_resample"], [94, 1, 1, "", "get_feature_names_out"], [94, 1, 1, "", "get_metadata_routing"], [94, 1, 1, "", "get_params"], [94, 1, 1, "", "set_params"]], "imblearn.under_sampling.NeighbourhoodCleaningRule": [[95, 1, 1, "", "fit"], [95, 1, 1, "", "fit_resample"], [95, 1, 1, "", "get_feature_names_out"], [95, 1, 1, "", "get_metadata_routing"], [95, 1, 1, "", "get_params"], [95, 1, 1, "", "set_params"]], "imblearn.under_sampling.OneSidedSelection": [[96, 1, 1, "", "fit"], [96, 1, 1, "", "fit_resample"], [96, 1, 1, "", "get_feature_names_out"], [96, 1, 1, "", "get_metadata_routing"], [96, 1, 1, "", "get_params"], [96, 1, 1, "", "set_params"]], "imblearn.under_sampling.RandomUnderSampler": [[97, 1, 1, "", "fit"], [97, 1, 1, "", "fit_resample"], [97, 1, 1, "", "get_feature_names_out"], [97, 1, 1, "", "get_metadata_routing"], [97, 1, 1, "", "get_params"], [97, 1, 1, "", "set_params"]], "imblearn.under_sampling.RepeatedEditedNearestNeighbours": [[98, 1, 1, "", "fit"], [98, 1, 1, "", "fit_resample"], [98, 1, 1, "", "get_feature_names_out"], [98, 1, 1, "", "get_metadata_routing"], [98, 1, 1, "", "get_params"], [98, 1, 1, "", "set_params"]], "imblearn.under_sampling.TomekLinks": [[99, 1, 1, "", "fit"], [99, 1, 1, "", "fit_resample"], [99, 1, 1, "", "get_feature_names_out"], [99, 1, 1, "", "get_metadata_routing"], [99, 1, 1, "", "get_params"], [99, 1, 1, "", "is_tomek"], [99, 1, 1, "", "set_params"]], "imblearn.utils": [[100, 3, 1, "", "check_neighbors_object"], [101, 3, 1, "", "check_sampling_strategy"], [102, 3, 1, "", "check_target_type"], [112, 2, 0, "-", "estimator_checks"]], "imblearn.utils.estimator_checks": [[103, 3, 1, "", "parametrize_with_checks"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:module", "3": "py:function", "4": "py:property"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "module", "Python module"], "3": ["py", "function", "Python function"], "4": ["py", "property", "Python property"]}, "titleterms": {"about": 0, "u": 0, "histori": [0, 115], "develop": [0, 46, 115, 119], "lead": 0, "contributor": 0, "cite": 0, "imbalanc": [0, 1, 2, 5, 16, 19, 20, 24, 26, 45, 48, 50, 51], "learn": [0, 1, 2, 5, 9, 24, 26, 48, 50], "exampl": [1, 4, 9, 12, 15, 18, 22, 26, 30, 35, 38, 43, 47, 55, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], "show": [1, 26], "api": [1, 26, 50, 104, 115, 116, 120, 121, 122], "usag": [1, 26, 36], "how": [2, 5, 7], "us": [2, 5, 7, 12, 18, 19, 20, 26, 30, 31, 32, 38, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 112, 113], "sampling_strategi": 2, "creat": [2, 10, 16], "an": [2, 5, 7, 16, 19, 20], "dataset": [2, 4, 5, 8, 13, 15, 16, 19, 20, 26, 45, 51, 57, 62, 63], "resampl": [2, 5, 20], "algorithm": [2, 5, 58, 108, 113], "float": 2, "str": 2, "dict": 2, "list": 2, "callabl": 2, "comput": [3, 10, 11, 14, 17, 21, 25, 29, 34, 37, 42], "time": [3, 10, 11, 14, 17, 21, 25, 29, 34, 37, 42], "base": [4, 26], "real": [4, 26], "world": [4, 26], "fit": 5, "model": [5, 26, 27, 115, 123, 124, 125], "fight": 5, "bia": 5, "problem": [5, 50], "definit": [5, 41], "strategi": 5, "from": [5, 49, 55], "dummi": 5, "baselin": 5, "linear": 5, "classifi": [5, 19, 20, 47], "class_weight": 5, "train": 5, "set": [5, 9, 31, 50, 113], "dure": 5, "specif": [5, 24, 51], "balanc": [5, 9, 10, 19, 31, 47], "multiclass": 6, "classif": [6, 9, 10, 20, 23, 51, 106], "under": [6, 13, 26, 38, 39, 43, 56, 111, 113, 115, 119], "sampl": [6, 8, 10, 13, 20, 26, 30, 31, 32, 33, 38, 39, 40, 43, 55, 56, 108, 111, 113], "custom": [7, 54], "sampler": [7, 13, 19, 31, 32, 36, 39, 47, 50, 54, 112], "implement": 7, "outlier": 7, "reject": 7, "estim": 7, "toi": 7, "data": [7, 9, 10, 31, 44, 50, 113], "gener": [7, 13, 16, 19, 32, 39, 45, 54, 55, 105, 110, 111, 113], "functionsampl": [7, 59], "integr": 7, "within": 7, "pipelin": [7, 9, 10, 26, 35, 36, 86, 87, 109], "benchmark": [8, 45], "over": [8, 13, 19, 26, 30, 31, 33, 43, 55, 56, 108], "method": [8, 12, 18, 26, 30, 38, 56, 58, 108, 111, 116], "face": 8, "recognit": 8, "task": 8, "load": [8, 10, 20, 45], "compar": [8, 13, 20, 31, 39], "approach": 8, "topic": 9, "text": 9, "document": [9, 48, 115, 120, 121, 122, 123], "The": 9, "usual": 9, "scikit": 9, "class": [9, 12, 18, 26, 30, 38, 55], "befor": 9, "porto": 10, "seguro": 10, "mini": 10, "batch": [10, 105, 110], "kera": [10, 54, 68, 105], "refer": [10, 19, 54, 104, 128], "defin": 10, "pre": 10, "process": 10, "neural": 10, "network": 10, "loop": 10, "plot": [10, 28], "result": 10, "combin": [12, 13, 26, 43, 56, 60, 61], "make": [16, 46], "ensembl": [18, 20, 26, 47, 58, 64, 65, 66, 67], "bag": [19, 20, 47, 58], "exactli": 19, "smote": [19, 31, 32, 55, 82, 108], "roughli": 19, "singl": 20, "decis": 20, "tree": [20, 47], "without": 20, "random": [20, 31, 33, 47, 55], "forest": [20, 47], "boost": [20, 47, 58], "evalu": [22, 23, 26], "compil": 23, "report": 23, "metric": [24, 51, 70, 71, 73, 106], "select": [26, 27, 39, 40, 111, 113], "valid": [28, 46, 112], "curv": 28, "illustr": [31, 41], "influenc": 31, "ratio": 31, "more": 31, "advanc": 31, "adasyn": [31, 55, 78], "like": 32, "effect": 33, "shrinkag": 33, "factor": 33, "embed": 36, "prototyp": [39, 111, 113], "new": [39, 115, 116, 120, 121, 122, 126], "exist": 39, "nearmiss": [40, 94], "1": [40, 115, 116, 117, 124, 126, 127], "2": [40, 115, 120, 122, 124], "3": [40, 115, 121], "tomek": [41, 113], "link": [41, 113], "common": 44, "pitfal": 44, "recommend": 44, "practic": [44, 55], "leakag": 44, "util": [45, 46, 112], "guidelin": 46, "tool": 46, "deprec": [46, 115, 117, 118, 121, 122, 124, 125, 126], "releas": [46, 115], "major": 46, "bug": [46, 115, 117, 118, 120, 121, 122, 123, 124, 125, 126], "fix": [46, 115, 117, 118, 120, 121, 122, 124, 125, 126], "includ": 47, "inner": 47, "get": 49, "start": 49, "prerequisit": 49, "instal": 49, "pypi": 49, "conda": 49, "forg": 49, "repositori": 49, "sourc": 49, "avail": 49, "github": 49, "test": [49, 112, 121], "coverag": 49, "contribut": 49, "introduct": 50, "": [50, 113], "panda": 50, "out": 50, "spars": 50, "input": 50, "statement": 50, "regard": 50, "sensit": 51, "addit": 51, "macro": 51, "averag": 51, "mean": 51, "absolut": 51, "error": 51, "ma": 51, "mae": 51, "summari": [51, 120, 121], "import": 51, "pairwis": [51, 106], "valu": 51, "differ": 51, "miscellan": [54, 107], "tensorflow": [54, 110], "A": 55, "guid": [55, 114], "naiv": 55, "ill": 55, "pose": 55, "variant": 55, "mathemat": [55, 113], "formul": [55, 113], "multi": 55, "manag": 55, "imblearn": [59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], "smoteenn": 60, "smotetomek": 61, "fetch_dataset": 62, "make_imbal": 63, "balancedbaggingclassifi": 64, "balancedrandomforestclassifi": 65, "easyensembleclassifi": 66, "rusboostclassifi": 67, "balancedbatchgener": 68, "balanced_batch_gener": [69, 88], "classification_report_imbalanc": 70, "geometric_mean_scor": 71, "macro_averaged_mean_absolute_error": 72, "make_index_balanced_accuraci": 73, "valuedifferencemetr": 74, "sensitivity_scor": 75, "sensitivity_specificity_support": 76, "specificity_scor": 77, "over_sampl": [78, 79, 80, 81, 82, 83, 84, 85], "borderlinesmot": 79, "kmeanssmot": 80, "randomoversampl": 81, "smoten": 83, "smotenc": 84, "svmsmote": 85, "make_pipelin": 87, "allknn": 89, "under_sampl": [89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], "clustercentroid": 90, "condensednearestneighbour": 91, "editednearestneighbour": 92, "instancehardnessthreshold": 93, "neighbourhoodcleaningrul": 95, "onesidedselect": 96, "randomundersampl": 97, "repeatededitednearestneighbour": 98, "tomeklink": 99, "check_neighbors_object": 100, "check_sampling_strategi": 101, "check_target_typ": 102, "parametrize_with_check": 103, "basic": 108, "check": 112, "compat": [112, 115, 117, 118], "your": 112, "own": 112, "control": 113, "techniqu": 113, "clean": 113, "edit": 113, "nearest": 113, "neighbour": 113, "condens": 113, "neighbor": 113, "deriv": 113, "instanc": 113, "hard": 113, "threshold": 113, "user": 114, "version": [115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127], "0": [115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127], "12": [115, 119], "changelog": [115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127], "11": [115, 118], "enhanc": [115, 117, 118, 120, 121, 122, 123, 124, 125, 126], "10": [115, 117], "9": [115, 127], "8": [115, 126], "mainten": [115, 122, 123, 124, 125, 126], "featur": [115, 120, 121, 122, 126], "7": [115, 125], "chang": [115, 120, 121, 123, 124, 125], "6": [115, 124], "5": [115, 123], "4": [115, 122], "highlight": [115, 122]}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinxcontrib.bibtex": 9, "sphinx": 57}, "alltitles": {"About us": [[0, "about-us"]], "History": [[0, "history"]], "Development lead": [[0, "development-lead"]], "Contributors": [[0, "contributors"]], "Citing imbalanced-learn": [[0, "citing-imbalanced-learn"]], "Examples showing API imbalanced-learn usage": [[1, "examples-showing-api-imbalanced-learn-usage"], [26, "examples-showing-api-imbalanced-learn-usage"]], "How to use sampling_strategy in imbalanced-learn": [[2, "how-to-use-sampling-strategy-in-imbalanced-learn"]], "Create an imbalanced dataset": [[2, "create-an-imbalanced-dataset"], [16, "create-an-imbalanced-dataset"]], "Using sampling_strategy in resampling algorithms": [[2, "using-sampling-strategy-in-resampling-algorithms"]], "sampling_strategy as a float": [[2, "sampling-strategy-as-a-float"]], "sampling_strategy as a str": [[2, "sampling-strategy-as-a-str"]], "sampling_strategy as a dict": [[2, "sampling-strategy-as-a-dict"]], "sampling_strategy as a list": [[2, "sampling-strategy-as-a-list"]], "sampling_strategy as a callable": [[2, "sampling-strategy-as-a-callable"]], "Computation times": [[3, "computation-times"], [11, "computation-times"], [14, "computation-times"], [17, "computation-times"], [21, "computation-times"], [25, "computation-times"], [29, "computation-times"], [34, "computation-times"], [37, "computation-times"], [42, "computation-times"]], "Examples based on real world datasets": [[4, "examples-based-on-real-world-datasets"], [26, "examples-based-on-real-world-datasets"]], "Fitting model on imbalanced datasets and how to fight bias": [[5, "fitting-model-on-imbalanced-datasets-and-how-to-fight-bias"]], "Problem definition": [[5, "problem-definition"]], "Strategies to learn from an imbalanced dataset": [[5, "strategies-to-learn-from-an-imbalanced-dataset"]], "Dummy baseline": [[5, "dummy-baseline"]], "Linear classifier baseline": [[5, "linear-classifier-baseline"]], "Use class_weight": [[5, "use-class-weight"]], "Resample the training set during learning": [[5, "resample-the-training-set-during-learning"]], "Use of specific balanced algorithms from imbalanced-learn": [[5, "use-of-specific-balanced-algorithms-from-imbalanced-learn"]], "Multiclass classification with under-sampling": [[6, "multiclass-classification-with-under-sampling"]], "Customized sampler to implement an outlier rejections estimator": [[7, "customized-sampler-to-implement-an-outlier-rejections-estimator"]], "Toy data generation": [[7, "toy-data-generation"]], "How to use the FunctionSampler": [[7, "how-to-use-the-functionsampler"]], "Integrate it within a pipeline": [[7, "integrate-it-within-a-pipeline"]], "Benchmark over-sampling methods in a face recognition task": [[8, "benchmark-over-sampling-methods-in-a-face-recognition-task"]], "Load the dataset": [[8, "load-the-dataset"]], "Compare over-sampling approaches": [[8, "compare-over-sampling-approaches"]], "Example of topic classification in text documents": [[9, "example-of-topic-classification-in-text-documents"]], "Setting the data set": [[9, "setting-the-data-set"]], "The usual scikit-learn pipeline": [[9, "the-usual-scikit-learn-pipeline"]], "Balancing the class before classification": [[9, "balancing-the-class-before-classification"]], "Porto Seguro: balancing samples in mini-batches with Keras": [[10, "porto-seguro-balancing-samples-in-mini-batches-with-keras"]], "References": [[10, "references"], [54, null], [128, "references"]], "Data loading": [[10, "data-loading"]], "Define the pre-processing pipeline": [[10, "define-the-pre-processing-pipeline"]], "Create a neural-network": [[10, "create-a-neural-network"]], "Classification loop": [[10, "classification-loop"]], "Plot of the results and computation time": [[10, "plot-of-the-results-and-computation-time"]], "Examples using combine class methods": [[12, "examples-using-combine-class-methods"], [26, "examples-using-combine-class-methods"]], "Compare sampler combining over- and under-sampling": [[13, "compare-sampler-combining-over-and-under-sampling"]], "Dataset generation": [[13, "dataset-generation"]], "Dataset examples": [[15, "dataset-examples"], [26, "dataset-examples"]], "Generate the dataset": [[16, "generate-the-dataset"]], "Make a dataset imbalanced": [[16, "make-a-dataset-imbalanced"]], "Example using ensemble class methods": [[18, "example-using-ensemble-class-methods"], [26, "example-using-ensemble-class-methods"]], "Bagging classifiers using sampler": [[19, "bagging-classifiers-using-sampler"]], "Generate an imbalanced dataset": [[19, "generate-an-imbalanced-dataset"]], "Exactly Balanced Bagging and Over-Bagging": [[19, "exactly-balanced-bagging-and-over-bagging"]], "SMOTE-Bagging": [[19, "smote-bagging"]], "Roughly Balanced Bagging": [[19, "roughly-balanced-bagging"]], "References:": [[19, null]], "Compare ensemble classifiers using resampling": [[20, "compare-ensemble-classifiers-using-resampling"]], "Load an imbalanced dataset": [[20, "load-an-imbalanced-dataset"]], "Classification using a single decision tree": [[20, "classification-using-a-single-decision-tree"]], "Classification using bagging classifier with and without sampling": [[20, "classification-using-bagging-classifier-with-and-without-sampling"]], "Classification using random forest classifier with and without sampling": [[20, "classification-using-random-forest-classifier-with-and-without-sampling"]], "Boosting classifier": [[20, "boosting-classifier"]], "Evaluation examples": [[22, "evaluation-examples"], [26, "evaluation-examples"]], "Evaluate classification by compiling a report": [[23, "evaluate-classification-by-compiling-a-report"]], "Metrics specific to imbalanced learning": [[24, "metrics-specific-to-imbalanced-learning"]], "Examples": [[26, "examples"], [43, null], [47, null]], "Model Selection": [[26, "model-selection"], [27, "model-selection"]], "Example using over-sampling class methods": [[26, "example-using-over-sampling-class-methods"], [30, "example-using-over-sampling-class-methods"]], "Pipeline examples": [[26, "pipeline-examples"], [35, "pipeline-examples"]], "Example using under-sampling class methods": [[26, "example-using-under-sampling-class-methods"], [38, "example-using-under-sampling-class-methods"]], "Plotting Validation Curves": [[28, "plotting-validation-curves"]], "Compare over-sampling samplers": [[31, "compare-over-sampling-samplers"]], "Illustration of the influence of the balancing ratio": [[31, "illustration-of-the-influence-of-the-balancing-ratio"]], "Random over-sampling to balance the data set": [[31, "random-over-sampling-to-balance-the-data-set"]], "More advanced over-sampling using ADASYN and SMOTE": [[31, "more-advanced-over-sampling-using-adasyn-and-smote"]], "Sample generator used in SMOTE-like samplers": [[32, "sample-generator-used-in-smote-like-samplers"]], "Effect of the shrinkage factor in random over-sampling": [[33, "effect-of-the-shrinkage-factor-in-random-over-sampling"]], "Usage of pipeline embedding samplers": [[36, "usage-of-pipeline-embedding-samplers"]], "Compare under-sampling samplers": [[39, "compare-under-sampling-samplers"]], "Prototype generation: under-sampling by generating new samples": [[39, "prototype-generation-under-sampling-by-generating-new-samples"]], "Prototype selection: under-sampling by selecting existing samples": [[39, "prototype-selection-under-sampling-by-selecting-existing-samples"]], "Sample selection in NearMiss": [[40, "sample-selection-in-nearmiss"]], "NearMiss-1": [[40, "nearmiss-1"]], "NearMiss-2": [[40, "nearmiss-2"]], "NearMiss-3": [[40, "nearmiss-3"]], "Illustration of the definition of a Tomek link": [[41, "illustration-of-the-definition-of-a-tomek-link"]], "Combination of over- and under-sampling": [[43, "combination-of-over-and-under-sampling"]], "Common pitfalls and recommended practices": [[44, "common-pitfalls-and-recommended-practices"]], "Data leakage": [[44, "data-leakage"]], "Dataset loading utilities": [[45, "dataset-loading-utilities"]], "Imbalanced datasets for benchmark": [[45, "imbalanced-datasets-for-benchmark"]], "Imbalanced generator": [[45, "imbalanced-generator"]], "Developer guideline": [[46, "developer-guideline"]], "Developer utilities": [[46, "developer-utilities"]], "Validation Tools": [[46, "validation-tools"]], "Deprecation": [[46, "deprecation"], [115, "deprecation"], [115, "id7"], [115, "id16"], [115, "id21"], [115, "id29"], [115, "id42"], [117, "deprecation"], [118, "deprecation"], [121, "deprecation"], [122, "deprecation"], [124, "deprecation"], [125, "deprecation"], [126, "deprecation"]], "Making a release": [[46, "making-a-release"]], "Major release": [[46, "major-release"]], "Bug fix release": [[46, "bug-fix-release"]], "Ensemble of samplers": [[47, "ensemble-of-samplers"]], "Classifier including inner balancing samplers": [[47, "classifier-including-inner-balancing-samplers"]], "Bagging classifier": [[47, "bagging-classifier"]], "Forest of randomized trees": [[47, "forest-of-randomized-trees"]], "Boosting": [[47, "boosting"]], "imbalanced-learn documentation": [[48, "imbalanced-learn-documentation"]], "Getting Started": [[49, "getting-started"]], "Prerequisites": [[49, "prerequisites"]], "Install": [[49, "install"]], "From PyPi or conda-forge repositories": [[49, "from-pypi-or-conda-forge-repositories"]], "From source available on GitHub": [[49, "from-source-available-on-github"]], "Test and coverage": [[49, "test-and-coverage"]], "Contribute": [[49, "contribute"]], "Introduction": [[50, "introduction"]], "API\u2019s of imbalanced-learn samplers": [[50, "api-s-of-imbalanced-learn-samplers"]], "Pandas in/out": [[50, null]], "Sparse input": [[50, null]], "Problem statement regarding imbalanced data sets": [[50, "problem-statement-regarding-imbalanced-data-sets"]], "Metrics": [[51, "metrics"], [106, "module-imblearn.metrics"]], "Classification metrics": [[51, "classification-metrics"], [106, "classification-metrics"]], "Sensitivity and specificity metrics": [[51, "sensitivity-and-specificity-metrics"]], "Additional metrics specific to imbalanced datasets": [[51, "additional-metrics-specific-to-imbalanced-datasets"]], "Macro-Averaged Mean Absolute Error (MA-MAE)": [[51, "macro-averaged-mean-absolute-error-ma-mae"]], "Summary of important metrics": [[51, "summary-of-important-metrics"]], "Pairwise metrics": [[51, "pairwise-metrics"], [106, "pairwise-metrics"]], "Value Difference Metric": [[51, "value-difference-metric"]], "Miscellaneous samplers": [[54, "miscellaneous-samplers"]], "Custom samplers": [[54, "custom-samplers"]], "Custom generators": [[54, "custom-generators"]], "TensorFlow generator": [[54, "tensorflow-generator"]], "Keras generator": [[54, "keras-generator"]], "Over-sampling": [[55, "over-sampling"]], "A practical guide": [[55, "a-practical-guide"]], "Naive random over-sampling": [[55, "naive-random-over-sampling"]], "From random over-sampling to SMOTE and ADASYN": [[55, "from-random-over-sampling-to-smote-and-adasyn"]], "Ill-posed examples": [[55, "ill-posed-examples"]], "SMOTE variants": [[55, "smote-variants"]], "Mathematical formulation": [[55, "mathematical-formulation"], [113, "mathematical-formulation"]], "Sample generation": [[55, "sample-generation"]], "Multi-class management": [[55, "multi-class-management"]], "Combination of over- and under-sampling methods": [[56, "module-imblearn.combine"]], "Datasets": [[57, "module-imblearn.datasets"]], "Ensemble methods": [[58, "module-imblearn.ensemble"]], "Boosting algorithms": [[58, "boosting-algorithms"]], "Bagging algorithms": [[58, "bagging-algorithms"]], "FunctionSampler": [[59, "functionsampler"]], "Examples using imblearn.FunctionSampler": [[59, "examples-using-imblearn-functionsampler"]], "SMOTEENN": [[60, "smoteenn"]], "Examples using imblearn.combine.SMOTEENN": [[60, "examples-using-imblearn-combine-smoteenn"]], "SMOTETomek": [[61, "smotetomek"]], "Examples using imblearn.combine.SMOTETomek": [[61, "examples-using-imblearn-combine-smotetomek"]], "fetch_datasets": [[62, "fetch-datasets"]], "Examples using imblearn.datasets.fetch_datasets": [[62, "examples-using-imblearn-datasets-fetch-datasets"]], "make_imbalance": [[63, "make-imbalance"]], "Examples using imblearn.datasets.make_imbalance": [[63, "examples-using-imblearn-datasets-make-imbalance"]], "BalancedBaggingClassifier": [[64, "balancedbaggingclassifier"]], "Examples using imblearn.ensemble.BalancedBaggingClassifier": [[64, "examples-using-imblearn-ensemble-balancedbaggingclassifier"]], "BalancedRandomForestClassifier": [[65, "balancedrandomforestclassifier"]], "Examples using imblearn.ensemble.BalancedRandomForestClassifier": [[65, "examples-using-imblearn-ensemble-balancedrandomforestclassifier"]], "EasyEnsembleClassifier": [[66, "easyensembleclassifier"]], "Examples using imblearn.ensemble.EasyEnsembleClassifier": [[66, "examples-using-imblearn-ensemble-easyensembleclassifier"]], "RUSBoostClassifier": [[67, "rusboostclassifier"]], "Examples using imblearn.ensemble.RUSBoostClassifier": [[67, "examples-using-imblearn-ensemble-rusboostclassifier"]], "BalancedBatchGenerator": [[68, "balancedbatchgenerator"]], "Examples using imblearn.keras.BalancedBatchGenerator": [[68, "examples-using-imblearn-keras-balancedbatchgenerator"]], "balanced_batch_generator": [[69, "balanced-batch-generator"], [88, "balanced-batch-generator"]], "classification_report_imbalanced": [[70, "classification-report-imbalanced"]], "Examples using imblearn.metrics.classification_report_imbalanced": [[70, "examples-using-imblearn-metrics-classification-report-imbalanced"]], "geometric_mean_score": [[71, "geometric-mean-score"]], "Examples using imblearn.metrics.geometric_mean_score": [[71, "examples-using-imblearn-metrics-geometric-mean-score"]], "macro_averaged_mean_absolute_error": [[72, "macro-averaged-mean-absolute-error"]], "make_index_balanced_accuracy": [[73, "make-index-balanced-accuracy"]], "Examples using imblearn.metrics.make_index_balanced_accuracy": [[73, "examples-using-imblearn-metrics-make-index-balanced-accuracy"]], "ValueDifferenceMetric": [[74, "valuedifferencemetric"]], "sensitivity_score": [[75, "sensitivity-score"]], "sensitivity_specificity_support": [[76, "sensitivity-specificity-support"]], "specificity_score": [[77, "specificity-score"]], "ADASYN": [[78, "adasyn"]], "Examples using imblearn.over_sampling.ADASYN": [[78, "examples-using-imblearn-over-sampling-adasyn"]], "BorderlineSMOTE": [[79, "borderlinesmote"]], "Examples using imblearn.over_sampling.BorderlineSMOTE": [[79, "examples-using-imblearn-over-sampling-borderlinesmote"]], "KMeansSMOTE": [[80, "kmeanssmote"]], "Examples using imblearn.over_sampling.KMeansSMOTE": [[80, "examples-using-imblearn-over-sampling-kmeanssmote"]], "RandomOverSampler": [[81, "randomoversampler"]], "Examples using imblearn.over_sampling.RandomOverSampler": [[81, "examples-using-imblearn-over-sampling-randomoversampler"]], "SMOTE": [[82, "smote"]], "Examples using imblearn.over_sampling.SMOTE": [[82, "examples-using-imblearn-over-sampling-smote"]], "SMOTEN": [[83, "smoten"]], "Examples using imblearn.over_sampling.SMOTEN": [[83, "examples-using-imblearn-over-sampling-smoten"]], "SMOTENC": [[84, "smotenc"]], "Examples using imblearn.over_sampling.SMOTENC": [[84, "examples-using-imblearn-over-sampling-smotenc"]], "SVMSMOTE": [[85, "svmsmote"]], "Examples using imblearn.over_sampling.SVMSMOTE": [[85, "examples-using-imblearn-over-sampling-svmsmote"]], "Pipeline": [[86, "pipeline"], [109, "module-imblearn.pipeline"]], "Examples using imblearn.pipeline.Pipeline": [[86, "examples-using-imblearn-pipeline-pipeline"]], "make_pipeline": [[87, "make-pipeline"]], "Examples using imblearn.pipeline.make_pipeline": [[87, "examples-using-imblearn-pipeline-make-pipeline"]], "AllKNN": [[89, "allknn"]], "Examples using imblearn.under_sampling.AllKNN": [[89, "examples-using-imblearn-under-sampling-allknn"]], "ClusterCentroids": [[90, "clustercentroids"]], "Examples using imblearn.under_sampling.ClusterCentroids": [[90, "examples-using-imblearn-under-sampling-clustercentroids"]], "CondensedNearestNeighbour": [[91, "condensednearestneighbour"]], "Examples using imblearn.under_sampling.CondensedNearestNeighbour": [[91, "examples-using-imblearn-under-sampling-condensednearestneighbour"]], "EditedNearestNeighbours": [[92, "editednearestneighbours"]], "Examples using imblearn.under_sampling.EditedNearestNeighbours": [[92, "examples-using-imblearn-under-sampling-editednearestneighbours"]], "InstanceHardnessThreshold": [[93, "instancehardnessthreshold"]], "Examples using imblearn.under_sampling.InstanceHardnessThreshold": [[93, "examples-using-imblearn-under-sampling-instancehardnessthreshold"]], "NearMiss": [[94, "nearmiss"]], "Examples using imblearn.under_sampling.NearMiss": [[94, "examples-using-imblearn-under-sampling-nearmiss"]], "NeighbourhoodCleaningRule": [[95, "neighbourhoodcleaningrule"]], "Examples using imblearn.under_sampling.NeighbourhoodCleaningRule": [[95, "examples-using-imblearn-under-sampling-neighbourhoodcleaningrule"]], "OneSidedSelection": [[96, "onesidedselection"]], "Examples using imblearn.under_sampling.OneSidedSelection": [[96, "examples-using-imblearn-under-sampling-onesidedselection"]], "RandomUnderSampler": [[97, "randomundersampler"]], "Examples using imblearn.under_sampling.RandomUnderSampler": [[97, "examples-using-imblearn-under-sampling-randomundersampler"]], "RepeatedEditedNearestNeighbours": [[98, "repeatededitednearestneighbours"]], "Examples using imblearn.under_sampling.RepeatedEditedNearestNeighbours": [[98, "examples-using-imblearn-under-sampling-repeatededitednearestneighbours"]], "TomekLinks": [[99, "tomeklinks"]], "Examples using imblearn.under_sampling.TomekLinks": [[99, "examples-using-imblearn-under-sampling-tomeklinks"]], "check_neighbors_object": [[100, "check-neighbors-object"]], "check_sampling_strategy": [[101, "check-sampling-strategy"]], "check_target_type": [[102, "check-target-type"]], "parametrize_with_checks": [[103, "parametrize-with-checks"]], "API reference": [[104, "api-reference"]], "Batch generator for Keras": [[105, "module-imblearn.keras"]], "Miscellaneous": [[107, "miscellaneous"]], "Over-sampling methods": [[108, "module-imblearn.over_sampling"]], "Basic over-sampling": [[108, "basic-over-sampling"]], "SMOTE algorithms": [[108, "smote-algorithms"]], "Batch generator for TensorFlow": [[110, "module-imblearn.tensorflow"]], "Under-sampling methods": [[111, "module-imblearn.under_sampling"]], "Prototype generation": [[111, "module-imblearn.under_sampling._prototype_generation"], [113, "prototype-generation"]], "Prototype selection": [[111, "module-imblearn.under_sampling._prototype_selection"], [113, "prototype-selection"]], "Utilities": [[112, "module-imblearn.utils"]], "Validation checks used in samplers": [[112, "validation-checks-used-in-samplers"]], "Testing compatibility of your own sampler": [[112, "module-imblearn.utils.estimator_checks"]], "Under-sampling": [[113, "under-sampling"]], "Controlled under-sampling techniques": [[113, "controlled-under-sampling-techniques"]], "Cleaning under-sampling techniques": [[113, "cleaning-under-sampling-techniques"]], "Tomek\u2019s links": [[113, "tomek-s-links"]], "Edited data set using nearest neighbours": [[113, "edited-data-set-using-nearest-neighbours"]], "Condensed nearest neighbors and derived algorithms": [[113, "condensed-nearest-neighbors-and-derived-algorithms"]], "Instance hardness threshold": [[113, "instance-hardness-threshold"]], "User Guide": [[114, "user-guide"]], "Release history": [[115, "release-history"]], "Version 0.12.0 (Under development)": [[115, "version-0-12-0-under-development"], [119, "version-0-12-0-under-development"]], "Changelog": [[115, "changelog"], [115, "id1"], [115, "id2"], [115, "id4"], [115, "id9"], [115, "id10"], [115, "id11"], [115, "id12"], [115, "id17"], [115, "id22"], [115, "id23"], [115, "id25"], [115, "id30"], [115, "id34"], [115, "id36"], [115, "id43"], [115, "id44"], [115, "id45"], [116, "changelog"], [117, "changelog"], [117, "id1"], [118, "changelog"], [119, "changelog"], [120, "changelog"], [121, "changelog"], [122, "changelog"], [122, "id1"], [123, "changelog"], [124, "changelog"], [124, "id1"], [124, "id2"], [125, "changelog"], [126, "changelog"], [126, "id1"], [127, "changelog"], [127, "id1"]], "Version 0.11.0": [[115, "version-0-11-0"], [118, "version-0-11-0"]], "Bug fixes": [[115, "bug-fixes"], [115, "id3"], [115, "id5"], [115, "id14"], [115, "id19"], [115, "id24"], [115, "id27"], [115, "id35"], [115, "id39"], [117, "bug-fixes"], [117, "id2"], [118, "bug-fixes"], [120, "bug-fixes"], [121, "bug-fixes"], [122, "bug-fixes"], [122, "id2"], [124, "bug-fixes"], [124, "id3"], [125, "bug-fixes"], [126, "bug-fixes"]], "Compatibility": [[115, "compatibility"], [115, "id6"], [117, "compatibility"], [118, "compatibility"]], "Enhancements": [[115, "enhancements"], [115, "id8"], [115, "id13"], [115, "id20"], [117, "enhancements"], [118, "enhancements"], [125, "enhancements"], [126, "enhancements"]], "Version 0.10.1": [[115, "version-0-10-1"], [117, "version-0-10-1"]], "Version 0.10.0": [[115, "version-0-10-0"], [117, "version-0-10-0"]], "Version 0.9.1": [[115, "version-0-9-1"], [127, "version-0-9-1"]], "Version 0.9.0": [[115, "version-0-9-0"], [127, "version-0-9-0"]], "Version 0.8.1": [[115, "version-0-8-1"], [126, "version-0-8-1"]], "Maintenance": [[115, "maintenance"], [115, "id15"], [115, "id18"], [115, "id28"], [115, "id33"], [115, "id40"], [122, "maintenance"], [123, "maintenance"], [124, "maintenance"], [125, "maintenance"], [126, "maintenance"], [126, "id2"]], "Version 0.8.0": [[115, "version-0-8-0"], [126, "version-0-8-0"]], "New features": [[115, "new-features"], [115, "id37"], [120, "new-features"], [121, "new-features"], [122, "new-features"], [126, "new-features"]], "Version 0.7.0": [[115, "version-0-7-0"], [125, "version-0-7-0"]], "Changed models": [[115, "changed-models"], [115, "id26"], [115, "id31"], [123, "changed-models"], [124, "changed-models"], [125, "changed-models"]], "Version 0.6.2": [[115, "version-0-6-2"], [124, "version-0-6-2"]], "Version 0.6.1": [[115, "version-0-6-1"], [124, "version-0-6-1"]], "Version 0.6.0": [[115, "version-0-6-0"], [124, "version-0-6-0"]], "Enhancement": [[115, "enhancement"], [115, "id32"], [115, "id38"], [120, "enhancement"], [121, "enhancement"], [122, "enhancement"], [123, "enhancement"], [124, "enhancement"]], "Version 0.5.0": [[115, "version-0-5-0"], [123, "version-0-5-0"]], "Documentation": [[115, "documentation"], [115, "id41"], [121, "documentation"], [122, "documentation"], [123, "documentation"]], "Bug": [[115, "bug"], [123, "bug"]], "Version 0.4.2": [[115, "version-0-4-2"], [122, "version-0-4-2"]], "Version 0.4": [[115, "version-0-4"], [122, "version-0-4"]], "Highlights": [[115, "highlights"], [122, "highlights"]], "API": [[115, "api"], [116, "api"], [122, "api"]], "Version 0.3": [[115, "version-0-3"], [121, "version-0-3"]], "Version 0.2": [[115, "version-0-2"], [120, "version-0-2"]], "Version 0.1": [[115, "version-0-1"], [116, "version-0-1"]], "New methods": [[116, "new-methods"]], "API changes summary": [[120, "api-changes-summary"], [121, "api-changes-summary"]], "Documentation changes": [[120, "documentation-changes"]], "Testing": [[121, "testing"]]}, "indexentries": {"imblearn.combine": [[56, "module-imblearn.combine"]], "module": [[56, "module-imblearn.combine"], [57, "module-imblearn.datasets"], [58, "module-imblearn.ensemble"], [105, "module-imblearn.keras"], [106, "module-imblearn.metrics"], [106, "module-imblearn.metrics.pairwise"], [108, "module-imblearn.over_sampling"], [109, "module-imblearn.pipeline"], [110, "module-imblearn.tensorflow"], [111, "module-imblearn.under_sampling"], [111, "module-imblearn.under_sampling._prototype_generation"], [111, "module-imblearn.under_sampling._prototype_selection"], [112, "module-imblearn.utils"], [112, "module-imblearn.utils.estimator_checks"]], "imblearn.datasets": [[57, "module-imblearn.datasets"]], "imblearn.ensemble": [[58, "module-imblearn.ensemble"]], "functionsampler (class in imblearn)": [[59, "imblearn.FunctionSampler"]], "fit() (imblearn.functionsampler method)": [[59, "imblearn.FunctionSampler.fit"]], "fit_resample() (imblearn.functionsampler method)": [[59, "imblearn.FunctionSampler.fit_resample"]], "get_feature_names_out() (imblearn.functionsampler method)": [[59, "imblearn.FunctionSampler.get_feature_names_out"]], "get_metadata_routing() (imblearn.functionsampler method)": [[59, "imblearn.FunctionSampler.get_metadata_routing"]], "get_params() (imblearn.functionsampler method)": [[59, "imblearn.FunctionSampler.get_params"]], "set_params() (imblearn.functionsampler method)": [[59, "imblearn.FunctionSampler.set_params"]], "smoteenn (class in imblearn.combine)": [[60, "imblearn.combine.SMOTEENN"]], "fit() (imblearn.combine.smoteenn method)": [[60, "imblearn.combine.SMOTEENN.fit"]], "fit_resample() (imblearn.combine.smoteenn method)": [[60, "imblearn.combine.SMOTEENN.fit_resample"]], "get_feature_names_out() (imblearn.combine.smoteenn method)": [[60, "imblearn.combine.SMOTEENN.get_feature_names_out"]], "get_metadata_routing() (imblearn.combine.smoteenn method)": [[60, "imblearn.combine.SMOTEENN.get_metadata_routing"]], "get_params() (imblearn.combine.smoteenn method)": [[60, "imblearn.combine.SMOTEENN.get_params"]], "set_params() (imblearn.combine.smoteenn method)": [[60, "imblearn.combine.SMOTEENN.set_params"]], "smotetomek (class in imblearn.combine)": [[61, "imblearn.combine.SMOTETomek"]], "fit() (imblearn.combine.smotetomek method)": [[61, "imblearn.combine.SMOTETomek.fit"]], "fit_resample() (imblearn.combine.smotetomek method)": [[61, "imblearn.combine.SMOTETomek.fit_resample"]], "get_feature_names_out() (imblearn.combine.smotetomek method)": [[61, "imblearn.combine.SMOTETomek.get_feature_names_out"]], "get_metadata_routing() (imblearn.combine.smotetomek method)": [[61, "imblearn.combine.SMOTETomek.get_metadata_routing"]], "get_params() (imblearn.combine.smotetomek method)": [[61, "imblearn.combine.SMOTETomek.get_params"]], "set_params() (imblearn.combine.smotetomek method)": [[61, "imblearn.combine.SMOTETomek.set_params"]], "fetch_datasets() (in module imblearn.datasets)": [[62, "imblearn.datasets.fetch_datasets"]], "make_imbalance() (in module imblearn.datasets)": [[63, "imblearn.datasets.make_imbalance"]], "balancedbaggingclassifier (class in imblearn.ensemble)": [[64, "imblearn.ensemble.BalancedBaggingClassifier"]], "base_estimator_ (imblearn.ensemble.balancedbaggingclassifier property)": [[64, "imblearn.ensemble.BalancedBaggingClassifier.base_estimator_"]], "decision_function() (imblearn.ensemble.balancedbaggingclassifier method)": [[64, "imblearn.ensemble.BalancedBaggingClassifier.decision_function"]], "estimator_ (imblearn.ensemble.balancedbaggingclassifier property)": [[64, "imblearn.ensemble.BalancedBaggingClassifier.estimator_"]], "estimators_samples_ (imblearn.ensemble.balancedbaggingclassifier property)": [[64, "imblearn.ensemble.BalancedBaggingClassifier.estimators_samples_"]], "fit() (imblearn.ensemble.balancedbaggingclassifier method)": [[64, "imblearn.ensemble.BalancedBaggingClassifier.fit"]], "get_metadata_routing() (imblearn.ensemble.balancedbaggingclassifier method)": [[64, "imblearn.ensemble.BalancedBaggingClassifier.get_metadata_routing"]], "get_params() (imblearn.ensemble.balancedbaggingclassifier method)": [[64, "imblearn.ensemble.BalancedBaggingClassifier.get_params"]], "n_features_ (imblearn.ensemble.balancedbaggingclassifier property)": [[64, "imblearn.ensemble.BalancedBaggingClassifier.n_features_"]], "predict() (imblearn.ensemble.balancedbaggingclassifier method)": [[64, "imblearn.ensemble.BalancedBaggingClassifier.predict"]], "predict_log_proba() (imblearn.ensemble.balancedbaggingclassifier method)": [[64, "imblearn.ensemble.BalancedBaggingClassifier.predict_log_proba"]], "predict_proba() (imblearn.ensemble.balancedbaggingclassifier method)": [[64, "imblearn.ensemble.BalancedBaggingClassifier.predict_proba"]], "score() (imblearn.ensemble.balancedbaggingclassifier method)": [[64, "imblearn.ensemble.BalancedBaggingClassifier.score"]], "set_fit_request() (imblearn.ensemble.balancedbaggingclassifier method)": [[64, "imblearn.ensemble.BalancedBaggingClassifier.set_fit_request"]], "set_params() (imblearn.ensemble.balancedbaggingclassifier method)": [[64, "imblearn.ensemble.BalancedBaggingClassifier.set_params"]], "set_score_request() (imblearn.ensemble.balancedbaggingclassifier method)": [[64, "imblearn.ensemble.BalancedBaggingClassifier.set_score_request"]], "balancedrandomforestclassifier (class in imblearn.ensemble)": [[65, "imblearn.ensemble.BalancedRandomForestClassifier"]], "apply() (imblearn.ensemble.balancedrandomforestclassifier method)": [[65, "imblearn.ensemble.BalancedRandomForestClassifier.apply"]], "base_estimator_ (imblearn.ensemble.balancedrandomforestclassifier property)": [[65, "imblearn.ensemble.BalancedRandomForestClassifier.base_estimator_"]], "decision_path() (imblearn.ensemble.balancedrandomforestclassifier method)": [[65, "imblearn.ensemble.BalancedRandomForestClassifier.decision_path"]], "estimator_ (imblearn.ensemble.balancedrandomforestclassifier property)": [[65, "imblearn.ensemble.BalancedRandomForestClassifier.estimator_"]], "feature_importances_ (imblearn.ensemble.balancedrandomforestclassifier property)": [[65, "imblearn.ensemble.BalancedRandomForestClassifier.feature_importances_"]], "fit() (imblearn.ensemble.balancedrandomforestclassifier method)": [[65, "imblearn.ensemble.BalancedRandomForestClassifier.fit"]], "get_metadata_routing() (imblearn.ensemble.balancedrandomforestclassifier method)": [[65, "imblearn.ensemble.BalancedRandomForestClassifier.get_metadata_routing"]], "get_params() (imblearn.ensemble.balancedrandomforestclassifier method)": [[65, "imblearn.ensemble.BalancedRandomForestClassifier.get_params"]], "n_features_ (imblearn.ensemble.balancedrandomforestclassifier property)": [[65, "imblearn.ensemble.BalancedRandomForestClassifier.n_features_"]], "predict() (imblearn.ensemble.balancedrandomforestclassifier method)": [[65, "imblearn.ensemble.BalancedRandomForestClassifier.predict"]], "predict_log_proba() (imblearn.ensemble.balancedrandomforestclassifier method)": [[65, "imblearn.ensemble.BalancedRandomForestClassifier.predict_log_proba"]], "predict_proba() (imblearn.ensemble.balancedrandomforestclassifier method)": [[65, "imblearn.ensemble.BalancedRandomForestClassifier.predict_proba"]], "score() (imblearn.ensemble.balancedrandomforestclassifier method)": [[65, "imblearn.ensemble.BalancedRandomForestClassifier.score"]], "set_fit_request() (imblearn.ensemble.balancedrandomforestclassifier method)": [[65, "imblearn.ensemble.BalancedRandomForestClassifier.set_fit_request"]], "set_params() (imblearn.ensemble.balancedrandomforestclassifier method)": [[65, "imblearn.ensemble.BalancedRandomForestClassifier.set_params"]], "set_score_request() (imblearn.ensemble.balancedrandomforestclassifier method)": [[65, "imblearn.ensemble.BalancedRandomForestClassifier.set_score_request"]], "easyensembleclassifier (class in imblearn.ensemble)": [[66, "imblearn.ensemble.EasyEnsembleClassifier"]], "base_estimator_ (imblearn.ensemble.easyensembleclassifier property)": [[66, "imblearn.ensemble.EasyEnsembleClassifier.base_estimator_"]], "decision_function() (imblearn.ensemble.easyensembleclassifier method)": [[66, "imblearn.ensemble.EasyEnsembleClassifier.decision_function"]], "estimator_ (imblearn.ensemble.easyensembleclassifier property)": [[66, "imblearn.ensemble.EasyEnsembleClassifier.estimator_"]], "estimators_samples_ (imblearn.ensemble.easyensembleclassifier property)": [[66, "imblearn.ensemble.EasyEnsembleClassifier.estimators_samples_"]], "fit() (imblearn.ensemble.easyensembleclassifier method)": [[66, "imblearn.ensemble.EasyEnsembleClassifier.fit"]], "get_metadata_routing() (imblearn.ensemble.easyensembleclassifier method)": [[66, "imblearn.ensemble.EasyEnsembleClassifier.get_metadata_routing"]], "get_params() (imblearn.ensemble.easyensembleclassifier method)": [[66, "imblearn.ensemble.EasyEnsembleClassifier.get_params"]], "n_features_ (imblearn.ensemble.easyensembleclassifier property)": [[66, "imblearn.ensemble.EasyEnsembleClassifier.n_features_"]], "predict() (imblearn.ensemble.easyensembleclassifier method)": [[66, "imblearn.ensemble.EasyEnsembleClassifier.predict"]], "predict_log_proba() (imblearn.ensemble.easyensembleclassifier method)": [[66, "imblearn.ensemble.EasyEnsembleClassifier.predict_log_proba"]], "predict_proba() (imblearn.ensemble.easyensembleclassifier method)": [[66, "imblearn.ensemble.EasyEnsembleClassifier.predict_proba"]], "score() (imblearn.ensemble.easyensembleclassifier method)": [[66, "imblearn.ensemble.EasyEnsembleClassifier.score"]], "set_fit_request() (imblearn.ensemble.easyensembleclassifier method)": [[66, "imblearn.ensemble.EasyEnsembleClassifier.set_fit_request"]], "set_params() (imblearn.ensemble.easyensembleclassifier method)": [[66, "imblearn.ensemble.EasyEnsembleClassifier.set_params"]], "set_score_request() (imblearn.ensemble.easyensembleclassifier method)": [[66, "imblearn.ensemble.EasyEnsembleClassifier.set_score_request"]], "rusboostclassifier (class in imblearn.ensemble)": [[67, "imblearn.ensemble.RUSBoostClassifier"]], "base_estimator_ (imblearn.ensemble.rusboostclassifier property)": [[67, "imblearn.ensemble.RUSBoostClassifier.base_estimator_"]], "decision_function() (imblearn.ensemble.rusboostclassifier method)": [[67, "imblearn.ensemble.RUSBoostClassifier.decision_function"]], "estimator_ (imblearn.ensemble.rusboostclassifier property)": [[67, "imblearn.ensemble.RUSBoostClassifier.estimator_"]], "feature_importances_ (imblearn.ensemble.rusboostclassifier property)": [[67, "imblearn.ensemble.RUSBoostClassifier.feature_importances_"]], "fit() (imblearn.ensemble.rusboostclassifier method)": [[67, "imblearn.ensemble.RUSBoostClassifier.fit"]], "get_metadata_routing() (imblearn.ensemble.rusboostclassifier method)": [[67, "imblearn.ensemble.RUSBoostClassifier.get_metadata_routing"]], "get_params() (imblearn.ensemble.rusboostclassifier method)": [[67, "imblearn.ensemble.RUSBoostClassifier.get_params"]], "predict() (imblearn.ensemble.rusboostclassifier method)": [[67, "imblearn.ensemble.RUSBoostClassifier.predict"]], "predict_log_proba() (imblearn.ensemble.rusboostclassifier method)": [[67, "imblearn.ensemble.RUSBoostClassifier.predict_log_proba"]], "predict_proba() (imblearn.ensemble.rusboostclassifier method)": [[67, "imblearn.ensemble.RUSBoostClassifier.predict_proba"]], "score() (imblearn.ensemble.rusboostclassifier method)": [[67, "imblearn.ensemble.RUSBoostClassifier.score"]], "set_fit_request() (imblearn.ensemble.rusboostclassifier method)": [[67, "imblearn.ensemble.RUSBoostClassifier.set_fit_request"]], "set_params() (imblearn.ensemble.rusboostclassifier method)": [[67, "imblearn.ensemble.RUSBoostClassifier.set_params"]], "set_score_request() (imblearn.ensemble.rusboostclassifier method)": [[67, "imblearn.ensemble.RUSBoostClassifier.set_score_request"]], "staged_decision_function() (imblearn.ensemble.rusboostclassifier method)": [[67, "imblearn.ensemble.RUSBoostClassifier.staged_decision_function"]], "staged_predict() (imblearn.ensemble.rusboostclassifier method)": [[67, "imblearn.ensemble.RUSBoostClassifier.staged_predict"]], "staged_predict_proba() (imblearn.ensemble.rusboostclassifier method)": [[67, "imblearn.ensemble.RUSBoostClassifier.staged_predict_proba"]], "staged_score() (imblearn.ensemble.rusboostclassifier method)": [[67, "imblearn.ensemble.RUSBoostClassifier.staged_score"]], "balancedbatchgenerator (class in imblearn.keras)": [[68, "imblearn.keras.BalancedBatchGenerator"]], "on_epoch_end() (imblearn.keras.balancedbatchgenerator method)": [[68, "imblearn.keras.BalancedBatchGenerator.on_epoch_end"]], "balanced_batch_generator() (in module imblearn.keras)": [[69, "imblearn.keras.balanced_batch_generator"]], "classification_report_imbalanced() (in module imblearn.metrics)": [[70, "imblearn.metrics.classification_report_imbalanced"]], "geometric_mean_score() (in module imblearn.metrics)": [[71, "imblearn.metrics.geometric_mean_score"]], "macro_averaged_mean_absolute_error() (in module imblearn.metrics)": [[72, "imblearn.metrics.macro_averaged_mean_absolute_error"]], "make_index_balanced_accuracy() (in module imblearn.metrics)": [[73, "imblearn.metrics.make_index_balanced_accuracy"]], "valuedifferencemetric (class in imblearn.metrics.pairwise)": [[74, "imblearn.metrics.pairwise.ValueDifferenceMetric"]], "fit() (imblearn.metrics.pairwise.valuedifferencemetric method)": [[74, "imblearn.metrics.pairwise.ValueDifferenceMetric.fit"]], "get_metadata_routing() (imblearn.metrics.pairwise.valuedifferencemetric method)": [[74, "imblearn.metrics.pairwise.ValueDifferenceMetric.get_metadata_routing"]], "get_params() (imblearn.metrics.pairwise.valuedifferencemetric method)": [[74, "imblearn.metrics.pairwise.ValueDifferenceMetric.get_params"]], "pairwise() (imblearn.metrics.pairwise.valuedifferencemetric method)": [[74, "imblearn.metrics.pairwise.ValueDifferenceMetric.pairwise"]], "set_params() (imblearn.metrics.pairwise.valuedifferencemetric method)": [[74, "imblearn.metrics.pairwise.ValueDifferenceMetric.set_params"]], "sensitivity_score() (in module imblearn.metrics)": [[75, "imblearn.metrics.sensitivity_score"]], "sensitivity_specificity_support() (in module imblearn.metrics)": [[76, "imblearn.metrics.sensitivity_specificity_support"]], "specificity_score() (in module imblearn.metrics)": [[77, "imblearn.metrics.specificity_score"]], "adasyn (class in imblearn.over_sampling)": [[78, "imblearn.over_sampling.ADASYN"]], "fit() (imblearn.over_sampling.adasyn method)": [[78, "imblearn.over_sampling.ADASYN.fit"]], "fit_resample() (imblearn.over_sampling.adasyn method)": [[78, "imblearn.over_sampling.ADASYN.fit_resample"]], "get_feature_names_out() (imblearn.over_sampling.adasyn method)": [[78, "imblearn.over_sampling.ADASYN.get_feature_names_out"]], "get_metadata_routing() (imblearn.over_sampling.adasyn method)": [[78, "imblearn.over_sampling.ADASYN.get_metadata_routing"]], "get_params() (imblearn.over_sampling.adasyn method)": [[78, "imblearn.over_sampling.ADASYN.get_params"]], "set_params() (imblearn.over_sampling.adasyn method)": [[78, "imblearn.over_sampling.ADASYN.set_params"]], "borderlinesmote (class in imblearn.over_sampling)": [[79, "imblearn.over_sampling.BorderlineSMOTE"]], "fit() (imblearn.over_sampling.borderlinesmote method)": [[79, "imblearn.over_sampling.BorderlineSMOTE.fit"]], "fit_resample() (imblearn.over_sampling.borderlinesmote method)": [[79, "imblearn.over_sampling.BorderlineSMOTE.fit_resample"]], "get_feature_names_out() (imblearn.over_sampling.borderlinesmote method)": [[79, "imblearn.over_sampling.BorderlineSMOTE.get_feature_names_out"]], "get_metadata_routing() (imblearn.over_sampling.borderlinesmote method)": [[79, "imblearn.over_sampling.BorderlineSMOTE.get_metadata_routing"]], "get_params() (imblearn.over_sampling.borderlinesmote method)": [[79, "imblearn.over_sampling.BorderlineSMOTE.get_params"]], "set_params() (imblearn.over_sampling.borderlinesmote method)": [[79, "imblearn.over_sampling.BorderlineSMOTE.set_params"]], "kmeanssmote (class in imblearn.over_sampling)": [[80, "imblearn.over_sampling.KMeansSMOTE"]], "fit() (imblearn.over_sampling.kmeanssmote method)": [[80, "imblearn.over_sampling.KMeansSMOTE.fit"]], "fit_resample() (imblearn.over_sampling.kmeanssmote method)": [[80, "imblearn.over_sampling.KMeansSMOTE.fit_resample"]], "get_feature_names_out() (imblearn.over_sampling.kmeanssmote method)": [[80, "imblearn.over_sampling.KMeansSMOTE.get_feature_names_out"]], "get_metadata_routing() (imblearn.over_sampling.kmeanssmote method)": [[80, "imblearn.over_sampling.KMeansSMOTE.get_metadata_routing"]], "get_params() (imblearn.over_sampling.kmeanssmote method)": [[80, "imblearn.over_sampling.KMeansSMOTE.get_params"]], "set_params() (imblearn.over_sampling.kmeanssmote method)": [[80, "imblearn.over_sampling.KMeansSMOTE.set_params"]], "randomoversampler (class in imblearn.over_sampling)": [[81, "imblearn.over_sampling.RandomOverSampler"]], "fit() (imblearn.over_sampling.randomoversampler method)": [[81, "imblearn.over_sampling.RandomOverSampler.fit"]], "fit_resample() (imblearn.over_sampling.randomoversampler method)": [[81, "imblearn.over_sampling.RandomOverSampler.fit_resample"]], "get_feature_names_out() (imblearn.over_sampling.randomoversampler method)": [[81, "imblearn.over_sampling.RandomOverSampler.get_feature_names_out"]], "get_metadata_routing() (imblearn.over_sampling.randomoversampler method)": [[81, "imblearn.over_sampling.RandomOverSampler.get_metadata_routing"]], "get_params() (imblearn.over_sampling.randomoversampler method)": [[81, "imblearn.over_sampling.RandomOverSampler.get_params"]], "set_params() (imblearn.over_sampling.randomoversampler method)": [[81, "imblearn.over_sampling.RandomOverSampler.set_params"]], "smote (class in imblearn.over_sampling)": [[82, "imblearn.over_sampling.SMOTE"]], "fit() (imblearn.over_sampling.smote method)": [[82, "imblearn.over_sampling.SMOTE.fit"]], "fit_resample() (imblearn.over_sampling.smote method)": [[82, "imblearn.over_sampling.SMOTE.fit_resample"]], "get_feature_names_out() (imblearn.over_sampling.smote method)": [[82, "imblearn.over_sampling.SMOTE.get_feature_names_out"]], "get_metadata_routing() (imblearn.over_sampling.smote method)": [[82, "imblearn.over_sampling.SMOTE.get_metadata_routing"]], "get_params() (imblearn.over_sampling.smote method)": [[82, "imblearn.over_sampling.SMOTE.get_params"]], "set_params() (imblearn.over_sampling.smote method)": [[82, "imblearn.over_sampling.SMOTE.set_params"]], "smoten (class in imblearn.over_sampling)": [[83, "imblearn.over_sampling.SMOTEN"]], "fit() (imblearn.over_sampling.smoten method)": [[83, "imblearn.over_sampling.SMOTEN.fit"]], "fit_resample() (imblearn.over_sampling.smoten method)": [[83, "imblearn.over_sampling.SMOTEN.fit_resample"]], "get_feature_names_out() (imblearn.over_sampling.smoten method)": [[83, "imblearn.over_sampling.SMOTEN.get_feature_names_out"]], "get_metadata_routing() (imblearn.over_sampling.smoten method)": [[83, "imblearn.over_sampling.SMOTEN.get_metadata_routing"]], "get_params() (imblearn.over_sampling.smoten method)": [[83, "imblearn.over_sampling.SMOTEN.get_params"]], "set_params() (imblearn.over_sampling.smoten method)": [[83, "imblearn.over_sampling.SMOTEN.set_params"]], "smotenc (class in imblearn.over_sampling)": [[84, "imblearn.over_sampling.SMOTENC"]], "fit() (imblearn.over_sampling.smotenc method)": [[84, "imblearn.over_sampling.SMOTENC.fit"]], "fit_resample() (imblearn.over_sampling.smotenc method)": [[84, "imblearn.over_sampling.SMOTENC.fit_resample"]], "get_feature_names_out() (imblearn.over_sampling.smotenc method)": [[84, "imblearn.over_sampling.SMOTENC.get_feature_names_out"]], "get_metadata_routing() (imblearn.over_sampling.smotenc method)": [[84, "imblearn.over_sampling.SMOTENC.get_metadata_routing"]], "get_params() (imblearn.over_sampling.smotenc method)": [[84, "imblearn.over_sampling.SMOTENC.get_params"]], "ohe_ (imblearn.over_sampling.smotenc property)": [[84, "imblearn.over_sampling.SMOTENC.ohe_"]], "set_params() (imblearn.over_sampling.smotenc method)": [[84, "imblearn.over_sampling.SMOTENC.set_params"]], "svmsmote (class in imblearn.over_sampling)": [[85, "imblearn.over_sampling.SVMSMOTE"]], "fit() (imblearn.over_sampling.svmsmote method)": [[85, "imblearn.over_sampling.SVMSMOTE.fit"]], "fit_resample() (imblearn.over_sampling.svmsmote method)": [[85, "imblearn.over_sampling.SVMSMOTE.fit_resample"]], "get_feature_names_out() (imblearn.over_sampling.svmsmote method)": [[85, "imblearn.over_sampling.SVMSMOTE.get_feature_names_out"]], "get_metadata_routing() (imblearn.over_sampling.svmsmote method)": [[85, "imblearn.over_sampling.SVMSMOTE.get_metadata_routing"]], "get_params() (imblearn.over_sampling.svmsmote method)": [[85, "imblearn.over_sampling.SVMSMOTE.get_params"]], "set_params() (imblearn.over_sampling.svmsmote method)": [[85, "imblearn.over_sampling.SVMSMOTE.set_params"]], "pipeline (class in imblearn.pipeline)": [[86, "imblearn.pipeline.Pipeline"]], "classes_ (imblearn.pipeline.pipeline property)": [[86, "imblearn.pipeline.Pipeline.classes_"]], "decision_function() (imblearn.pipeline.pipeline method)": [[86, "imblearn.pipeline.Pipeline.decision_function"]], "feature_names_in_ (imblearn.pipeline.pipeline property)": [[86, "imblearn.pipeline.Pipeline.feature_names_in_"]], "fit() (imblearn.pipeline.pipeline method)": [[86, "imblearn.pipeline.Pipeline.fit"]], "fit_predict() (imblearn.pipeline.pipeline method)": [[86, "imblearn.pipeline.Pipeline.fit_predict"]], "fit_resample() (imblearn.pipeline.pipeline method)": [[86, "imblearn.pipeline.Pipeline.fit_resample"]], "fit_transform() (imblearn.pipeline.pipeline method)": [[86, "imblearn.pipeline.Pipeline.fit_transform"]], "get_feature_names_out() (imblearn.pipeline.pipeline method)": [[86, "imblearn.pipeline.Pipeline.get_feature_names_out"]], "get_metadata_routing() (imblearn.pipeline.pipeline method)": [[86, "imblearn.pipeline.Pipeline.get_metadata_routing"]], "get_params() (imblearn.pipeline.pipeline method)": [[86, "imblearn.pipeline.Pipeline.get_params"]], "inverse_transform() (imblearn.pipeline.pipeline method)": [[86, "imblearn.pipeline.Pipeline.inverse_transform"]], "n_features_in_ (imblearn.pipeline.pipeline property)": [[86, "imblearn.pipeline.Pipeline.n_features_in_"]], "named_steps (imblearn.pipeline.pipeline property)": [[86, "imblearn.pipeline.Pipeline.named_steps"]], "predict() (imblearn.pipeline.pipeline method)": [[86, "imblearn.pipeline.Pipeline.predict"]], "predict_log_proba() (imblearn.pipeline.pipeline method)": [[86, "imblearn.pipeline.Pipeline.predict_log_proba"]], "predict_proba() (imblearn.pipeline.pipeline method)": [[86, "imblearn.pipeline.Pipeline.predict_proba"]], "score() (imblearn.pipeline.pipeline method)": [[86, "imblearn.pipeline.Pipeline.score"]], "score_samples() (imblearn.pipeline.pipeline method)": [[86, "imblearn.pipeline.Pipeline.score_samples"]], "set_output() (imblearn.pipeline.pipeline method)": [[86, "imblearn.pipeline.Pipeline.set_output"]], "set_params() (imblearn.pipeline.pipeline method)": [[86, "imblearn.pipeline.Pipeline.set_params"]], "set_score_request() (imblearn.pipeline.pipeline method)": [[86, "imblearn.pipeline.Pipeline.set_score_request"]], "transform() (imblearn.pipeline.pipeline method)": [[86, "imblearn.pipeline.Pipeline.transform"]], "make_pipeline() (in module imblearn.pipeline)": [[87, "imblearn.pipeline.make_pipeline"]], "balanced_batch_generator() (in module imblearn.tensorflow)": [[88, "imblearn.tensorflow.balanced_batch_generator"]], "allknn (class in imblearn.under_sampling)": [[89, "imblearn.under_sampling.AllKNN"]], "fit() (imblearn.under_sampling.allknn method)": [[89, "imblearn.under_sampling.AllKNN.fit"]], "fit_resample() (imblearn.under_sampling.allknn method)": [[89, "imblearn.under_sampling.AllKNN.fit_resample"]], "get_feature_names_out() (imblearn.under_sampling.allknn method)": [[89, "imblearn.under_sampling.AllKNN.get_feature_names_out"]], "get_metadata_routing() (imblearn.under_sampling.allknn method)": [[89, "imblearn.under_sampling.AllKNN.get_metadata_routing"]], "get_params() (imblearn.under_sampling.allknn method)": [[89, "imblearn.under_sampling.AllKNN.get_params"]], "set_params() (imblearn.under_sampling.allknn method)": [[89, "imblearn.under_sampling.AllKNN.set_params"]], "clustercentroids (class in imblearn.under_sampling)": [[90, "imblearn.under_sampling.ClusterCentroids"]], "fit() (imblearn.under_sampling.clustercentroids method)": [[90, "imblearn.under_sampling.ClusterCentroids.fit"]], "fit_resample() (imblearn.under_sampling.clustercentroids method)": [[90, "imblearn.under_sampling.ClusterCentroids.fit_resample"]], "get_feature_names_out() (imblearn.under_sampling.clustercentroids method)": [[90, "imblearn.under_sampling.ClusterCentroids.get_feature_names_out"]], "get_metadata_routing() (imblearn.under_sampling.clustercentroids method)": [[90, "imblearn.under_sampling.ClusterCentroids.get_metadata_routing"]], "get_params() (imblearn.under_sampling.clustercentroids method)": [[90, "imblearn.under_sampling.ClusterCentroids.get_params"]], "set_params() (imblearn.under_sampling.clustercentroids method)": [[90, "imblearn.under_sampling.ClusterCentroids.set_params"]], "condensednearestneighbour (class in imblearn.under_sampling)": [[91, "imblearn.under_sampling.CondensedNearestNeighbour"]], "fit() (imblearn.under_sampling.condensednearestneighbour method)": [[91, "imblearn.under_sampling.CondensedNearestNeighbour.fit"]], "fit_resample() (imblearn.under_sampling.condensednearestneighbour method)": [[91, "imblearn.under_sampling.CondensedNearestNeighbour.fit_resample"]], "get_feature_names_out() (imblearn.under_sampling.condensednearestneighbour method)": [[91, "imblearn.under_sampling.CondensedNearestNeighbour.get_feature_names_out"]], "get_metadata_routing() (imblearn.under_sampling.condensednearestneighbour method)": [[91, "imblearn.under_sampling.CondensedNearestNeighbour.get_metadata_routing"]], "get_params() (imblearn.under_sampling.condensednearestneighbour method)": [[91, "imblearn.under_sampling.CondensedNearestNeighbour.get_params"]], "set_params() (imblearn.under_sampling.condensednearestneighbour method)": [[91, "imblearn.under_sampling.CondensedNearestNeighbour.set_params"]], "editednearestneighbours (class in imblearn.under_sampling)": [[92, "imblearn.under_sampling.EditedNearestNeighbours"]], "fit() (imblearn.under_sampling.editednearestneighbours method)": [[92, "imblearn.under_sampling.EditedNearestNeighbours.fit"]], "fit_resample() (imblearn.under_sampling.editednearestneighbours method)": [[92, "imblearn.under_sampling.EditedNearestNeighbours.fit_resample"]], "get_feature_names_out() (imblearn.under_sampling.editednearestneighbours method)": [[92, "imblearn.under_sampling.EditedNearestNeighbours.get_feature_names_out"]], "get_metadata_routing() (imblearn.under_sampling.editednearestneighbours method)": [[92, "imblearn.under_sampling.EditedNearestNeighbours.get_metadata_routing"]], "get_params() (imblearn.under_sampling.editednearestneighbours method)": [[92, "imblearn.under_sampling.EditedNearestNeighbours.get_params"]], "set_params() (imblearn.under_sampling.editednearestneighbours method)": [[92, "imblearn.under_sampling.EditedNearestNeighbours.set_params"]], "instancehardnessthreshold (class in imblearn.under_sampling)": [[93, "imblearn.under_sampling.InstanceHardnessThreshold"]], "fit() (imblearn.under_sampling.instancehardnessthreshold method)": [[93, "imblearn.under_sampling.InstanceHardnessThreshold.fit"]], "fit_resample() (imblearn.under_sampling.instancehardnessthreshold method)": [[93, "imblearn.under_sampling.InstanceHardnessThreshold.fit_resample"]], "get_feature_names_out() (imblearn.under_sampling.instancehardnessthreshold method)": [[93, "imblearn.under_sampling.InstanceHardnessThreshold.get_feature_names_out"]], "get_metadata_routing() (imblearn.under_sampling.instancehardnessthreshold method)": [[93, "imblearn.under_sampling.InstanceHardnessThreshold.get_metadata_routing"]], "get_params() (imblearn.under_sampling.instancehardnessthreshold method)": [[93, "imblearn.under_sampling.InstanceHardnessThreshold.get_params"]], "set_params() (imblearn.under_sampling.instancehardnessthreshold method)": [[93, "imblearn.under_sampling.InstanceHardnessThreshold.set_params"]], "nearmiss (class in imblearn.under_sampling)": [[94, "imblearn.under_sampling.NearMiss"]], "fit() (imblearn.under_sampling.nearmiss method)": [[94, "imblearn.under_sampling.NearMiss.fit"]], "fit_resample() (imblearn.under_sampling.nearmiss method)": [[94, "imblearn.under_sampling.NearMiss.fit_resample"]], "get_feature_names_out() (imblearn.under_sampling.nearmiss method)": [[94, "imblearn.under_sampling.NearMiss.get_feature_names_out"]], "get_metadata_routing() (imblearn.under_sampling.nearmiss method)": [[94, "imblearn.under_sampling.NearMiss.get_metadata_routing"]], "get_params() (imblearn.under_sampling.nearmiss method)": [[94, "imblearn.under_sampling.NearMiss.get_params"]], "set_params() (imblearn.under_sampling.nearmiss method)": [[94, "imblearn.under_sampling.NearMiss.set_params"]], "neighbourhoodcleaningrule (class in imblearn.under_sampling)": [[95, "imblearn.under_sampling.NeighbourhoodCleaningRule"]], "fit() (imblearn.under_sampling.neighbourhoodcleaningrule method)": [[95, "imblearn.under_sampling.NeighbourhoodCleaningRule.fit"]], "fit_resample() (imblearn.under_sampling.neighbourhoodcleaningrule method)": [[95, "imblearn.under_sampling.NeighbourhoodCleaningRule.fit_resample"]], "get_feature_names_out() (imblearn.under_sampling.neighbourhoodcleaningrule method)": [[95, "imblearn.under_sampling.NeighbourhoodCleaningRule.get_feature_names_out"]], "get_metadata_routing() (imblearn.under_sampling.neighbourhoodcleaningrule method)": [[95, "imblearn.under_sampling.NeighbourhoodCleaningRule.get_metadata_routing"]], "get_params() (imblearn.under_sampling.neighbourhoodcleaningrule method)": [[95, "imblearn.under_sampling.NeighbourhoodCleaningRule.get_params"]], "set_params() (imblearn.under_sampling.neighbourhoodcleaningrule method)": [[95, "imblearn.under_sampling.NeighbourhoodCleaningRule.set_params"]], "onesidedselection (class in imblearn.under_sampling)": [[96, "imblearn.under_sampling.OneSidedSelection"]], "fit() (imblearn.under_sampling.onesidedselection method)": [[96, "imblearn.under_sampling.OneSidedSelection.fit"]], "fit_resample() (imblearn.under_sampling.onesidedselection method)": [[96, "imblearn.under_sampling.OneSidedSelection.fit_resample"]], "get_feature_names_out() (imblearn.under_sampling.onesidedselection method)": [[96, "imblearn.under_sampling.OneSidedSelection.get_feature_names_out"]], "get_metadata_routing() (imblearn.under_sampling.onesidedselection method)": [[96, "imblearn.under_sampling.OneSidedSelection.get_metadata_routing"]], "get_params() (imblearn.under_sampling.onesidedselection method)": [[96, "imblearn.under_sampling.OneSidedSelection.get_params"]], "set_params() (imblearn.under_sampling.onesidedselection method)": [[96, "imblearn.under_sampling.OneSidedSelection.set_params"]], "randomundersampler (class in imblearn.under_sampling)": [[97, "imblearn.under_sampling.RandomUnderSampler"]], "fit() (imblearn.under_sampling.randomundersampler method)": [[97, "imblearn.under_sampling.RandomUnderSampler.fit"]], "fit_resample() (imblearn.under_sampling.randomundersampler method)": [[97, "imblearn.under_sampling.RandomUnderSampler.fit_resample"]], "get_feature_names_out() (imblearn.under_sampling.randomundersampler method)": [[97, "imblearn.under_sampling.RandomUnderSampler.get_feature_names_out"]], "get_metadata_routing() (imblearn.under_sampling.randomundersampler method)": [[97, "imblearn.under_sampling.RandomUnderSampler.get_metadata_routing"]], "get_params() (imblearn.under_sampling.randomundersampler method)": [[97, "imblearn.under_sampling.RandomUnderSampler.get_params"]], "set_params() (imblearn.under_sampling.randomundersampler method)": [[97, "imblearn.under_sampling.RandomUnderSampler.set_params"]], "repeatededitednearestneighbours (class in imblearn.under_sampling)": [[98, "imblearn.under_sampling.RepeatedEditedNearestNeighbours"]], "fit() (imblearn.under_sampling.repeatededitednearestneighbours method)": [[98, "imblearn.under_sampling.RepeatedEditedNearestNeighbours.fit"]], "fit_resample() (imblearn.under_sampling.repeatededitednearestneighbours method)": [[98, "imblearn.under_sampling.RepeatedEditedNearestNeighbours.fit_resample"]], "get_feature_names_out() (imblearn.under_sampling.repeatededitednearestneighbours method)": [[98, "imblearn.under_sampling.RepeatedEditedNearestNeighbours.get_feature_names_out"]], "get_metadata_routing() (imblearn.under_sampling.repeatededitednearestneighbours method)": [[98, "imblearn.under_sampling.RepeatedEditedNearestNeighbours.get_metadata_routing"]], "get_params() (imblearn.under_sampling.repeatededitednearestneighbours method)": [[98, "imblearn.under_sampling.RepeatedEditedNearestNeighbours.get_params"]], "set_params() (imblearn.under_sampling.repeatededitednearestneighbours method)": [[98, "imblearn.under_sampling.RepeatedEditedNearestNeighbours.set_params"]], "tomeklinks (class in imblearn.under_sampling)": [[99, "imblearn.under_sampling.TomekLinks"]], "fit() (imblearn.under_sampling.tomeklinks method)": [[99, "imblearn.under_sampling.TomekLinks.fit"]], "fit_resample() (imblearn.under_sampling.tomeklinks method)": [[99, "imblearn.under_sampling.TomekLinks.fit_resample"]], "get_feature_names_out() (imblearn.under_sampling.tomeklinks method)": [[99, "imblearn.under_sampling.TomekLinks.get_feature_names_out"]], "get_metadata_routing() (imblearn.under_sampling.tomeklinks method)": [[99, "imblearn.under_sampling.TomekLinks.get_metadata_routing"]], "get_params() (imblearn.under_sampling.tomeklinks method)": [[99, "imblearn.under_sampling.TomekLinks.get_params"]], "is_tomek() (imblearn.under_sampling.tomeklinks static method)": [[99, "imblearn.under_sampling.TomekLinks.is_tomek"]], "set_params() (imblearn.under_sampling.tomeklinks method)": [[99, "imblearn.under_sampling.TomekLinks.set_params"]], "check_neighbors_object() (in module imblearn.utils)": [[100, "imblearn.utils.check_neighbors_object"]], "check_sampling_strategy() (in module imblearn.utils)": [[101, "imblearn.utils.check_sampling_strategy"]], "check_target_type() (in module imblearn.utils)": [[102, "imblearn.utils.check_target_type"]], "parametrize_with_checks() (in module imblearn.utils.estimator_checks)": [[103, "imblearn.utils.estimator_checks.parametrize_with_checks"]], "imblearn.keras": [[105, "module-imblearn.keras"]], "imblearn.metrics": [[106, "module-imblearn.metrics"]], "imblearn.metrics.pairwise": [[106, "module-imblearn.metrics.pairwise"]], "imblearn.over_sampling": [[108, "module-imblearn.over_sampling"]], "imblearn.pipeline": [[109, "module-imblearn.pipeline"]], "imblearn.tensorflow": [[110, "module-imblearn.tensorflow"]], "imblearn.under_sampling": [[111, "module-imblearn.under_sampling"]], "imblearn.under_sampling._prototype_generation": [[111, "module-imblearn.under_sampling._prototype_generation"]], "imblearn.under_sampling._prototype_selection": [[111, "module-imblearn.under_sampling._prototype_selection"]], "imblearn.utils": [[112, "module-imblearn.utils"]], "imblearn.utils.estimator_checks": [[112, "module-imblearn.utils.estimator_checks"]]}})